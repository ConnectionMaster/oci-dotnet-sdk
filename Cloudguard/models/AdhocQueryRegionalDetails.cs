/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.CloudguardService.Models
{
    /// <summary>
    /// Instance level status for each region.
    /// </summary>
    public class AdhocQueryRegionalDetails 
    {
        
        /// <value>
        /// Region name
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Region is required.")]
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }
        
        /// <value>
        /// adhoc query status of the region
        /// </value>
        [JsonProperty(PropertyName = "regionalStatus")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AdhocQueryStatus> RegionalStatus { get; set; }
        
        /// <value>
        /// error message to show if adhoc query fails in a region
        /// </value>
        [JsonProperty(PropertyName = "regionalError")]
        public string RegionalError { get; set; }
        
        /// <value>
        /// Expected number of instances on which query should run
        /// </value>
        [JsonProperty(PropertyName = "expectedCount")]
        public string ExpectedCount { get; set; }
        
        /// <value>
        /// Number of instances on which query failed
        /// </value>
        [JsonProperty(PropertyName = "failedCount")]
        public string FailedCount { get; set; }
        
        /// <value>
        /// Number of instances on which query succeeded
        /// </value>
        [JsonProperty(PropertyName = "succeededCount")]
        public string SucceededCount { get; set; }
        
        /// <value>
        /// Number of instances on which query expired
        /// </value>
        [JsonProperty(PropertyName = "expiredCount")]
        public string ExpiredCount { get; set; }
        
    }
}
