/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.CloudguardService.Models
{
    /// <summary>
    /// Information for a logging query for a data source.
    /// </summary>
    public class LoggingQueryDataSourceDetails : DataSourceDetails
    {
        
        /// <value>
        /// List of logging query regions
        /// </value>
        [JsonProperty(PropertyName = "regions")]
        public System.Collections.Generic.List<string> Regions { get; set; }
        
        /// <value>
        /// The continuous query expression that is run periodicall
        /// </value>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }
        
        /// <value>
        /// Interval in minutes that query is run periodically.
        /// </value>
        [JsonProperty(PropertyName = "intervalInMinutes")]
        public System.Nullable<int> IntervalInMinutes { get; set; }
        
        /// <value>
        /// The integer value that must be exceeded, fall below or equal to (depending on the operator), for the query result to trigger an event
        /// </value>
        [JsonProperty(PropertyName = "threshold")]
        public System.Nullable<int> Threshold { get; set; }
        
        [JsonProperty(PropertyName = "queryStartTime")]
        public ContinuousQueryStartPolicy QueryStartTime { get; set; }
        
        /// <value>
        /// Operator used in data source
        /// </value>
        [JsonProperty(PropertyName = "operator")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LoggingQueryOperatorType> Operator { get; set; }
        
        /// <value>
        /// Type of logging query for data source (Sighting/Insight)
        /// </value>
        [JsonProperty(PropertyName = "loggingQueryType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LoggingQueryType> LoggingQueryType { get; set; }
        
        /// <value>
        /// The additional entities count used for data source query
        /// </value>
        [JsonProperty(PropertyName = "additionalEntitiesCount")]
        public System.Nullable<int> AdditionalEntitiesCount { get; set; }
        
        [JsonProperty(PropertyName = "loggingQueryDetails")]
        public LoggingQueryDetails LoggingQueryDetails { get; set; }
        
        [JsonProperty(PropertyName = "dataSourceFeedProvider")]
        private readonly string dataSourceFeedProvider = "LOGGINGQUERY";
    }
}
