/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DataintegrationService.Models
{
    /// <summary>
    /// Properties used in connection create operations.
    /// </summary>
    [JsonConverter(typeof(CreateConnectionDetailsModelConverter))]
    public class CreateConnectionDetails 
    {
                ///
        /// <value>
        /// The type of the connection.
        /// </value>
        ///
        public enum ModelTypeEnum {
            [EnumMember(Value = "ORACLE_ADWC_CONNECTION")]
            OracleAdwcConnection,
            [EnumMember(Value = "ORACLE_ATP_CONNECTION")]
            OracleAtpConnection,
            [EnumMember(Value = "ORACLE_OBJECT_STORAGE_CONNECTION")]
            OracleObjectStorageConnection,
            [EnumMember(Value = "ORACLEDB_CONNECTION")]
            OracledbConnection,
            [EnumMember(Value = "MYSQL_CONNECTION")]
            MysqlConnection,
            [EnumMember(Value = "GENERIC_JDBC_CONNECTION")]
            GenericJdbcConnection,
            [EnumMember(Value = "BICC_CONNECTION")]
            BiccConnection,
            [EnumMember(Value = "AMAZON_S3_CONNECTION")]
            AmazonS3Connection,
            [EnumMember(Value = "BIP_CONNECTION")]
            BipConnection,
            [EnumMember(Value = "LAKE_CONNECTION")]
            LakeConnection,
            [EnumMember(Value = "ORACLE_PEOPLESOFT_CONNECTION")]
            OraclePeoplesoftConnection,
            [EnumMember(Value = "ORACLE_EBS_CONNECTION")]
            OracleEbsConnection,
            [EnumMember(Value = "ORACLE_SIEBEL_CONNECTION")]
            OracleSiebelConnection,
            [EnumMember(Value = "HDFS_CONNECTION")]
            HdfsConnection,
            [EnumMember(Value = "MYSQL_HEATWAVE_CONNECTION")]
            MysqlHeatwaveConnection,
            [EnumMember(Value = "REST_NO_AUTH_CONNECTION")]
            RestNoAuthConnection,
            [EnumMember(Value = "REST_BASIC_AUTH_CONNECTION")]
            RestBasicAuthConnection,
            [EnumMember(Value = "OAUTH2_CONNECTION")]
            Oauth2Connection
        };

        
        /// <value>
        /// Generated key that can be used in API calls to identify connection. On scenarios where reference to the connection is needed, a value can be passed in create.
        /// </value>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }
        
        /// <value>
        /// The model version of an object.
        /// </value>
        [JsonProperty(PropertyName = "modelVersion")]
        public string ModelVersion { get; set; }
        
        [JsonProperty(PropertyName = "parentRef")]
        public ParentReference ParentRef { get; set; }
        
        /// <value>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// User-defined description for the connection.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </value>
        [JsonProperty(PropertyName = "objectStatus")]
        public System.Nullable<int> ObjectStatus { get; set; }
        
        /// <value>
        /// Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Identifier is required.")]
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }
        
        /// <value>
        /// The properties for the connection.
        /// </value>
        [JsonProperty(PropertyName = "connectionProperties")]
        public System.Collections.Generic.List<ConnectionProperty> ConnectionProperties { get; set; }
        
        [JsonProperty(PropertyName = "registryMetadata")]
        public RegistryMetadata RegistryMetadata { get; set; }
        
    }

    public class CreateConnectionDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(CreateConnectionDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(CreateConnectionDetails);
            var discriminator = jsonObject["modelType"].Value<string>();
            switch (discriminator)
            {
                case "ORACLE_SIEBEL_CONNECTION":
                    obj = new CreateConnectionFromOracleSiebel();
                    break;
                case "AMAZON_S3_CONNECTION":
                    obj = new CreateConnectionFromAmazonS3();
                    break;
                case "BICC_CONNECTION":
                    obj = new CreateConnectionFromBICC();
                    break;
                case "ORACLE_ATP_CONNECTION":
                    obj = new CreateConnectionFromAtp();
                    break;
                case "HDFS_CONNECTION":
                    obj = new CreateConnectionFromHdfs();
                    break;
                case "MYSQL_HEATWAVE_CONNECTION":
                    obj = new CreateConnectionFromMySqlHeatWave();
                    break;
                case "REST_BASIC_AUTH_CONNECTION":
                    obj = new CreateConnectionFromRestBasicAuth();
                    break;
                case "ORACLEDB_CONNECTION":
                    obj = new CreateConnectionFromOracle();
                    break;
                case "ORACLE_PEOPLESOFT_CONNECTION":
                    obj = new CreateConnectionFromOraclePeopleSoft();
                    break;
                case "ORACLE_EBS_CONNECTION":
                    obj = new CreateConnectionFromOracleEbs();
                    break;
                case "MYSQL_CONNECTION":
                    obj = new CreateConnectionFromMySQL();
                    break;
                case "GENERIC_JDBC_CONNECTION":
                    obj = new CreateConnectionFromJdbc();
                    break;
                case "BIP_CONNECTION":
                    obj = new CreateConnectionFromBIP();
                    break;
                case "OAUTH2_CONNECTION":
                    obj = new CreateConnectionFromOAuth2();
                    break;
                case "ORACLE_ADWC_CONNECTION":
                    obj = new CreateConnectionFromAdwc();
                    break;
                case "REST_NO_AUTH_CONNECTION":
                    obj = new CreateConnectionFromRestNoAuth();
                    break;
                case "ORACLE_OBJECT_STORAGE_CONNECTION":
                    obj = new CreateConnectionFromObjectStorage();
                    break;
                case "LAKE_CONNECTION":
                    obj = new CreateConnectionFromLake();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
