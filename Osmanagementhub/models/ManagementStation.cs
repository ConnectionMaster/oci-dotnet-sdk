/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OsmanagementhubService.Models
{
    /// <summary>
    /// Provides information about the management station, including name, state, and configuration.
    /// </summary>
    public class ManagementStation 
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the instance that is acting as the management station.
        /// </value>
        [JsonProperty(PropertyName = "managedInstanceId")]
        public string ManagedInstanceId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the management station.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job for the mirror sync.
        /// </value>
        [JsonProperty(PropertyName = "scheduledJobId")]
        public string ScheduledJobId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile used for the management station.
        /// </value>
        [JsonProperty(PropertyName = "profileId")]
        public string ProfileId { get; set; }
        
        /// <value>
        /// A user-friendly name for the management station.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// User-specified description for the management station.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Hostname of the management station.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Hostname is required.")]
        [JsonProperty(PropertyName = "hostname")]
        public string Hostname { get; set; }
        
        /// <value>
        /// Current state of the mirror sync for the management station.
        /// </value>
        [JsonProperty(PropertyName = "overallState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<OverallState> OverallState { get; set; }
        
        /// <value>
        /// A decimal number representing the progress of the current mirror sync.
        /// </value>
        [JsonProperty(PropertyName = "overallPercentage")]
        public System.Nullable<int> OverallPercentage { get; set; }
        
        /// <value>
        /// A decimal number representing the amount of mirror capacity used by the sync.
        /// </value>
        [JsonProperty(PropertyName = "mirrorCapacity")]
        public System.Nullable<int> MirrorCapacity { get; set; }
        
        /// <value>
        /// The number of software sources that the station is mirroring.
        /// </value>
        [JsonProperty(PropertyName = "totalMirrors")]
        public System.Nullable<int> TotalMirrors { get; set; }
        
        [JsonProperty(PropertyName = "mirrorSyncStatus")]
        public MirrorSyncStatus MirrorSyncStatus { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Proxy is required.")]
        [JsonProperty(PropertyName = "proxy")]
        public ProxyConfiguration Proxy { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Mirror is required.")]
        [JsonProperty(PropertyName = "mirror")]
        public MirrorConfiguration Mirror { get; set; }
        
        [JsonProperty(PropertyName = "health")]
        public StationHealth Health { get; set; }
                ///
        /// <value>
        /// The current state of the management station.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The current state of the management station.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// When enabled, the station setup script automatically runs to configure the firewall and SELinux settings on the station.
        /// </value>
        [JsonProperty(PropertyName = "isAutoConfigEnabled")]
        public System.Nullable<bool> IsAutoConfigEnabled { get; set; }
        
        /// <value>
        /// A list of other management stations that are behind the same load balancer within a high availability configuration. Stations are identified as peers if they have the same hostname and compartment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PeerManagementStations is required.")]
        [JsonProperty(PropertyName = "peerManagementStations")]
        public System.Collections.Generic.List<PeerManagementStation> PeerManagementStations { get; set; }
        
        /// <value>
        /// The location of the instance that is acting as the management station.
        /// </value>
        [JsonProperty(PropertyName = "location")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ManagedInstanceLocation> Location { get; set; }
        
        /// <value>
        /// Amount of available mirror storage in bytes.
        /// </value>
        [JsonProperty(PropertyName = "mirrorStorageAvailableSize")]
        public System.Nullable<long> MirrorStorageAvailableSize { get; set; }
        
        /// <value>
        /// Total mirror storage size in bytes.
        /// </value>
        [JsonProperty(PropertyName = "mirrorStorageSize")]
        public System.Nullable<long> MirrorStorageSize { get; set; }
        
        /// <value>
        /// The total size of all software source mirrors in bytes.
        /// </value>
        [JsonProperty(PropertyName = "mirrorSize")]
        public System.Nullable<long> MirrorSize { get; set; }
        
        /// <value>
        /// The total number of unique packages within the mirrored software sources on the station. Each package is counted only once, regardless of how many versions it has.
        /// </value>
        [JsonProperty(PropertyName = "mirrorUniquePackageCount")]
        public System.Nullable<int> MirrorUniquePackageCount { get; set; }
        
        /// <value>
        /// The total number of all packages within the mirrored software sources.
        /// </value>
        [JsonProperty(PropertyName = "mirrorPackageCount")]
        public System.Nullable<int> MirrorPackageCount { get; set; }
        
        /// <value>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
        /// For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// Example: {&quot;Department&quot;: &quot;Finance&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// Example: {&quot;Operations&quot;: {&quot;CostCenter&quot;: &quot;42&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// System tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
    }
}
