/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OsmanagementhubService.Models
{
    /// <summary>
    /// An object that defines a work request.
    /// </summary>
    public class WorkRequest 
    {
        
        /// <value>
        /// Type of the work request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OperationType is required.")]
        [JsonProperty(PropertyName = "operationType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<WorkRequestOperationType> OperationType { get; set; }
        
        /// <value>
        /// Status of the work request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<OperationStatus> Status { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the work request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// A short description about the work request.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// A short display name for the work request.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// A progress or error message, if there is any.
        /// </value>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent work request, if there is any.
        /// </value>
        [JsonProperty(PropertyName = "parentId")]
        public string ParentId { get; set; }
        
        /// <value>
        /// The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the child work requests.
        /// </value>
        [JsonProperty(PropertyName = "childrenId")]
        public System.Collections.Generic.List<string> ChildrenId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the work request.
        /// Work requests should be scoped to the same compartment as the resource it affects.
        /// If the work request affects multiple resources the different compartments, the services selects the compartment of the primary resource.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the resources affected by the work request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Resources is required.")]
        [JsonProperty(PropertyName = "resources")]
        public System.Collections.Generic.List<WorkRequestResource> Resources { get; set; }
        
        /// <value>
        /// A list of package names to be installed, updated, or removed.
        /// </value>
        [JsonProperty(PropertyName = "packageNames")]
        public System.Collections.Generic.List<string> PackageNames { get; set; }
        
        /// <value>
        /// The UUIDs of the target Windows update (only used when operation type is INSTALL_WINDOWS_UPDATES).
        /// </value>
        [JsonProperty(PropertyName = "windowsUpdateNames")]
        public System.Collections.Generic.List<string> WindowsUpdateNames { get; set; }
        
        /// <value>
        /// The list of appstream modules being operated on.
        /// </value>
        [JsonProperty(PropertyName = "moduleSpecs")]
        public System.Collections.Generic.List<ModuleSpecDetails> ModuleSpecs { get; set; }
        
        /// <value>
        /// The percentage complete of the operation tracked by this work request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PercentComplete is required.")]
        [JsonProperty(PropertyName = "percentComplete")]
        public System.Nullable<float> PercentComplete { get; set; }
        
        /// <value>
        /// The date and time the work request was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time the work request started (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The date and time the work request started (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeStarted")]
        public System.Nullable<System.DateTime> TimeStarted { get; set; }
        
        /// <value>
        /// The date and time the work request completed (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeFinished")]
        public System.Nullable<System.DateTime> TimeFinished { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that initiated the work request.
        /// </value>
        [JsonProperty(PropertyName = "initiatorId")]
        public string InitiatorId { get; set; }
        
        [JsonProperty(PropertyName = "managementStation")]
        public WorkRequestManagementStationDetails ManagementStation { get; set; }
        
        /// <value>
        /// The scheduled date and time to retry the work request (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </value>
        [JsonProperty(PropertyName = "timeScheduled")]
        public System.Nullable<System.DateTime> TimeScheduled { get; set; }
        
        /// <value>
        /// The location of the bundle in the filesystem of the resource associated to this work request.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "contentLocation")]
        public string ContentLocation { get; set; }
        
        /// <value>
        /// The event id of the content. This property is required when the work request type is IMPORT_CONTENT or REMOVE_CONTENT.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "eventId")]
        public string EventId { get; set; }
        
        /// <value>
        /// The EventFingerprint associated with the content. This property is required when the work request type is IMPORT_CONTENT or REMOVE_CONTENT.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "contentChecksum")]
        public string ContentChecksum { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the original work request that is being retried.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "retryOfId")]
        public string RetryOfId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the original work request that is being rerun.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "rerunOfId")]
        public string RerunOfId { get; set; }
        
        /// <value>
        /// The amount of time in minutes to wait until retrying the work request. If set, the service will automatically retry 
        /// a failed work request after the interval. For example, An interval set to [2,5,10]. If the initial 
        /// execution of the work request fails, the service waits 2 minutes and then retries. If that fails, the service waits 5 minutes 
        /// and then retries. If that fails, the service waits 10 minutes and then retries.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "retryIntervals")]
        public System.Collections.Generic.List<int> RetryIntervals { get; set; }
        
        /// <value>
        /// Indicates whether this work request is managed by the Autonomous Linux service.
        /// </value>
        [JsonProperty(PropertyName = "isManagedByAutonomousLinux")]
        public System.Nullable<bool> IsManagedByAutonomousLinux { get; set; }
        
        /// <value>
        /// The number of minutes the service waits for the reboot to complete. If the managed instance doesn't reboot within the timeout, the service marks the reboot job as failed.
        /// </value>
        [JsonProperty(PropertyName = "rebootTimeoutInMins")]
        public System.Nullable<int> RebootTimeoutInMins { get; set; }
        
    }
}
