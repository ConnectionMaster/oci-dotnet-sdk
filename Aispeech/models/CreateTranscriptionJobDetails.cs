/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AispeechService.Models
{
    /// <summary>
    /// The information about new Transcription Job.
    /// </summary>
    public class CreateTranscriptionJobDetails 
    {
        
        /// <value>
        /// A user-friendly display name for the job.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the job.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// A short description of the job.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
                ///
        ///
        public enum AdditionalTranscriptionFormatsEnum {
            [EnumMember(Value = "SRT")]
            Srt
        };

        /// <value>
        /// Transcription Format. By default, the JSON format is used.
        /// </value>
        [JsonProperty(PropertyName = "additionalTranscriptionFormats", ItemConverterType = typeof(StringEnumConverter))]
        public System.Collections.Generic.List<AdditionalTranscriptionFormatsEnum> AdditionalTranscriptionFormats { get; set; }
        
        [JsonProperty(PropertyName = "modelDetails")]
        public TranscriptionModelDetails ModelDetails { get; set; }
        
        [JsonProperty(PropertyName = "normalization")]
        public TranscriptionNormalization Normalization { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InputLocation is required.")]
        [JsonProperty(PropertyName = "inputLocation")]
        public InputLocation InputLocation { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OutputLocation is required.")]
        [JsonProperty(PropertyName = "outputLocation")]
        public OutputLocation OutputLocation { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}.
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace-1&quot;: {&quot;bar-key-1&quot;: &quot;value-1&quot;, &quot;bar-key-2&quot;: &quot;value-2&quot;}, &quot;foo-namespace-2&quot;: {&quot;bar-key-1&quot;: &quot;value-1&quot;, &quot;bar-key-2&quot;: &quot;value-2&quot;}}.
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
