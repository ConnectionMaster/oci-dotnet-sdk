/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AispeechService.Models
{
    /// <summary>
    /// Individual transcription tokens.
    /// </summary>
    public class RealtimeMessageResultTranscriptionToken 
    {
        
        /// <value>
        /// Transcription token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Token is required.")]
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }
        
        /// <value>
        /// Start time in milliseconds for the transcription token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "StartTimeInMs is required.")]
        [JsonProperty(PropertyName = "startTimeInMs")]
        public System.Nullable<int> StartTimeInMs { get; set; }
        
        /// <value>
        /// End time in milliseconds for the transcription token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EndTimeInMs is required.")]
        [JsonProperty(PropertyName = "endTimeInMs")]
        public System.Nullable<int> EndTimeInMs { get; set; }
        
        /// <value>
        /// Confidence score for the transcription token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Confidence is required.")]
        [JsonProperty(PropertyName = "confidence")]
        public System.Nullable<float> Confidence { get; set; }
                ///
        /// <value>
        /// Type of the transcription token.
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "WORD")]
            Word,
            [EnumMember(Value = "PUNCTUATION")]
            Punctuation
        };

        /// <value>
        /// Type of the transcription token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Type is required.")]
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
    }
}
