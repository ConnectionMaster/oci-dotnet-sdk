/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AispeechService.Models
{
    /// <summary>
    /// Parameters to be sent to the realtime speech service over a websocket connection.
    /// </summary>
    public class RealtimeParameters 
    {
        
        /// <value>
        /// Audio encoding to use
        /// - audio/raw;rate=16000
        /// - audio/raw;rate=8000
        /// - audio/raw;rate=8000;codec=mulaw
        /// - audio/raw;rate=8000;codec=alaw
        /// 
        /// </value>
        [JsonProperty(PropertyName = "encoding")]
        public string Encoding { get; set; }
        
        /// <value>
        /// Toggle for ack messages.
        /// </value>
        [JsonProperty(PropertyName = "isAckEnabled")]
        public System.Nullable<bool> IsAckEnabled { get; set; }
        
        /// <value>
        /// Silence threshold for Realtime Speech partial results in milliseconds.
        /// </value>
        [JsonProperty(PropertyName = "partialSilenceThresholdInMs")]
        public System.Nullable<int> PartialSilenceThresholdInMs { get; set; }
        
        /// <value>
        /// Silence threshold for Realtime Speech final results in milliseconds.
        /// </value>
        [JsonProperty(PropertyName = "finalSilenceThresholdInMs")]
        public System.Nullable<int> FinalSilenceThresholdInMs { get; set; }
                ///
        /// <value>
        /// When enabled sets the amount of confidence required for latest tokens before returning them as part of a new partial result
        /// </value>
        ///
        public enum StabilizePartialResultsEnum {
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "LOW")]
            Low,
            [EnumMember(Value = "MEDIUM")]
            Medium,
            [EnumMember(Value = "HIGH")]
            High
        };

        /// <value>
        /// When enabled sets the amount of confidence required for latest tokens before returning them as part of a new partial result
        /// </value>
        [JsonProperty(PropertyName = "stabilizePartialResults")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<StabilizePartialResultsEnum> StabilizePartialResults { get; set; }
                ///
        /// <value>
        /// Model Domain.
        /// </value>
        ///
        public enum ModelDomainEnum {
            [EnumMember(Value = "GENERIC")]
            Generic,
            [EnumMember(Value = "MEDICAL")]
            Medical
        };

        /// <value>
        /// Model Domain.
        /// </value>
        [JsonProperty(PropertyName = "modelDomain")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ModelDomainEnum> ModelDomain { get; set; }
        
        /// <value>
        /// Locale value as per given in [https://datatracker.ietf.org/doc/html/rfc5646].
        /// - en-US: English - United States
        /// - es-ES: Spanish - Spain
        /// - pt-BR: Portuguese - Brazil
        /// - en-GB: English - Great Britain
        /// - en-AU: English - Australia
        /// - en-IN: English - India
        /// - hi-IN: Hindi - India
        /// - fr-FR: French - France
        /// - de-DE: German - Germany
        /// - it-IT: Italian - Italy
        /// 
        /// </value>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }
        
        /// <value>
        /// If set to true, the service will not fail connection attempt if it encounters any issues that prevent the loading of all specified user customizations. Any invalid customizations will simply be ignored and connection will continue being established with the default base model and any remaining valid customizations.
        /// If set to false, if the service is unable to load any of the specified customizations, an error detailing why will be returned and the session will end.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "shouldIgnoreInvalidCustomizations")]
        public System.Nullable<bool> ShouldIgnoreInvalidCustomizations { get; set; }
        
        /// <value>
        /// Array of customization objects.
        /// </value>
        [JsonProperty(PropertyName = "customizations")]
        public System.Collections.Generic.List<CustomizationInference> Customizations { get; set; }
                ///
        /// <value>
        /// Configure punctuations in the generated transcriptions. Disabled by default.
        /// - NONE: No punctuation in the transcription response
        /// - SPOKEN: Punctuations in response only when verbally spoken
        /// - AUTO: Automatic punctuation in the response, spoken punctuations are disabled
        /// 
        /// </value>
        ///
        public enum PunctuationEnum {
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "SPOKEN")]
            Spoken,
            [EnumMember(Value = "AUTO")]
            Auto
        };

        /// <value>
        /// Configure punctuations in the generated transcriptions. Disabled by default.
        /// - NONE: No punctuation in the transcription response
        /// - SPOKEN: Punctuations in response only when verbally spoken
        /// - AUTO: Automatic punctuation in the response, spoken punctuations are disabled
        /// 
        /// </value>
        [JsonProperty(PropertyName = "punctuation")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<PunctuationEnum> Punctuation { get; set; }
        
    }
}
