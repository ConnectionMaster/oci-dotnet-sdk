/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.FusionappsService.Models
{
    /// <summary>
    /// The policy that specifies the maintenance and upgrade preferences for an environment. For more information about the options, see [Understanding Environment Maintenance](https://docs.cloud.oracle.com/iaas/Content/fusion-applications/plan-environment-family.htm#about-env-maintenance).
    /// </summary>
    public class GetMaintenancePolicyDetails 
    {
        
        [JsonProperty(PropertyName = "quarterlyUpgradeBeginTimes")]
        public QuarterlyUpgradeBeginTimes QuarterlyUpgradeBeginTimes { get; set; }
        
        /// <value>
        /// Whether the Fusion environment will be updated monthly or updated on the quarterly cycle. This setting overrides the monthly patching setting of its Fusion environment family.
        /// </value>
        [JsonProperty(PropertyName = "monthlyPatchingOverride")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<MaintenancePolicy.MonthlyPatchingOverrideEnum> MonthlyPatchingOverride { get; set; }
        
        /// <value>
        /// User choice to upgrade both production and non-production environments at the same time. Overrides the Fusion environment family setting.
        /// </value>
        [JsonProperty(PropertyName = "environmentMaintenanceOverride")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<MaintenancePolicy.EnvironmentMaintenanceOverrideEnum> EnvironmentMaintenanceOverride { get; set; }
        
    }
}
