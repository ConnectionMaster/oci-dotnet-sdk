/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.FusionappsService.Models
{
    /// <summary>
    /// Summary of the scheduled activity for a Fusion environment.
    /// </summary>
    public class ScheduledActivitySummary 
    {
        
        /// <value>
        /// Unique identifier that is immutable on creation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// A friendly name for the scheduled activity. Can be changed later.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The run cadence of this scheduled activity. Valid values are Quarterly, Monthly, OneOff, and Vertex.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RunCycle is required.")]
        [JsonProperty(PropertyName = "runCycle")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledActivity.RunCycleEnum> RunCycle { get; set; }
        
        /// <value>
        /// The OCID of the Fusion environment for the scheduled activity.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FusionEnvironmentId is required.")]
        [JsonProperty(PropertyName = "fusionEnvironmentId")]
        public string FusionEnvironmentId { get; set; }
        
        /// <value>
        /// The current state of the scheduled activity. Valid values are Scheduled, In progress , Failed, Completed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledActivity.LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// List of actions
        /// </value>
        [JsonProperty(PropertyName = "actions")]
        public System.Collections.Generic.List<Action> Actions { get; set; }
        
        /// <value>
        /// Current time the scheduled activity is scheduled to start. An RFC3339 formatted datetime string.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeScheduledStart is required.")]
        [JsonProperty(PropertyName = "timeScheduledStart")]
        public System.Nullable<System.DateTime> TimeScheduledStart { get; set; }
        
        /// <value>
        /// Current time the scheduled activity is scheduled to end. An RFC3339 formatted datetime string.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeExpectedFinish is required.")]
        [JsonProperty(PropertyName = "timeExpectedFinish")]
        public System.Nullable<System.DateTime> TimeExpectedFinish { get; set; }
        
        /// <value>
        /// The time the scheduled activity actually completed / cancelled / failed. An RFC3339 formatted datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeFinished")]
        public System.Nullable<System.DateTime> TimeFinished { get; set; }
        
        /// <value>
        /// Cumulative delay hours
        /// </value>
        [JsonProperty(PropertyName = "delayInHours")]
        public System.Nullable<int> DelayInHours { get; set; }
        
        /// <value>
        /// Service availability / impact during scheduled activity execution, up down
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServiceAvailability is required.")]
        [JsonProperty(PropertyName = "serviceAvailability")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledActivity.ServiceAvailabilityEnum> ServiceAvailability { get; set; }
        
        /// <value>
        /// The time the scheduled activity record was created. An RFC3339 formatted datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeAccepted")]
        public System.Nullable<System.DateTime> TimeAccepted { get; set; }
        
        /// <value>
        /// The time the scheduled activity record was updated. An RFC3339 formatted datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
        
        /// <value>
        /// A property describing the phase of the scheduled activity.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ScheduledActivityPhase is required.")]
        [JsonProperty(PropertyName = "scheduledActivityPhase")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledActivity.ScheduledActivityPhaseEnum> ScheduledActivityPhase { get; set; }
        
        /// <value>
        /// The unique identifier that associates a scheduled activity with others in one complete maintenance. For example, with ZDT, a complete upgrade maintenance includes 5 scheduled activities - PREPARE, EXECUTE, POST, PRE_MAINTENANCE, and POST_MAINTENANCE. All of them share the same unique identifier - scheduledActivityAssociationId.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ScheduledActivityAssociationId is required.")]
        [JsonProperty(PropertyName = "scheduledActivityAssociationId")]
        public string ScheduledActivityAssociationId { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
