/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.CloudbridgeService.Models;
using Oci.CloudbridgeService.Requests;
using Oci.CloudbridgeService.Responses;

namespace Oci.CloudbridgeService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of OcbAgentSvc.
    /// </summary>
    public class OcbAgentSvcWaiters
    {
        private readonly OcbAgentSvcClient client;

        public  OcbAgentSvcWaiters(OcbAgentSvcClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentRequest, GetAgentResponse> ForAgent(GetAgentRequest request, params Agent.LifecycleStateEnum[] targetStates)
        {
            return this.ForAgent(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentRequest, GetAgentResponse> ForAgent(GetAgentRequest request, WaiterConfiguration config, params Agent.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAgentRequest, GetAgentResponse>(
                request,
                request => client.GetAgent(request),
                response => targetStates.Contains(response.Agent.LifecycleState.Value),
                targetStates.Contains(Agent.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAgentRequest, GetAgentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentDependencyRequest, GetAgentDependencyResponse> ForAgentDependency(GetAgentDependencyRequest request, params AgentDependency.LifecycleStateEnum[] targetStates)
        {
            return this.ForAgentDependency(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentDependencyRequest, GetAgentDependencyResponse> ForAgentDependency(GetAgentDependencyRequest request, WaiterConfiguration config, params AgentDependency.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAgentDependencyRequest, GetAgentDependencyResponse>(
                request,
                request => client.GetAgentDependency(request),
                response => targetStates.Contains(response.AgentDependency.LifecycleState.Value),
                targetStates.Contains(AgentDependency.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAgentDependencyRequest, GetAgentDependencyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetEnvironmentRequest, GetEnvironmentResponse> ForEnvironment(GetEnvironmentRequest request, params Environment.LifecycleStateEnum[] targetStates)
        {
            return this.ForEnvironment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetEnvironmentRequest, GetEnvironmentResponse> ForEnvironment(GetEnvironmentRequest request, WaiterConfiguration config, params Environment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetEnvironmentRequest, GetEnvironmentResponse>(
                request,
                request => client.GetEnvironment(request),
                response => targetStates.Contains(response.Environment.LifecycleState.Value),
                targetStates.Contains(Environment.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetEnvironmentRequest, GetEnvironmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluginRequest, GetPluginResponse> ForPlugin(GetPluginRequest request, params Plugin.LifecycleStateEnum[] targetStates)
        {
            return this.ForPlugin(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluginRequest, GetPluginResponse> ForPlugin(GetPluginRequest request, WaiterConfiguration config, params Plugin.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPluginRequest, GetPluginResponse>(
                request,
                request => client.GetPlugin(request),
                response => targetStates.Contains(response.Plugin.LifecycleState.Value),
                targetStates.Contains(Plugin.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetPluginRequest, GetPluginResponse>(config, agent);
        }
    }
}
