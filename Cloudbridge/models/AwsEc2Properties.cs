/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.CloudbridgeService.Models
{
    /// <summary>
    /// AWS virtual machine related properties.
    /// </summary>
    public class AwsEc2Properties 
    {
        
        /// <value>
        /// The architecture of the image.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Architecture is required.")]
        [JsonProperty(PropertyName = "architecture")]
        public string Architecture { get; set; }
        
        /// <value>
        /// The boot mode of the instance.
        /// </value>
        [JsonProperty(PropertyName = "bootMode")]
        public string BootMode { get; set; }
        
        /// <value>
        /// The ID of the Capacity Reservation.
        /// </value>
        [JsonProperty(PropertyName = "capacityReservationKey")]
        public string CapacityReservationKey { get; set; }
        
        /// <value>
        /// Indicates if the elastic inference accelerators attached to an instance
        /// </value>
        [JsonProperty(PropertyName = "areElasticInferenceAcceleratorsPresent")]
        public System.Nullable<bool> AreElasticInferenceAcceleratorsPresent { get; set; }
        
        /// <value>
        /// Indicates whether the instance is enabled for AWS Nitro Enclaves.
        /// </value>
        [JsonProperty(PropertyName = "isEnclaveOptions")]
        public System.Nullable<bool> IsEnclaveOptions { get; set; }
        
        /// <value>
        /// Indicates whether the instance is enabled for hibernation.
        /// </value>
        [JsonProperty(PropertyName = "isHibernationOptions")]
        public System.Nullable<bool> IsHibernationOptions { get; set; }
        
        /// <value>
        /// The ID of the AMI used to launch the instance.
        /// </value>
        [JsonProperty(PropertyName = "imageKey")]
        public string ImageKey { get; set; }
        
        /// <value>
        /// The ID of the instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceKey is required.")]
        [JsonProperty(PropertyName = "instanceKey")]
        public string InstanceKey { get; set; }
        
        /// <value>
        /// Indicates whether this is a Spot Instance or a Scheduled Instance.
        /// </value>
        [JsonProperty(PropertyName = "instanceLifecycle")]
        public string InstanceLifecycle { get; set; }
        
        /// <value>
        /// The instance type.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceType is required.")]
        [JsonProperty(PropertyName = "instanceType")]
        public string InstanceType { get; set; }
        
        /// <value>
        /// The public IPv4 address, or the Carrier IP address assigned to the instance.
        /// </value>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }
        
        /// <value>
        /// The IPv6 address assigned to the instance.
        /// </value>
        [JsonProperty(PropertyName = "ipv6Address")]
        public string Ipv6Address { get; set; }
        
        /// <value>
        /// The kernel associated with this instance, if applicable.
        /// </value>
        [JsonProperty(PropertyName = "kernelKey")]
        public string KernelKey { get; set; }
        
        /// <value>
        /// The time the instance was launched.
        /// </value>
        [JsonProperty(PropertyName = "timeLaunch")]
        public System.Nullable<System.DateTime> TimeLaunch { get; set; }
        
        /// <value>
        /// The license configurations for the instance.
        /// </value>
        [JsonProperty(PropertyName = "licenses")]
        public System.Collections.Generic.List<string> Licenses { get; set; }
        
        /// <value>
        /// Provides information on the recovery and maintenance options of your instance.
        /// </value>
        [JsonProperty(PropertyName = "maintenanceOptions")]
        public string MaintenanceOptions { get; set; }
        
        /// <value>
        /// The monitoring for the instance.
        /// </value>
        [JsonProperty(PropertyName = "monitoring")]
        public string Monitoring { get; set; }
        
        /// <value>
        /// The network interfaces for the instance.
        /// </value>
        [JsonProperty(PropertyName = "networkInterfaces")]
        public System.Collections.Generic.List<InstanceNetworkInterface> NetworkInterfaces { get; set; }
        
        [JsonProperty(PropertyName = "placement")]
        public Placement Placement { get; set; }
        
        /// <value>
        /// (IPv4 only) The private DNS hostname name assigned to the instance.
        /// </value>
        [JsonProperty(PropertyName = "privateDnsName")]
        public string PrivateDnsName { get; set; }
        
        /// <value>
        /// The private IPv4 address assigned to the instance.
        /// </value>
        [JsonProperty(PropertyName = "privateIpAddress")]
        public string PrivateIpAddress { get; set; }
        
        /// <value>
        /// The device name of the root device volume.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RootDeviceName is required.")]
        [JsonProperty(PropertyName = "rootDeviceName")]
        public string RootDeviceName { get; set; }
        
        /// <value>
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        /// </value>
        [JsonProperty(PropertyName = "rootDeviceType")]
        public string RootDeviceType { get; set; }
        
        /// <value>
        /// The security groups for the instance.
        /// </value>
        [JsonProperty(PropertyName = "securityGroups")]
        public System.Collections.Generic.List<GroupIdentifier> SecurityGroups { get; set; }
        
        /// <value>
        /// Indicates whether source/destination checking is enabled.
        /// </value>
        [JsonProperty(PropertyName = "isSourceDestCheck")]
        public System.Nullable<bool> IsSourceDestCheck { get; set; }
        
        /// <value>
        /// If the request is a Spot Instance request, this value will be true.
        /// </value>
        [JsonProperty(PropertyName = "isSpotInstance")]
        public System.Nullable<bool> IsSpotInstance { get; set; }
        
        /// <value>
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        /// </value>
        [JsonProperty(PropertyName = "sriovNetSupport")]
        public string SriovNetSupport { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "State is required.")]
        [JsonProperty(PropertyName = "state")]
        public InstanceState State { get; set; }
        
        /// <value>
        /// EC2-VPC The ID of the subnet in which the instance is running.
        /// </value>
        [JsonProperty(PropertyName = "subnetKey")]
        public string SubnetKey { get; set; }
        
        /// <value>
        /// Any tags assigned to the instance.
        /// </value>
        [JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.List<Tag> Tags { get; set; }
        
        /// <value>
        /// If the instance is configured for NitroTPM support, the value is v2.0.
        /// </value>
        [JsonProperty(PropertyName = "tpmSupport")]
        public string TpmSupport { get; set; }
        
        /// <value>
        /// The virtualization type of the instance.
        /// </value>
        [JsonProperty(PropertyName = "virtualizationType")]
        public string VirtualizationType { get; set; }
        
        /// <value>
        /// EC2-VPC The ID of the VPC in which the instance is running.
        /// </value>
        [JsonProperty(PropertyName = "vpcKey")]
        public string VpcKey { get; set; }
        
    }
}
