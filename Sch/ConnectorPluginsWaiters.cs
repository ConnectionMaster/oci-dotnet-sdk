/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.SchService.Models;
using Oci.SchService.Requests;
using Oci.SchService.Responses;

namespace Oci.SchService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of ConnectorPlugins.
    /// </summary>
    public class ConnectorPluginsWaiters
    {
        private readonly ConnectorPluginsClient client;

        public  ConnectorPluginsWaiters(ConnectorPluginsClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConnectorPluginRequest, GetConnectorPluginResponse> ForConnectorPlugin(GetConnectorPluginRequest request, params ConnectorPluginLifecycleState[] targetStates)
        {
            return this.ForConnectorPlugin(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConnectorPluginRequest, GetConnectorPluginResponse> ForConnectorPlugin(GetConnectorPluginRequest request, WaiterConfiguration config, params ConnectorPluginLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetConnectorPluginRequest, GetConnectorPluginResponse>(
                request,
                request => client.GetConnectorPlugin(request),
                response => targetStates.Contains(response.ConnectorPlugin.LifecycleState.Value),
                targetStates.Contains(ConnectorPluginLifecycleState.Deleted)
            );
            return new Waiter<GetConnectorPluginRequest, GetConnectorPluginResponse>(config, agent);
        }
    }
}
