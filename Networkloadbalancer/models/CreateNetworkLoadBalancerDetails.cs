/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NetworkloadbalancerService.Models
{
    /// <summary>
    /// The properties that define a network load balancer. For more information, see
    /// [Managing a network load balancer](https://docs.cloud.oracle.com/Content/NetworkLoadBalancer/NetworkLoadBalancers/network-load-balancer-management.htm).
    /// <br/>
    /// To use any of the API operations, you must be authorized in an IAM policy. If you are not authorized, then
    /// contact an administrator. If you are an administrator who writes policies to give users access, then see
    /// [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
    /// <br/>
    /// For information about endpoints and signing API requests, see
    /// [About the API](https://docs.cloud.oracle.com/Content/API/Concepts/usingapi.htm). For information about available SDKs and tools, see
    /// [SDKS and Other Tools](https://docs.cloud.oracle.com/Content/API/Concepts/sdks.htm).
    /// 
    /// </summary>
    public class CreateNetworkLoadBalancerDetails 
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment containing the network load balancer.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Network load balancer identifier, which can be renamed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// This parameter can be enabled only if backends are compute OCIDs. When enabled, the skipSourceDestinationCheck parameter is automatically
        /// enabled on the load balancer VNIC, and packets are sent to the backend with the entire IP header intact.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isPreserveSourceDestination")]
        public System.Nullable<bool> IsPreserveSourceDestination { get; set; }
        
        /// <value>
        /// This can only be enabled when NLB is working in transparent mode with source destination header preservation enabled. 
        /// This removes the additional dependency from NLB backends(like Firewalls) to perform SNAT.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSymmetricHashEnabled")]
        public System.Nullable<bool> IsSymmetricHashEnabled { get; set; }
        
        /// <value>
        /// An array of reserved Ips.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "reservedIps")]
        public System.Collections.Generic.List<ReservedIP> ReservedIps { get; set; }
        
        /// <value>
        /// Whether the network load balancer has a virtual cloud network-local (private) IP address.
        /// <br/>
        /// If \"true\", then the service assigns a private IP address to the network load balancer.
        /// <br/>
        /// If \"false\", then the service assigns a public IP address to the network load balancer.
        /// <br/>
        /// A public network load balancer is accessible from the internet, depending on the
        /// [security list rules](https://docs.cloud.oracle.com/Content/network/Concepts/securitylists.htm) for your virtual cloud network. For more information about public and
        /// private network load balancers,
        /// see [How Network Load Balancing Works](https://docs.cloud.oracle.com/Content/NetworkLoadBalancer/overview.htm).
        /// This value is true by default.
        /// <br/>
        /// Example: true
        /// </value>
        [JsonProperty(PropertyName = "isPrivate")]
        public System.Nullable<bool> IsPrivate { get; set; }
        
        /// <value>
        /// The subnet in which the network load balancer is spawned [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SubnetId is required.")]
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }
        
        /// <value>
        /// An array of network security groups [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) associated with the network load
        /// balancer.
        /// <br/>
        /// During the creation of the network load balancer, the service adds the new load balancer to the specified network security groups.
        /// <br/>
        /// The benefits of associating the network load balancer with network security groups include:
        /// <br/>
        /// *  Network security groups define network security rules to govern ingress and egress traffic for the network load balancer.
        /// <br/>
        /// *  The network security rules of other resources can reference the network security groups associated with the network load balancer
        ///    to ensure access.
        /// <br/>
        /// Example: [&quot;ocid1.nsg.oc1.phx.unique_ID&quot;]
        /// </value>
        [JsonProperty(PropertyName = "networkSecurityGroupIds")]
        public System.Collections.Generic.List<string> NetworkSecurityGroupIds { get; set; }
        
        /// <value>
        /// IP version associated with the NLB.
        /// </value>
        [JsonProperty(PropertyName = "nlbIpVersion")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<NlbIpVersion> NlbIpVersion { get; set; }
        
        /// <value>
        /// IPv6 subnet prefix selection. If Ipv6 subnet prefix is passed, Nlb Ipv6 Address would be assign within the cidr block. NLB has to be dual or single stack ipv6 to support this.
        /// </value>
        [JsonProperty(PropertyName = "subnetIpv6Cidr")]
        public string SubnetIpv6Cidr { get; set; }
        
        /// <value>
        /// Private IP address to be assigned to the network load balancer being created.
        /// This IP address has to be in the CIDR range of the subnet where network load balancer is being created
        /// Example: &quot;10.0.0.1&quot;
        /// </value>
        [JsonProperty(PropertyName = "assignedPrivateIpv4")]
        public string AssignedPrivateIpv4 { get; set; }
        
        /// <value>
        /// IPv6 address to be assigned to the network load balancer being created.
        /// This IP address has to be part of one of the prefixes supported by the subnet.
        /// Example: &quot;2607:9b80:9a0a:9a7e:abcd:ef01:2345:6789&quot;
        /// </value>
        [JsonProperty(PropertyName = "assignedIpv6")]
        public string AssignedIpv6 { get; set; }
        
        /// <value>
        /// Listeners associated with the network load balancer.
        /// </value>
        [JsonProperty(PropertyName = "listeners")]
        public System.Collections.Generic.Dictionary<string, ListenerDetails> Listeners { get; set; }
        
        /// <value>
        /// Backend sets associated with the network load balancer.
        /// </value>
        [JsonProperty(PropertyName = "backendSets")]
        public System.Collections.Generic.Dictionary<string, BackendSetDetails> BackendSets { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
