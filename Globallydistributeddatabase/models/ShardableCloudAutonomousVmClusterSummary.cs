/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GloballydistributeddatabaseService.Models
{
    /// <summary>
    /// Shardable cloud autonomous vm cluster summary.
    /// </summary>
    public class ShardableCloudAutonomousVmClusterSummary 
    {
        
        /// <value>
        /// Cloud autonomous vmcluster identifier
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Cloud autonomous vmcluster compartment id
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
                ///
        /// <value>
        /// Lifecycle states for shardable Cloud autonomous vm cluster.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "NEEDS_ATTENTION")]
            NeedsAttention,
            [EnumMember(Value = "INACTIVE")]
            Inactive,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UNAVAILABLE")]
            Unavailable
        };

        /// <value>
        /// Lifecycle states for shardable Cloud autonomous vm cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// Detailed message for the lifecycle state.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleStateDetails")]
        public string LifecycleStateDetails { get; set; }
        
        /// <value>
        /// Cloud autonomous vmcluster displayName
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The compute model of the Cloud Autonomous VM Cluster.
        /// </value>
        [JsonProperty(PropertyName = "computeModel")]
        public string ComputeModel { get; set; }
        
        /// <value>
        /// The number of Autonomous Container Databases that can be created with the currently available local storage.
        /// </value>
        [JsonProperty(PropertyName = "availableContainerDatabases")]
        public System.Nullable<int> AvailableContainerDatabases { get; set; }
        
        /// <value>
        /// CPU cores available for allocation to Autonomous Databases.
        /// </value>
        [JsonProperty(PropertyName = "availableCpus")]
        public System.Nullable<float> AvailableCpus { get; set; }
        
        /// <value>
        /// The name of the availability domain that the cloud Autonomous VM cluster is located in. 
        /// The format of the availability domain is the same as returned by Cloud Autonomous VM Cluster API.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "availabilityDomain")]
        public string AvailabilityDomain { get; set; }
        
        /// <value>
        /// The data disk group size allocated for Autonomous Databases, in TBs.
        /// </value>
        [JsonProperty(PropertyName = "autonomousDataStorageSizeInTBs")]
        public System.Nullable<float> AutonomousDataStorageSizeInTBs { get; set; }
        
        /// <value>
        /// The data disk group size available for Autonomous Databases, in TBs.
        /// </value>
        [JsonProperty(PropertyName = "availableAutonomousDataStorageSizeInTBs")]
        public System.Nullable<float> AvailableAutonomousDataStorageSizeInTBs { get; set; }
        
        /// <value>
        /// Cloud Exadata Infrastructure Identifier.
        /// </value>
        [JsonProperty(PropertyName = "cloudExadataInfrastructureId")]
        public string CloudExadataInfrastructureId { get; set; }
        
        /// <value>
        /// The time zone of the Cloud Autonomous VM Cluster.
        /// </value>
        [JsonProperty(PropertyName = "clusterTimeZone")]
        public string ClusterTimeZone { get; set; }
        
        /// <value>
        /// The total number of Autonomous Container Databases that can be created with the allocated local storage.
        /// </value>
        [JsonProperty(PropertyName = "totalContainerDatabases")]
        public System.Nullable<int> TotalContainerDatabases { get; set; }
        
        /// <value>
        /// Cloud autonomous vmcluster subnet id
        /// </value>
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }
        
        /// <value>
        /// Cloud autonomous vmcluster shape
        /// </value>
        [JsonProperty(PropertyName = "shape")]
        public string Shape { get; set; }
        
        /// <value>
        /// Cloud autonomous vmcluster node count
        /// </value>
        [JsonProperty(PropertyName = "nodeCount")]
        public System.Nullable<int> NodeCount { get; set; }
        
        /// <value>
        /// The Oracle license model that applies to the Oracle Autonomous Database.
        /// </value>
        [JsonProperty(PropertyName = "licenseModel")]
        public string LicenseModel { get; set; }
        
        /// <value>
        /// The memory allocated in GBs.
        /// </value>
        [JsonProperty(PropertyName = "memorySizeInGBs")]
        public System.Nullable<int> MemorySizeInGBs { get; set; }
        
        /// <value>
        /// The amount of memory (in GBs) enabled per OCPU or ECPU.
        /// </value>
        [JsonProperty(PropertyName = "memoryPerOracleComputeUnitInGBs")]
        public System.Nullable<int> MemoryPerOracleComputeUnitInGBs { get; set; }
        
        /// <value>
        /// The number of CPU cores on the cloud Autonomous VM cluster.
        /// </value>
        [JsonProperty(PropertyName = "cpuCoreCount")]
        public System.Nullable<int> CpuCoreCount { get; set; }
        
        /// <value>
        /// The number of CPU cores enabled per VM cluster node.
        /// </value>
        [JsonProperty(PropertyName = "cpuCoreCountPerNode")]
        public System.Nullable<int> CpuCoreCountPerNode { get; set; }
        
        /// <value>
        /// The number of CPU cores on the cloud Autonomous VM cluster.
        /// </value>
        [JsonProperty(PropertyName = "ocpuCount")]
        public System.Nullable<float> OcpuCount { get; set; }
        
        /// <value>
        /// The CPUs that continue to be included in the count of CPUs available to the Autonomous Container Database even after one of its Autonomous Database is terminated or scaled down. You can release them to the available CPUs at its parent Autonomous VM Cluster level by restarting the Autonomous Container Database.
        /// </value>
        [JsonProperty(PropertyName = "reclaimableCpus")]
        public System.Nullable<float> ReclaimableCpus { get; set; }
        
        /// <value>
        /// Number of Autonomous Container Databases that can be created in the Autonomous VM Cluster
        /// </value>
        [JsonProperty(PropertyName = "provisionableAutonomousContainerDatabases")]
        public System.Nullable<int> ProvisionableAutonomousContainerDatabases { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
