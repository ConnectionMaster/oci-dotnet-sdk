/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GloballydistributeddatabaseService.Models
{
    /// <summary>
    /// Summary of ATP-D based sharded database.
    /// </summary>
    public class DedicatedShardedDatabaseSummary : ShardedDatabaseSummary
    {
        
        /// <value>
        /// The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production.
        /// All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for
        /// clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "clusterCertificateCommonName")]
        public string ClusterCertificateCommonName { get; set; }
                ///
        /// <value>
        /// Possible workload types.
        /// </value>
        ///
        public enum DbWorkloadEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "OLTP")]
            Oltp,
            [EnumMember(Value = "DW")]
            Dw
        };

        /// <value>
        /// Possible workload types.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DbWorkload is required.")]
        [JsonProperty(PropertyName = "dbWorkload")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DbWorkloadEnum> DbWorkload { get; set; }
                ///
        /// <value>
        /// Sharding Method.
        /// </value>
        ///
        public enum ShardingMethodEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "USER")]
            User,
            [EnumMember(Value = "SYSTEM")]
            System
        };

        /// <value>
        /// Sharding Method.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShardingMethod is required.")]
        [JsonProperty(PropertyName = "shardingMethod")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ShardingMethodEnum> ShardingMethod { get; set; }
        
        /// <value>
        /// The character set for the sharded database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CharacterSet is required.")]
        [JsonProperty(PropertyName = "characterSet")]
        public string CharacterSet { get; set; }
        
        /// <value>
        /// The national character set for the sharded database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NcharacterSet is required.")]
        [JsonProperty(PropertyName = "ncharacterSet")]
        public string NcharacterSet { get; set; }
        
        /// <value>
        /// The default number of unique chunks in a shardspace. The value of chunks must be
        /// greater than 2 times the size of the largest shardgroup in any shardspace.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "chunks")]
        public System.Nullable<int> Chunks { get; set; }
        
        /// <value>
        /// Oracle Database version of the Autonomous Container Database.
        /// </value>
        [JsonProperty(PropertyName = "dbVersion")]
        public string DbVersion { get; set; }
        
        /// <value>
        /// The listener port number for the sharded database.
        /// </value>
        [JsonProperty(PropertyName = "listenerPort")]
        public System.Nullable<int> ListenerPort { get; set; }
        
        /// <value>
        /// The TLS listener port number for sharded database.
        /// </value>
        [JsonProperty(PropertyName = "listenerPortTls")]
        public System.Nullable<int> ListenerPortTls { get; set; }
        
        /// <value>
        /// Ons local port number.
        /// </value>
        [JsonProperty(PropertyName = "onsPortLocal")]
        public System.Nullable<int> OnsPortLocal { get; set; }
        
        /// <value>
        /// Ons remote port number.
        /// </value>
        [JsonProperty(PropertyName = "onsPortRemote")]
        public System.Nullable<int> OnsPortRemote { get; set; }
        
        /// <value>
        /// Name prefix for the sharded databases.
        /// </value>
        [JsonProperty(PropertyName = "prefix")]
        public string Prefix { get; set; }
        
        /// <value>
        /// Total cpu count usage for shards and catalogs of the sharded database.
        /// </value>
        [JsonProperty(PropertyName = "totalCpuCount")]
        public System.Nullable<int> TotalCpuCount { get; set; }
        
        /// <value>
        /// The aggregarted value of dataStorageSizeInGbs for all shards and catalogs.
        /// </value>
        [JsonProperty(PropertyName = "totalDataStorageSizeInGbs")]
        public System.Double TotalDataStorageSizeInGbs { get; set; }
        
        [JsonProperty(PropertyName = "dbDeploymentType")]
        private readonly string dbDeploymentType = "DEDICATED";
    }
}
