/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GloballydistributeddatabaseService.Models
{
    /// <summary>
    /// Details of ATP-D based catalog.
    /// </summary>
    public class DedicatedCatalogDetails 
    {
        
        [JsonProperty(PropertyName = "encryptionKeyDetails")]
        public DedicatedShardOrCatalogEncryptionKeyDetails EncryptionKeyDetails { get; set; }
        
        /// <value>
        /// Catalog name
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The compute amount available to the underlying autonomous database associated with shard or catalog.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ComputeCount is required.")]
        [JsonProperty(PropertyName = "computeCount")]
        public System.Nullable<float> ComputeCount { get; set; }
        
        /// <value>
        /// The data disk group size to be allocated in GBs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DataStorageSizeInGbs is required.")]
        [JsonProperty(PropertyName = "dataStorageSizeInGbs")]
        public System.Double DataStorageSizeInGbs { get; set; }
        
        /// <value>
        /// Name of the shard-group to which the catalog belongs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShardGroup is required.")]
        [JsonProperty(PropertyName = "shardGroup")]
        public string ShardGroup { get; set; }
        
        /// <value>
        /// The time the catalog was created. An RFC3339 formatted datetime string
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The time the catalog was last created. An RFC3339 formatted datetime string
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeUpdated is required.")]
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The time the ssl certificate associated with catalog expires. An RFC3339 formatted datetime string
        /// </value>
        [JsonProperty(PropertyName = "timeSslCertificateExpires")]
        public System.Nullable<System.DateTime> TimeSslCertificateExpires { get; set; }
                ///
        /// <value>
        /// Status of shard or catalog or gsm for the sharded database.
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "CREATED")]
            Created,
            [EnumMember(Value = "READY_FOR_CONFIGURATION")]
            ReadyForConfiguration,
            [EnumMember(Value = "CONFIGURED")]
            Configured,
            [EnumMember(Value = "NEEDS_ATTENTION")]
            NeedsAttention
        };

        /// <value>
        /// Status of shard or catalog or gsm for the sharded database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// Identifier of the underlying supporting resource.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "supportingResourceId")]
        public string SupportingResourceId { get; set; }
        
        /// <value>
        /// Identifier of the underlying container database.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "containerDatabaseId")]
        public string ContainerDatabaseId { get; set; }
        
        /// <value>
        /// Identifier of the underlying container database parent.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "containerDatabaseParentId")]
        public string ContainerDatabaseParentId { get; set; }
        
        /// <value>
        /// Determines the auto-scaling mode.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsAutoScalingEnabled is required.")]
        [JsonProperty(PropertyName = "isAutoScalingEnabled")]
        public System.Nullable<bool> IsAutoScalingEnabled { get; set; }
        
        /// <value>
        /// Identifier of the primary cloudAutonomousVmCluster for the catalog.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CloudAutonomousVmClusterId is required.")]
        [JsonProperty(PropertyName = "cloudAutonomousVmClusterId")]
        public string CloudAutonomousVmClusterId { get; set; }
        
        /// <value>
        /// Identifier of the peer cloudAutonomousVmCluster for the catalog.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "peerCloudAutonomousVmClusterId")]
        public string PeerCloudAutonomousVmClusterId { get; set; }
        
        /// <value>
        /// Additional metadata related to catalog's underlying supporting resource.
        /// </value>
        [JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.Dictionary<string, System.Object> Metadata { get; set; }
        
    }
}
