/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.IotService.Models;
using Oci.IotService.Requests;
using Oci.IotService.Responses;

namespace Oci.IotService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Iot.
    /// </summary>
    public class IotWaiters
    {
        private readonly IotClient client;

        public  IotWaiters(IotClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinAdapterRequest, GetDigitalTwinAdapterResponse> ForDigitalTwinAdapter(GetDigitalTwinAdapterRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDigitalTwinAdapter(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinAdapterRequest, GetDigitalTwinAdapterResponse> ForDigitalTwinAdapter(GetDigitalTwinAdapterRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDigitalTwinAdapterRequest, GetDigitalTwinAdapterResponse>(
                request,
                request => client.GetDigitalTwinAdapter(request),
                response => targetStates.Contains(response.DigitalTwinAdapter.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDigitalTwinAdapterRequest, GetDigitalTwinAdapterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinInstanceRequest, GetDigitalTwinInstanceResponse> ForDigitalTwinInstance(GetDigitalTwinInstanceRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDigitalTwinInstance(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinInstanceRequest, GetDigitalTwinInstanceResponse> ForDigitalTwinInstance(GetDigitalTwinInstanceRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDigitalTwinInstanceRequest, GetDigitalTwinInstanceResponse>(
                request,
                request => client.GetDigitalTwinInstance(request),
                response => targetStates.Contains(response.DigitalTwinInstance.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDigitalTwinInstanceRequest, GetDigitalTwinInstanceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinModelRequest, GetDigitalTwinModelResponse> ForDigitalTwinModel(GetDigitalTwinModelRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDigitalTwinModel(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinModelRequest, GetDigitalTwinModelResponse> ForDigitalTwinModel(GetDigitalTwinModelRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDigitalTwinModelRequest, GetDigitalTwinModelResponse>(
                request,
                request => client.GetDigitalTwinModel(request),
                response => targetStates.Contains(response.DigitalTwinModel.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDigitalTwinModelRequest, GetDigitalTwinModelResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinRelationshipRequest, GetDigitalTwinRelationshipResponse> ForDigitalTwinRelationship(GetDigitalTwinRelationshipRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDigitalTwinRelationship(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDigitalTwinRelationshipRequest, GetDigitalTwinRelationshipResponse> ForDigitalTwinRelationship(GetDigitalTwinRelationshipRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDigitalTwinRelationshipRequest, GetDigitalTwinRelationshipResponse>(
                request,
                request => client.GetDigitalTwinRelationship(request),
                response => targetStates.Contains(response.DigitalTwinRelationship.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDigitalTwinRelationshipRequest, GetDigitalTwinRelationshipResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIotDomainRequest, GetIotDomainResponse> ForIotDomain(GetIotDomainRequest request, params IotDomain.LifecycleStateEnum[] targetStates)
        {
            return this.ForIotDomain(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIotDomainRequest, GetIotDomainResponse> ForIotDomain(GetIotDomainRequest request, WaiterConfiguration config, params IotDomain.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIotDomainRequest, GetIotDomainResponse>(
                request,
                request => client.GetIotDomain(request),
                response => targetStates.Contains(response.IotDomain.LifecycleState.Value),
                targetStates.Contains(IotDomain.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetIotDomainRequest, GetIotDomainResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIotDomainGroupRequest, GetIotDomainGroupResponse> ForIotDomainGroup(GetIotDomainGroupRequest request, params IotDomainGroup.LifecycleStateEnum[] targetStates)
        {
            return this.ForIotDomainGroup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIotDomainGroupRequest, GetIotDomainGroupResponse> ForIotDomainGroup(GetIotDomainGroupRequest request, WaiterConfiguration config, params IotDomainGroup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIotDomainGroupRequest, GetIotDomainGroupResponse>(
                request,
                request => client.GetIotDomainGroup(request),
                response => targetStates.Contains(response.IotDomainGroup.LifecycleState.Value),
                targetStates.Contains(IotDomainGroup.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetIotDomainGroupRequest, GetIotDomainGroupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
