/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IotService.Models
{
    /// <summary>
    /// Defines how inbound device payloads should be routed and mapped within a digital twin context.
    /// Routes are evaluated in the order they are defined, and only the first matching
    /// condition is processed. A final default route (with
    /// a condition that always evaluates to true) is recommended for fallback handling.
    /// 
    /// </summary>
    public class DigitalTwinAdapterInboundRoute 
    {
        
        /// <value>
        /// A boolean expression used to determine whether the following transformation
        /// should be processed for the incoming payload. This expression is typically based
        /// on fields defined at the inbound Envelope and is evaluated before applying the `payloadMapping`.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Condition is required.")]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        
        [JsonProperty(PropertyName = "referencePayload")]
        public DigitalTwinAdapterPayload ReferencePayload { get; set; }
        
        /// <value>
        /// A set of key-value JQ expressions used to transform the incoming payload into a shape
        /// compatible with the digital twin model's context or schema.
        /// <br/>
        /// The keys are target fields (in the digital twin model), and values are JQ expressions
        /// pointing to data in the reference payload.
        /// <br/>
        /// Example: Given payload:{  &quot;time&quot;: &quot;<timestamp>&quot;,  &quot;temp&quot;: 65,  &quot;hum&quot;: 55}And mapping:{  &quot;temperature&quot;: &quot;$.temp&quot;,  &quot;humidity&quot;: &quot;$.hum&quot;,  &quot;timeObserved&quot;: &quot;$.time&quot;}The output will be:{  &quot;temperature&quot;: 65,  &quot;humidity&quot;: 55,  &quot;timeObserved&quot;: &quot;<timestamp>&quot;}
        /// </value>
        [JsonProperty(PropertyName = "payloadMapping")]
        public System.Collections.Generic.Dictionary<string, string> PayloadMapping { get; set; }
        
        /// <value>
        /// Meaningful write up about the inbound route.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
    }
}
