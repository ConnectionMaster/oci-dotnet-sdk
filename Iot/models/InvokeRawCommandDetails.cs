/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.IotService.Models
{
    /// <summary>
    /// Definition of unstructured command invocation payload
    /// </summary>
    [JsonConverter(typeof(InvokeRawCommandDetailsModelConverter))]
    public class InvokeRawCommandDetails 
    {
        
        /// <value>
        /// Specified duration by which to send the request by.
        /// </value>
        [JsonProperty(PropertyName = "requestDuration")]
        public string RequestDuration { get; set; }
        
        /// <value>
        /// Specified duration by which to receive the response by.
        /// </value>
        [JsonProperty(PropertyName = "responseDuration")]
        public string ResponseDuration { get; set; }
        
        /// <value>
        /// Device endpoint where request should be forwarded to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RequestEndpoint is required.")]
        [JsonProperty(PropertyName = "requestEndpoint")]
        public string RequestEndpoint { get; set; }
        
        /// <value>
        /// Device endpoint from which response is expected to come.
        /// </value>
        [JsonProperty(PropertyName = "responseEndpoint")]
        public string ResponseEndpoint { get; set; }
                ///
        /// <value>
        /// data format: json, binary, text
        /// </value>
        ///
        public enum RequestDataFormatEnum {
            [EnumMember(Value = "TEXT")]
            Text,
            [EnumMember(Value = "JSON")]
            Json,
            [EnumMember(Value = "BINARY")]
            Binary
        };

        
    }

    public class InvokeRawCommandDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(InvokeRawCommandDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(InvokeRawCommandDetails);
            var discriminator = jsonObject["requestDataFormat"].Value<string>();
            switch (discriminator)
            {
                case "BINARY":
                    obj = new InvokeRawBinaryCommandDetails();
                    break;
                case "TEXT":
                    obj = new InvokeRawTextCommandDetails();
                    break;
                case "JSON":
                    obj = new InvokeRawJsonCommandDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
