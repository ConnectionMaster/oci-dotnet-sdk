/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.GenerativeaiagentruntimeService.Models
{
    /// <summary>
    /// The trace that displays the internal progression, such as reasoning and actions during an execution.
    /// 
    /// </summary>
    [JsonConverter(typeof(TraceModelConverter))]
    public class Trace 
    {
        
        /// <value>
        /// Unique identifier for the event (UUID).
        /// </value>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }
        
        /// <value>
        /// Identifier of the parent event, if applicable (UUID).
        /// </value>
        [JsonProperty(PropertyName = "parentKey")]
        public string ParentKey { get; set; }
        
        [JsonProperty(PropertyName = "source")]
        public SourceDetails Source { get; set; }
        
        /// <value>
        /// The date and time that the trace was created in the format of an RFC3339 datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// Timestamp for when the event ended (In RFC 3339).
        /// </value>
        [JsonProperty(PropertyName = "timeFinished")]
        public System.Nullable<System.DateTime> TimeFinished { get; set; }
                ///
        /// <value>
        /// The type of the trace.
        /// </value>
        ///
        public enum TraceTypeEnum {
            [EnumMember(Value = "ERROR_TRACE")]
            ErrorTrace,
            [EnumMember(Value = "RETRIEVAL_TRACE")]
            RetrievalTrace,
            [EnumMember(Value = "GENERATION_TRACE")]
            GenerationTrace,
            [EnumMember(Value = "TOOL_INVOCATION_TRACE")]
            ToolInvocationTrace,
            [EnumMember(Value = "PLANNING_TRACE")]
            PlanningTrace,
            [EnumMember(Value = "EXECUTION_TRACE")]
            ExecutionTrace
        };

        
    }

    public class TraceModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(Trace);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(Trace);
            var discriminator = jsonObject["traceType"].Value<string>();
            switch (discriminator)
            {
                case "ERROR_TRACE":
                    obj = new ErrorTrace();
                    break;
                case "RETRIEVAL_TRACE":
                    obj = new RetrievalTrace();
                    break;
                case "EXECUTION_TRACE":
                    obj = new ExecutionTrace();
                    break;
                case "GENERATION_TRACE":
                    obj = new GenerationTrace();
                    break;
                case "TOOL_INVOCATION_TRACE":
                    obj = new ToolInvocationTrace();
                    break;
                case "PLANNING_TRACE":
                    obj = new PlanningTrace();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under Trace! Returning null value.");
            }
            return obj;
        }
    }
}
