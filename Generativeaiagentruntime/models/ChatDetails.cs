/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiagentruntimeService.Models
{
    /// <summary>
    /// Chat details for managing user interactions and tool executions.
    /// 
    /// </summary>
    public class ChatDetails 
    {
        
        /// <value>
        /// The input user message content for the chat.
        /// </value>
        [JsonProperty(PropertyName = "userMessage")]
        public string UserMessage { get; set; }
        
        /// <value>
        /// Whether to stream the response.
        /// </value>
        [JsonProperty(PropertyName = "shouldStream")]
        public System.Nullable<bool> ShouldStream { get; set; }
        
        /// <value>
        /// Optional sessionId. If not provided, will chat without any prior context.
        /// </value>
        [JsonProperty(PropertyName = "sessionId")]
        public string SessionId { get; set; }
        
        /// <value>
        /// A map where each key is a toolId and the value contains tool type and additional dynamic parameters. This field is deprecated and will be removed after July 02 2026.
        /// </value>
        [JsonProperty(PropertyName = "toolParameters")]
        public System.Collections.Generic.Dictionary<string, string> ToolParameters { get; set; }
        
        /// <value>
        /// Array of tool input objects, each specifying a tool's ID, type, and corresponding input parameters required for execution.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "toolInputs")]
        public System.Collections.Generic.List<ToolInput> ToolInputs { get; set; }
        
        /// <value>
        /// A list of actions that have been performed based on prior required actions.
        /// </value>
        [JsonProperty(PropertyName = "performedActions")]
        public System.Collections.Generic.List<PerformedAction> PerformedActions { get; set; }
        
    }
}
