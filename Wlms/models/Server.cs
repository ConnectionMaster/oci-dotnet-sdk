/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.WlmsService.Models
{
    /// <summary>
    /// The server object that is returned by the API to get a specific server in a WebLogic domain.
    /// 
    /// </summary>
    public class Server 
    {
        
        /// <value>
        /// The unique identifier of the server.
        /// <br/>
        /// **Note:** Not an [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The name of the server.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Whether or not the server is an admin node.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsAdmin is required.")]
        [JsonProperty(PropertyName = "isAdmin")]
        public System.Nullable<bool> IsAdmin { get; set; }
        
        /// <value>
        /// The status of the server.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }
        
        /// <value>
        /// The restart order assigned to the server.
        /// </value>
        [JsonProperty(PropertyName = "restartOrder")]
        public System.Nullable<int> RestartOrder { get; set; }
        
        /// <value>
        /// The middleware path on the server.
        /// </value>
        [JsonProperty(PropertyName = "middlewarePath")]
        public string MiddlewarePath { get; set; }
        
        /// <value>
        /// The middleware type on the server.
        /// </value>
        [JsonProperty(PropertyName = "middlewareType")]
        public string MiddlewareType { get; set; }
        
        /// <value>
        /// The version of the WebLogic domain of the server
        /// </value>
        [JsonProperty(PropertyName = "weblogicVersion")]
        public string WeblogicVersion { get; set; }
        
        /// <value>
        /// The JDK path on the server.
        /// </value>
        [JsonProperty(PropertyName = "jdkPath")]
        public string JdkPath { get; set; }
        
        /// <value>
        /// The JDK version on the server.
        /// </value>
        [JsonProperty(PropertyName = "jdkVersion")]
        public string JdkVersion { get; set; }
        
        /// <value>
        /// The name of the WebLogic domain to which the server belongs.
        /// </value>
        [JsonProperty(PropertyName = "wlsDomainName")]
        public string WlsDomainName { get; set; }
        
        /// <value>
        /// The ID of the WebLogic domain to which the server belongs.
        /// </value>
        [JsonProperty(PropertyName = "wlsDomainId")]
        public string WlsDomainId { get; set; }
        
        /// <value>
        /// The path of the WebLogic domain to which the server belongs.
        /// </value>
        [JsonProperty(PropertyName = "wlsDomainPath")]
        public string WlsDomainPath { get; set; }
                ///
        /// <value>
        /// Whether or not the server has installed the latest patches.
        /// </value>
        ///
        public enum LatestPatchesStatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ON_LATEST_PATCHES")]
            OnLatestPatches,
            [EnumMember(Value = "PATCHING_REQUIRED")]
            PatchingRequired,
            [EnumMember(Value = "UNKNOWN")]
            Unknown
        };

        /// <value>
        /// Whether or not the server has installed the latest patches.
        /// </value>
        [JsonProperty(PropertyName = "latestPatchesStatus")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LatestPatchesStatusEnum> LatestPatchesStatus { get; set; }
        
        /// <value>
        /// The patch readiness status of the server.
        /// </value>
        [JsonProperty(PropertyName = "patchReadinessStatus")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<PatchReadinessStatus> PatchReadinessStatus { get; set; }
        
        /// <value>
        /// The name of the server.
        /// </value>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }
        
        /// <value>
        /// The managed instance ID of the server.
        /// </value>
        [JsonProperty(PropertyName = "managedInstanceId")]
        public string ManagedInstanceId { get; set; }
        
        /// <value>
        /// The date and time the server was first reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time the server was last reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
    }
}
