/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.LoadbalancerService.Models
{
    /// <summary>
    /// An object that represents an action to apply to a listener.
    /// </summary>
    [JsonConverter(typeof(RuleModelConverter))]
    public class Rule 
    {
                ///
        ///
        public enum ActionEnum {
            [EnumMember(Value = "ADD_HTTP_REQUEST_HEADER")]
            AddHttpRequestHeader,
            [EnumMember(Value = "EXTEND_HTTP_REQUEST_HEADER_VALUE")]
            ExtendHttpRequestHeaderValue,
            [EnumMember(Value = "REMOVE_HTTP_REQUEST_HEADER")]
            RemoveHttpRequestHeader,
            [EnumMember(Value = "ADD_HTTP_RESPONSE_HEADER")]
            AddHttpResponseHeader,
            [EnumMember(Value = "EXTEND_HTTP_RESPONSE_HEADER_VALUE")]
            ExtendHttpResponseHeaderValue,
            [EnumMember(Value = "REMOVE_HTTP_RESPONSE_HEADER")]
            RemoveHttpResponseHeader,
            [EnumMember(Value = "ALLOW")]
            Allow,
            [EnumMember(Value = "CONTROL_ACCESS_USING_HTTP_METHODS")]
            ControlAccessUsingHttpMethods,
            [EnumMember(Value = "REDIRECT")]
            Redirect,
            [EnumMember(Value = "HTTP_HEADER")]
            HttpHeader
        };

        
    }

    public class RuleModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(Rule);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(Rule);
            var discriminator = jsonObject["action"].Value<string>();
            switch (discriminator)
            {
                case "ADD_HTTP_REQUEST_HEADER":
                    obj = new AddHttpRequestHeaderRule();
                    break;
                case "REDIRECT":
                    obj = new RedirectRule();
                    break;
                case "REMOVE_HTTP_REQUEST_HEADER":
                    obj = new RemoveHttpRequestHeaderRule();
                    break;
                case "EXTEND_HTTP_REQUEST_HEADER_VALUE":
                    obj = new ExtendHttpRequestHeaderValueRule();
                    break;
                case "REMOVE_HTTP_RESPONSE_HEADER":
                    obj = new RemoveHttpResponseHeaderRule();
                    break;
                case "CONTROL_ACCESS_USING_HTTP_METHODS":
                    obj = new ControlAccessUsingHttpMethodsRule();
                    break;
                case "ALLOW":
                    obj = new AllowRule();
                    break;
                case "HTTP_HEADER":
                    obj = new HttpHeaderRule();
                    break;
                case "ADD_HTTP_RESPONSE_HEADER":
                    obj = new AddHttpResponseHeaderRule();
                    break;
                case "EXTEND_HTTP_RESPONSE_HEADER_VALUE":
                    obj = new ExtendHttpResponseHeaderValueRule();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
