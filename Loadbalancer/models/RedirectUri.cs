/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoadbalancerService.Models
{
    /// <summary>
    /// An object that defines the redirect URI applied to the original request. The object property values compose the
    /// redirect URI.
    /// <br/>
    /// **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide
    /// meaningful, complete, and correct field values. If any component field of this object has no value, the system
    /// retains the value from the incoming HTTP request URI.
    /// <br/>
    /// For example, if you specify only the protocol field `https`, and the incoming request URI is
    /// `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains
    /// the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
    /// <br/>
    /// Be sure to configure valid percent-encoding (URL encoding) when needed.
    /// <br/>
    /// In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens
    /// extract values from the incoming HTTP request URI.
    /// <br/>
    /// *  {protocol} : The protocol from the incoming HTTP request URI.
    /// *  {host}     : The domain name from the incoming HTTP request URI.
    /// *  {port}     : The port from the incoming HTTP request URI.
    /// *  {path}     : The path from the incoming HTTP request URI.
    /// *  {query}    : The query string from the incoming HTTP request URI.
    /// <br/>
    /// The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
    /// <br/>
    /// You can retain the literal characters of a token when you specify values for the path and query properties of the
    /// redirect URI. Use a backslash (\\\\) as the escape character for the \\\\, {, and } characters. For example, if the
    /// incoming HTTP request URI is `/video`, the path property value:
    /// <br/>
    /// `/example{path}123\\{path\\}`
    /// <br/>
    /// appears in the constructed redirect URI as:
    /// <br/>
    /// `/example/video123{path}`
    /// 
    /// </summary>
    public class RedirectUri 
    {
        
        /// <value>
        /// The HTTP protocol to use in the redirect URI.
        /// <br/>
        /// When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the
        /// incoming HTTP request URI. Allowed values are:
        /// <br/>
        /// *  HTTP
        /// *  HTTPS
        /// *  {protocol}
        /// <br/>
        /// `{protocol}` is the only valid token for this property. It can appear only once in the value string.
        /// <br/>
        /// Example: HTTPS
        /// </value>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }
        
        /// <value>
        /// The valid domain name (hostname) or IP address to use in the redirect URI.
        /// <br/>
        /// When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the
        /// incoming HTTP request URI.
        /// <br/>
        /// All RedirectUri tokens are valid for this property. You can use any token more than once.
        /// <br/>
        /// Curly braces are valid in this property only to surround tokens, such as `{host}`
        /// <br/>
        /// Examples:
        /// <br/>
        /// *  **example.com** appears as `example.com` in the redirect URI.
        /// <br/>
        /// *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the
        ///    incoming HTTP request URI.
        /// <br/>
        /// *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and
        ///    the port is `8081` in the incoming HTTP request URI.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "host")]
        public string Host { get; set; }
        
        /// <value>
        /// The communication port to use in the redirect URI.
        /// <br/>
        /// Valid values include integers from 1 to 65535.
        /// <br/>
        /// When this value is null, the service preserves the original port from the incoming HTTP request URI.
        /// <br/>
        /// Example: 8081
        /// </value>
        [JsonProperty(PropertyName = "port")]
        public System.Nullable<int> Port { get; set; }
        
        /// <value>
        /// The HTTP URI path to use in the redirect URI.
        /// <br/>
        /// When this value is null, not set, or set to `{path}`, the service preserves the original path from the
        /// incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, \"\".
        /// <br/>
        /// All RedirectUri tokens are valid for this property. You can use any token more than once.
        /// <br/>
        /// The path string must begin with `/` if it does not begin with the `{path}` token.
        /// <br/>
        /// Examples:
        /// <br/>
        /// *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
        /// <br/>
        /// *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the
        ///    incoming HTTP request URI.
        /// <br/>
        /// *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the
        ///    incoming HTTP request URI.
        /// <br/>
        /// *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the
        ///    incoming HTTP request URI.
        /// <br/>
        /// *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname
        ///    in the incoming HTTP request URI.
        /// <br/>
        /// *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and
        ///    `123` is the port in the incoming HTTP request URI.
        /// <br/>
        /// *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP
        ///    request URI.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }
        
        /// <value>
        /// The query string to use in the redirect URI.
        /// <br/>
        /// When this value is null, not set, or set to `{query}`, the service preserves the original query parameters
        /// from the incoming HTTP request URI.
        /// <br/>
        /// All `RedirectUri` tokens are valid for this property. You can use any token more than once.
        /// <br/>
        /// If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
        /// <br/>
        /// You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand
        /// (&) character. To omit all incoming query parameters from the redirect URI, set this value to an empty
        /// string, \"\".
        /// <br/>
        /// If the specified query string results in a redirect URI ending with `?` or `&`, the last character is truncated.
        /// For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is
        /// `?lang=en&{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system
        /// truncates the final ampersand (&) because the incoming URI included no value to replace the {query} token.
        /// <br/>
        /// Examples:
        /// * **lang=en&time_zone=PST** appears as `lang=en&time_zone=PST` in the redirect URI.
        /// <br/>
        /// * **{query}** appears as `lang=en&time_zone=PST` in the redirect URI if `lang=en&time_zone=PST` is the query
        ///   string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}`
        ///   token renders as an empty string.
        /// <br/>
        /// * **lang=en&{query}&time_zone=PST** appears as `lang=en&country=us&time_zone=PST` in the redirect URI if
        ///   `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query
        ///   parameters, this value renders as `lang=en&time_zone=PST`.
        /// <br/>
        /// *  **protocol={protocol}&hostname={host}** appears as `protocol=http&hostname=example.com` in the redirect
        ///    URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
        /// <br/>
        /// *  **port={port}&hostname={host}** appears as `port=8080&hostname=example.com` in the redirect URI if the
        ///    port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }
        
    }
}
