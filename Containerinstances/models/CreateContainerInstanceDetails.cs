/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ContainerinstancesService.Models
{
    /// <summary>
    /// Information to create a container instance.
    /// </summary>
    public class CreateContainerInstanceDetails 
    {
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The compartment OCID.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The availability domain where the container instance runs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvailabilityDomain is required.")]
        [JsonProperty(PropertyName = "availabilityDomain")]
        public string AvailabilityDomain { get; set; }
        
        /// <value>
        /// The fault domain where the container instance runs.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "faultDomain")]
        public string FaultDomain { get; set; }
        
        /// <value>
        /// The shape of the container instance. The shape determines the resources available to the container instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Shape is required.")]
        [JsonProperty(PropertyName = "shape")]
        public string Shape { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShapeConfig is required.")]
        [JsonProperty(PropertyName = "shapeConfig")]
        public CreateContainerInstanceShapeConfigDetails ShapeConfig { get; set; }
        
        /// <value>
        /// A volume is a directory with data that is accessible across multiple containers in a
        /// container instance.
        /// <br/>
        /// You can attach up to 32 volumes to single container instance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "volumes")]
        public System.Collections.Generic.List<CreateContainerVolumeDetails> Volumes { get; set; }
        
        /// <value>
        /// The containers to create on this container instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Containers is required.")]
        [JsonProperty(PropertyName = "containers")]
        public System.Collections.Generic.List<CreateContainerDetails> Containers { get; set; }
        
        /// <value>
        /// The networks available to containers on this container instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Vnics is required.")]
        [JsonProperty(PropertyName = "vnics")]
        public System.Collections.Generic.List<CreateContainerVnicDetails> Vnics { get; set; }
        
        [JsonProperty(PropertyName = "dnsConfig")]
        public CreateContainerDnsConfigDetails DnsConfig { get; set; }
        
        /// <value>
        /// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        /// </value>
        [JsonProperty(PropertyName = "gracefulShutdownTimeoutInSeconds")]
        public System.Nullable<long> GracefulShutdownTimeoutInSeconds { get; set; }
        
        /// <value>
        /// The image pulls secrets so you can access private registry to pull container images.
        /// </value>
        [JsonProperty(PropertyName = "imagePullSecrets")]
        public System.Collections.Generic.List<CreateImagePullSecretDetails> ImagePullSecrets { get; set; }
        
        /// <value>
        /// Container restart policy
        /// </value>
        [JsonProperty(PropertyName = "containerRestartPolicy")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ContainerInstance.ContainerRestartPolicyEnum> ContainerRestartPolicy { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}.
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
