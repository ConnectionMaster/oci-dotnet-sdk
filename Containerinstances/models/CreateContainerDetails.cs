/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ContainerinstancesService.Models
{
    /// <summary>
    /// Information to create a new container within a container instance.
    /// <br/>
    /// The container created by this call contains both the tags specified
    /// in this object and any tags specified in the parent container instance.
    /// <br/>
    /// The container is created in the same compartment, availability domain,
    /// and fault domain as its container instance.
    /// 
    /// </summary>
    public class CreateContainerDetails 
    {
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// If you don't provide a name, a name is generated automatically.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
        /// <br/>
        /// If no registry is provided, will default the registry to public docker hub `docker.io/library`.
        /// <br/>
        /// The registry used for container image must be reachable over the Container Instance's VNIC.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ImageUrl is required.")]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        
        /// <value>
        /// An optional command that overrides the ENTRYPOINT process.
        /// If you do not provide a value, the existing ENTRYPOINT process defined in the image is used.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "command")]
        public System.Collections.Generic.List<string> Command { get; set; }
        
        /// <value>
        /// A list of string arguments for a container's ENTRYPOINT process.
        /// <br/>
        /// Many containers use an ENTRYPOINT process pointing to a shell
        /// (/bin/bash). For those containers, this argument list
        /// specifies the main command in the container process.
        /// <br/>
        /// The total size of all arguments combined must be 64 KB or smaller.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "arguments")]
        public System.Collections.Generic.List<string> Arguments { get; set; }
        
        /// <value>
        /// The working directory within the container's filesystem for
        /// the container process. If not specified, the default
        /// working directory from the image is used.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "workingDirectory")]
        public string WorkingDirectory { get; set; }
        
        /// <value>
        /// A map of additional environment variables to set in the environment of the container's
        /// ENTRYPOINT process. These variables are in addition to any variables already defined
        /// in the container's image.
        /// <br/>
        /// The total size of all environment variables combined, name and values, must be 64 KB or smaller.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "environmentVariables")]
        public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
        
        /// <value>
        /// List of the volume mounts.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "volumeMounts")]
        public System.Collections.Generic.List<CreateVolumeMountDetails> VolumeMounts { get; set; }
        
        /// <value>
        /// Determines if the container will have access to the container instance resource principal.
        /// <br/>
        /// This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see
        /// https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isResourcePrincipalDisabled")]
        public System.Nullable<bool> IsResourcePrincipalDisabled { get; set; }
        
        [JsonProperty(PropertyName = "resourceConfig")]
        public CreateContainerResourceConfigDetails ResourceConfig { get; set; }
        
        /// <value>
        /// list of container health checks to check container status and take appropriate action if container status is failed.
        /// There are three types of health checks that we currently support HTTP, TCP, and Command.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "healthChecks")]
        public System.Collections.Generic.List<CreateContainerHealthCheckDetails> HealthChecks { get; set; }
        
        [JsonProperty(PropertyName = "securityContext")]
        public CreateSecurityContextDetails SecurityContext { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}.
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
