/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatascienceService.Models
{
    /// <summary>
    /// The interval schedule trigger.
    /// </summary>
    public class ScheduleIntervalTrigger : ScheduleTrigger
    {
                ///
        /// <value>
        /// The type of frequency
        /// </value>
        ///
        public enum FrequencyEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "HOURLY")]
            Hourly,
            [EnumMember(Value = "DAILY")]
            Daily
        };

        /// <value>
        /// The type of frequency
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Frequency is required.")]
        [JsonProperty(PropertyName = "frequency")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<FrequencyEnum> Frequency { get; set; }
        
        /// <value>
        /// The interval of frequency.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Interval is required.")]
        [JsonProperty(PropertyName = "interval")]
        public System.Nullable<int> Interval { get; set; }
        
        /// <value>
        /// when true and timeStart is null, system generate a random start time between now and now + interval; 
        /// isRandomStartTime can be true if timeStart is null.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isRandomStartTime")]
        public System.Nullable<bool> IsRandomStartTime { get; set; }
        
        [JsonProperty(PropertyName = "triggerType")]
        private readonly string triggerType = "INTERVAL";
    }
}
