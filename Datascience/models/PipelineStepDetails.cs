/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DatascienceService.Models
{
    /// <summary>
    /// A step in the pipeline.
    /// </summary>
    [JsonConverter(typeof(PipelineStepDetailsModelConverter))]
    public class PipelineStepDetails 
    {
                ///
        /// <value>
        /// The type of step.
        /// </value>
        ///
        public enum StepTypeEnum {
            [EnumMember(Value = "ML_JOB")]
            MlJob,
            [EnumMember(Value = "CUSTOM_SCRIPT")]
            CustomScript,
            [EnumMember(Value = "CONTAINER")]
            Container,
            [EnumMember(Value = "DATAFLOW")]
            Dataflow
        };

        
        /// <value>
        /// The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "StepName is required.")]
        [JsonProperty(PropertyName = "stepName")]
        public string StepName { get; set; }
        
        /// <value>
        /// A short description of the step.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The list of step names this current step depends on for execution.
        /// </value>
        [JsonProperty(PropertyName = "dependsOn")]
        public System.Collections.Generic.List<string> DependsOn { get; set; }
        
        [JsonProperty(PropertyName = "stepConfigurationDetails")]
        public PipelineStepConfigurationDetails StepConfigurationDetails { get; set; }
        
    }

    public class PipelineStepDetailsModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(PipelineStepDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(PipelineStepDetails);
            var discriminator = jsonObject["stepType"].Value<string>();
            switch (discriminator)
            {
                case "CONTAINER":
                    obj = new PipelineContainerStepDetails();
                    break;
                case "ML_JOB":
                    obj = new PipelineMLJobStepDetails();
                    break;
                case "DATAFLOW":
                    obj = new PipelineDataflowStepDetails();
                    break;
                case "CUSTOM_SCRIPT":
                    obj = new PipelineCustomScriptStepDetails();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under PipelineStepDetails! Returning null value.");
            }
            return obj;
        }
    }
}
