/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatascienceService.Models
{
    /// <summary>
    /// Defines properties of each model metadata.
    /// </summary>
    public class Metadata 
    {
        
        /// <value>
        /// Key of the model Metadata. The key can either be user defined or OCI defined.
        ///    List of OCI defined keys:
        ///          * useCaseType
        ///          * libraryName
        ///          * libraryVersion
        ///          * estimatorClass
        ///          * hyperParameters
        ///          * testartifactresults
        /// 
        /// </value>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }
        
        /// <value>
        /// Allowed values for useCaseType:
        ///              binary_classification, regression, multinomial_classification, clustering, recommender,
        ///              dimensionality_reduction/representation, time_series_forecasting, anomaly_detection,
        ///              topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        /// <br/>
        /// Allowed values for libraryName:
        ///              scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy,
        ///              prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan,
        ///              bert, gensim, flair, word2vec, ensemble, other
        /// 
        /// </value>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        
        /// <value>
        /// Description of model metadata
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values \"Performance,Training Profile,Training and Validation Datasets,Training Environment,other\".
        /// </value>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        
    }
}
