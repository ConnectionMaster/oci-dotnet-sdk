/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.VnmonitoringService.Models
{
    /// <summary>
    /// Defines the representation of a virtual network topology.
    /// </summary>
    [JsonConverter(typeof(TopologyModelConverter))]
    public class Topology 
    {
                ///
        /// <value>
        /// Type of the topology object.
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "NETWORKING")]
            Networking,
            [EnumMember(Value = "VCN")]
            Vcn,
            [EnumMember(Value = "SUBNET")]
            Subnet,
            [EnumMember(Value = "PATH")]
            Path
        };

        
        /// <value>
        /// Lists entities comprising the virtual network topology.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Entities is required.")]
        [JsonProperty(PropertyName = "entities")]
        public System.Collections.Generic.List<System.Object> Entities { get; set; }
        
        /// <value>
        /// Lists relationships between entities in the virtual network topology.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Relationships is required.")]
        [JsonProperty(PropertyName = "relationships")]
        public System.Collections.Generic.List<TopologyEntityRelationship> Relationships { get; set; }
        
        /// <value>
        /// Lists entities that are limited during ingestion.
        /// The values for the items in the list are the entity type names of the limitedEntities.
        /// Example: vcn
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LimitedEntities is required.")]
        [JsonProperty(PropertyName = "limitedEntities")]
        public System.Collections.Generic.List<string> LimitedEntities { get; set; }
        
        /// <value>
        /// Records when the virtual network topology was created, in [RFC3339](https://tools.ietf.org/html/rfc3339) format for date and time.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
    }

    public class TopologyModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(Topology);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(Topology);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "VCN":
                    obj = new VcnTopology();
                    break;
                case "PATH":
                    obj = new PathTopology();
                    break;
                case "NETWORKING":
                    obj = new NetworkingTopology();
                    break;
                case "SUBNET":
                    obj = new SubnetTopology();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under Topology! Returning null value.");
            }
            return obj;
        }
    }
}
