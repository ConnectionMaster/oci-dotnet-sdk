/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.VnmonitoringService.Models
{
    /// <summary>
    /// The set of rules governing what traffic the flow log collects when creating a flow log capture filter.
    /// 
    /// </summary>
    public class FlowLogCaptureFilterRuleDetails 
    {
        
        /// <value>
        /// Indicates whether a flow log capture filter rule is enabled.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }
        
        /// <value>
        /// A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "priority")]
        public System.Nullable<int> Priority { get; set; }
        
        /// <value>
        /// Sampling interval as 1 of X, where X is an integer not greater than 100000.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "samplingRate")]
        public System.Nullable<int> SamplingRate { get; set; }
        
        /// <value>
        /// Traffic from this CIDR will be captured in the flow log.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sourceCidr")]
        public string SourceCidr { get; set; }
        
        /// <value>
        /// Traffic to this CIDR will be captured in the flow log.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "destinationCidr")]
        public string DestinationCidr { get; set; }
        
        /// <value>
        /// The transport protocol the filter uses.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }
        
        [JsonProperty(PropertyName = "icmpOptions")]
        public IcmpOptions IcmpOptions { get; set; }
        
        [JsonProperty(PropertyName = "tcpOptions")]
        public TcpOptions TcpOptions { get; set; }
        
        [JsonProperty(PropertyName = "udpOptions")]
        public UdpOptions UdpOptions { get; set; }
                ///
        /// <value>
        /// Type or types of flow logs to store. `ALL` includes records for both accepted traffic and
        /// rejected traffic.
        /// 
        /// </value>
        ///
        public enum FlowLogTypeEnum {
            [EnumMember(Value = "ALL")]
            All,
            [EnumMember(Value = "REJECT")]
            Reject,
            [EnumMember(Value = "ACCEPT")]
            Accept
        };

        /// <value>
        /// Type or types of flow logs to store. `ALL` includes records for both accepted traffic and
        /// rejected traffic.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "flowLogType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<FlowLogTypeEnum> FlowLogType { get; set; }
                ///
        /// <value>
        /// Include or exclude a ruleAction object.
        /// 
        /// </value>
        ///
        public enum RuleActionEnum {
            [EnumMember(Value = "INCLUDE")]
            Include,
            [EnumMember(Value = "EXCLUDE")]
            Exclude
        };

        /// <value>
        /// Include or exclude a ruleAction object.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "ruleAction")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<RuleActionEnum> RuleAction { get; set; }
        
    }
}
