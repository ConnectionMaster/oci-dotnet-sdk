/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.VnmonitoringService.Models
{
    
    public class CreateVcnDetails 
    {
        
        /// <value>
        /// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead.
        /// Example: 10.0.0.0/16
        /// </value>
        [JsonProperty(PropertyName = "cidrBlock")]
        public string CidrBlock { get; set; }
        
        /// <value>
        /// The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
        /// - The CIDR blocks must be valid.
        /// - They must not overlap with each other or with the on-premises network CIDR block.
        /// - The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN.
        /// <br/>
        /// **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "cidrBlocks")]
        public System.Collections.Generic.List<string> CidrBlocks { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to contain the VCN.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The list of one or more ULA or Private IPv6 CIDR blocks for the vcn that meets the following criteria:
        /// - The CIDR blocks must be valid.
        /// - Multiple CIDR blocks must not overlap each other or the on-premises network CIDR block.
        /// - The number of CIDR blocks must not exceed the limit of IPv6 CIDR blocks allowed to a vcn.
        /// <br/>
        /// **Important:** Do *not* specify a value for `ipv6CidrBlock`. Use this parameter instead.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "ipv6PrivateCidrBlocks")]
        public System.Collections.Generic.List<string> Ipv6PrivateCidrBlocks { get; set; }
        
        /// <value>
        /// Specifies whether to skip Oracle allocated IPv6 GUA. By default, Oracle will allocate one GUA of /56
        /// size for an IPv6 enabled VCN.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isOracleGuaAllocationEnabled")]
        public System.Nullable<bool> IsOracleGuaAllocationEnabled { get; set; }
        
        /// <value>
        /// The list of BYOIPv6 OCIDs and BYOIPv6 CIDR blocks required to create a VCN that uses BYOIPv6 ranges.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "byoipv6CidrDetails")]
        public System.Collections.Generic.List<Byoipv6CidrDetails> Byoipv6CidrDetails { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// A DNS label for the VCN, used in conjunction with the VNIC's hostname and
        /// subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC
        /// within this subnet (for example, `bminstance1.subnet123.vcn1.oraclevcn.com`).
        /// Not required to be unique, but it's a best practice to set unique DNS labels
        /// for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter.
        /// The value cannot be changed.
        /// <br/>
        /// You must set this value if you want instances to be able to use hostnames to
        /// resolve other instances in the VCN. Otherwise the Internet and VCN Resolver
        /// will not work.
        /// <br/>
        /// For more information, see
        /// [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
        /// <br/>
        /// Example: vcn1
        /// </value>
        [JsonProperty(PropertyName = "dnsLabel")]
        public string DnsLabel { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Whether IPv6 is enabled for the VCN. Default is `false`.
        /// If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block.
        /// You may skip having Oracle allocate the VCN a IPv6 /56 CIDR block by setting isOracleGuaAllocationEnabled to `false`.
        /// For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).
        /// <br/>
        /// Example: true
        /// </value>
        [JsonProperty(PropertyName = "isIpv6Enabled")]
        public System.Nullable<bool> IsIpv6Enabled { get; set; }
        
    }
}
