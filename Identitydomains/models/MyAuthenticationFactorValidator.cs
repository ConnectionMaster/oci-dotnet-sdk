/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// Validate any given Authentication Factor
    /// </summary>
    public class MyAuthenticationFactorValidator 
    {
        
        /// <value>
        /// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: always
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Unique OCI identifier for the SCIM Resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: immutable
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "ocid")]
        public string Ocid { get; set; }
        
        /// <value>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Schemas is required.")]
        [JsonProperty(PropertyName = "schemas")]
        public System.Collections.Generic.List<string> Schemas { get; set; }
        
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }
        
        [JsonProperty(PropertyName = "idcsCreatedBy")]
        public IdcsCreatedBy IdcsCreatedBy { get; set; }
        
        [JsonProperty(PropertyName = "idcsLastModifiedBy")]
        public IdcsLastModifiedBy IdcsLastModifiedBy { get; set; }
        
        /// <value>
        /// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsPreventedOperations", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<IdcsPreventedOperations> IdcsPreventedOperations { get; set; }
        
        /// <value>
        /// A list of tags on this resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [key, value]
        ///  - idcsSearchable: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.List<Tags> Tags { get; set; }
        
        /// <value>
        /// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "deleteInProgress")]
        public System.Nullable<bool> DeleteInProgress { get; set; }
        
        /// <value>
        /// The release number when the resource was upgraded.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsLastUpgradedInRelease")]
        public string IdcsLastUpgradedInRelease { get; set; }
        
        /// <value>
        /// OCI Domain Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "domainOcid")]
        public string DomainOcid { get; set; }
        
        /// <value>
        /// OCI Compartment Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "compartmentOcid")]
        public string CompartmentOcid { get; set; }
        
        /// <value>
        /// OCI Tenant Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tenancyOcid")]
        public string TenancyOcid { get; set; }
                ///
        /// <value>
        /// Authentication Factor which is being validated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        ///
        public enum AuthFactorEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "USERNAME_PASSWORD")]
            UsernamePassword,
            [EnumMember(Value = "PUSH")]
            Push,
            [EnumMember(Value = "TOTP")]
            Totp,
            [EnumMember(Value = "EMAIL")]
            Email,
            [EnumMember(Value = "SMS")]
            Sms,
            [EnumMember(Value = "VOICE")]
            Voice,
            [EnumMember(Value = "BYPASSCODE")]
            Bypasscode,
            [EnumMember(Value = "SECURITY_QUESTIONS")]
            SecurityQuestions,
            [EnumMember(Value = "TRUST_TOKEN")]
            TrustToken,
            [EnumMember(Value = "PHONE_CALL")]
            PhoneCall,
            [EnumMember(Value = "THIRDPARTY")]
            Thirdparty,
            [EnumMember(Value = "FIDO_AUTHENTICATOR")]
            FidoAuthenticator,
            [EnumMember(Value = "YUBICO_OTP")]
            YubicoOtp,
            [EnumMember(Value = "KMSI_TOKEN")]
            KmsiToken
        };

        /// <value>
        /// Authentication Factor which is being validated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AuthFactor is required.")]
        [JsonProperty(PropertyName = "authFactor")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AuthFactorEnum> AuthFactor { get; set; }
                ///
        /// <value>
        /// Specifies whether the service is being used to enroll or validate a factor
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        ///
        public enum ScenarioEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ENROLLMENT")]
            Enrollment,
            [EnumMember(Value = "AUTHENTICATION")]
            Authentication
        };

        /// <value>
        /// Specifies whether the service is being used to enroll or validate a factor
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Scenario is required.")]
        [JsonProperty(PropertyName = "scenario")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ScenarioEnum> Scenario { get; set; }
        
        /// <value>
        /// Request ID which is being validated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "requestId")]
        public string RequestId { get; set; }
        
        /// <value>
        /// The One Time Passcode which needs to be validated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: never
        ///  - uniqueness: none
        ///  - idcsSensitive: encrypt
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "otpCode")]
        public string OtpCode { get; set; }
        
        /// <value>
        /// Device id whose factor is being validated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "deviceId")]
        public string DeviceId { get; set; }
                ///
        /// <value>
        /// Validation status returned in the response
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readOnly
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SUCCESS")]
            Success,
            [EnumMember(Value = "FAILURE")]
            Failure
        };

        /// <value>
        /// Validation status returned in the response
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readOnly
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// User guid for whom the validation has initiated. Optional.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }
        
        /// <value>
        /// User name for whom the validation has initiated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        ///  - idcsPii: true
        /// </value>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }
        
        /// <value>
        /// Display name of the verified device
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// Validator message which is passed by the client. When it is a PUSH notification, it can be a rejection message.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
                ///
        /// <value>
        /// type indicating whether the flow is OIDC, SAML etc.,
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: default
        ///  - uniqueness: none
        /// </value>
        ///
        public enum TypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SAML")]
            Saml,
            [EnumMember(Value = "OIDC")]
            Oidc
        };

        /// <value>
        /// type indicating whether the flow is OIDC, SAML etc.,
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: default
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// Indicates whether to update user preferred mfa factor or not
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: boolean
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "updateUserPreference")]
        public System.Nullable<bool> UpdateUserPreference { get; set; }
                ///
        /// <value>
        /// Indicates whether to user passwordless factor to be updated or mfa factor to be updated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        ///
        public enum PreferenceTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "PASSWORDLESS")]
            Passwordless,
            [EnumMember(Value = "MFA")]
            Mfa
        };

        /// <value>
        /// Indicates whether to user passwordless factor to be updated or mfa factor to be updated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "preferenceType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<PreferenceTypeEnum> PreferenceType { get; set; }
        
        /// <value>
        /// List of security questions the user has submitted to get authenticated.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: complex
        ///  - multiValued: true
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "securityQuestions")]
        public System.Collections.Generic.List<MyAuthenticationFactorValidatorSecurityQuestions> SecurityQuestions { get; set; }
        
        /// <value>
        /// Name of the client to be trusted
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Platform of the client to be trusted
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }
        
        /// <value>
        /// Location of the trusted client.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }
        
        /// <value>
        /// Trusted token resource identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "trustedTokenId")]
        public string TrustedTokenId { get; set; }
        
        /// <value>
        /// KMSI token resource identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "kmsiTokenId")]
        public string KmsiTokenId { get; set; }
        
        /// <value>
        /// Sign-On Policy dictated allowed second factors.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: true
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "policyEnabledSecondFactors")]
        public System.Collections.Generic.List<string> PolicyEnabledSecondFactors { get; set; }
        
        /// <value>
        /// Indicates to create trust token.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: boolean
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "createTrustedAgent")]
        public System.Nullable<bool> CreateTrustedAgent { get; set; }
        
        /// <value>
        /// Indicates to create kmsi token.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: boolean
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "createKmsiToken")]
        public System.Nullable<bool> CreateKmsiToken { get; set; }
        
        /// <value>
        /// Flag indicates whether the factor is enrolled in account recovery. If the value is not provided or false, then it will be treated as MFA factor validation.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "isAccRecEnabled")]
        public System.Nullable<bool> IsAccRecEnabled { get; set; }
        
        /// <value>
        /// Sign-On Policy dictated validity duration for trusted client in Minutes.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: integer
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: writeOnly
        ///  - returned: never
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "policyTrustedFrequencyMins")]
        public System.Nullable<int> PolicyTrustedFrequencyMins { get; set; }
        
        [JsonProperty(PropertyName = "thirdPartyFactor")]
        public MyAuthenticationFactorValidatorThirdPartyFactor ThirdPartyFactor { get; set; }
        
        /// <value>
        /// Additional attributes which will be sent as part of a push notification
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "additionalAttributes")]
        public System.Collections.Generic.List<MyAuthenticationFactorValidatorAdditionalAttributes> AdditionalAttributes { get; set; }
        
    }
}
