/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// ResourceTypeSchemaAttribute Schema Definition
    /// </summary>
    public class ResourceTypeSchemaAttribute 
    {
        
        /// <value>
        /// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: always
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Unique OCI identifier for the SCIM Resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: immutable
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "ocid")]
        public string Ocid { get; set; }
        
        /// <value>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Schemas is required.")]
        [JsonProperty(PropertyName = "schemas")]
        public System.Collections.Generic.List<string> Schemas { get; set; }
        
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }
        
        [JsonProperty(PropertyName = "idcsCreatedBy")]
        public IdcsCreatedBy IdcsCreatedBy { get; set; }
        
        [JsonProperty(PropertyName = "idcsLastModifiedBy")]
        public IdcsLastModifiedBy IdcsLastModifiedBy { get; set; }
        
        /// <value>
        /// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsPreventedOperations", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<IdcsPreventedOperations> IdcsPreventedOperations { get; set; }
        
        /// <value>
        /// A list of tags on this resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [key, value]
        ///  - idcsSearchable: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.List<Tags> Tags { get; set; }
        
        /// <value>
        /// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "deleteInProgress")]
        public System.Nullable<bool> DeleteInProgress { get; set; }
        
        /// <value>
        /// The release number when the resource was upgraded.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsLastUpgradedInRelease")]
        public string IdcsLastUpgradedInRelease { get; set; }
        
        /// <value>
        /// OCI Domain Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "domainOcid")]
        public string DomainOcid { get; set; }
        
        /// <value>
        /// OCI Compartment Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "compartmentOcid")]
        public string CompartmentOcid { get; set; }
        
        /// <value>
        /// OCI Tenant Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tenancyOcid")]
        public string TenancyOcid { get; set; }
        
        /// <value>
        /// Attribute's name
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Localized schema attribute display name for use by UI client  for displaying attribute labels
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsDisplayNameMessageId")]
        public string IdcsDisplayNameMessageId { get; set; }
        
        /// <value>
        /// ResourceType this attribute belongs to.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - idcsSearchable: true
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }
        
        /// <value>
        /// Schema URN string that this attribute belongs to
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - idcsSearchable: true
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsSchemaUrn")]
        public string IdcsSchemaUrn { get; set; }
        
        /// <value>
        /// Fully qualified name of this attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - idcsSearchable: true
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsFullyQualifiedName")]
        public string IdcsFullyQualifiedName { get; set; }
        
        /// <value>
        /// custom attribute flag.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - idcsSearchable: true
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCustomAttribute")]
        public System.Nullable<bool> IdcsCustomAttribute { get; set; }
                ///
        /// <value>
        /// The attribute's data type--for example, String
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum TypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "string")]
            String,
            [EnumMember(Value = "complex")]
            Complex,
            [EnumMember(Value = "boolean")]
            Boolean,
            [EnumMember(Value = "decimal")]
            Decimal,
            [EnumMember(Value = "integer")]
            Integer,
            [EnumMember(Value = "dateTime")]
            DateTime,
            [EnumMember(Value = "reference")]
            Reference,
            [EnumMember(Value = "binary")]
            Binary
        };

        /// <value>
        /// The attribute's data type--for example, String
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// Indicates the attribute's plurality
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "multiValued")]
        public System.Nullable<bool> MultiValued { get; set; }
        
        /// <value>
        /// The attribute's human-readable description
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Specifies if the attribute is required
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "required")]
        public System.Nullable<bool> Required { get; set; }
        
        /// <value>
        /// A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \\\"work\\\", \\\"home\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "canonicalValues")]
        public System.Collections.Generic.List<string> CanonicalValues { get; set; }
        
        /// <value>
        /// Specifies if the String attribute is case-sensitive
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "caseExact")]
        public System.Nullable<bool> CaseExact { get; set; }
                ///
        /// <value>
        /// Specifies if the attribute is mutable
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum MutabilityEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "readOnly")]
            ReadOnly,
            [EnumMember(Value = "readWrite")]
            ReadWrite,
            [EnumMember(Value = "immutable")]
            Immutable,
            [EnumMember(Value = "writeOnly")]
            WriteOnly
        };

        /// <value>
        /// Specifies if the attribute is mutable
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "mutability")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MutabilityEnum> Mutability { get; set; }
                ///
        /// <value>
        /// Specifies User mutability for this attribute
        /// <br/>
        /// **Added In:** 18.2.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum EndUserMutabilityEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "readOnly")]
            ReadOnly,
            [EnumMember(Value = "readWrite")]
            ReadWrite,
            [EnumMember(Value = "immutable")]
            Immutable,
            [EnumMember(Value = "hidden")]
            Hidden
        };

        /// <value>
        /// Specifies User mutability for this attribute
        /// <br/>
        /// **Added In:** 18.2.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "endUserMutability")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<EndUserMutabilityEnum> EndUserMutability { get; set; }
                ///
        ///
        public enum EndUserMutabilityAllowedValuesEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "readOnly")]
            ReadOnly,
            [EnumMember(Value = "readWrite")]
            ReadWrite,
            [EnumMember(Value = "immutable")]
            Immutable,
            [EnumMember(Value = "hidden")]
            Hidden
        };

        /// <value>
        /// Specifies the list of User mutabilities allowed
        /// <br/>
        /// **Added In:** 18.2.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "endUserMutabilityAllowedValues", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<EndUserMutabilityAllowedValuesEnum> EndUserMutabilityAllowedValues { get; set; }
                ///
        /// <value>
        /// A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum ReturnedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "always")]
            Always,
            [EnumMember(Value = "never")]
            Never,
            [EnumMember(Value = "default")]
            Default,
            [EnumMember(Value = "request")]
            Request
        };

        /// <value>
        /// A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "returned")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ReturnedEnum> Returned { get; set; }
                ///
        /// <value>
        /// A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \\\"none\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum UniquenessEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "none")]
            None,
            [EnumMember(Value = "server")]
            Server,
            [EnumMember(Value = "global")]
            Global
        };

        /// <value>
        /// A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \\\"none\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "uniqueness")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<UniquenessEnum> Uniqueness { get; set; }
        
        /// <value>
        /// The attribute defining the CSV column header name for import/export
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCsvColumnHeaderName")]
        public string IdcsCsvColumnHeaderName { get; set; }
        
        /// <value>
        /// Maps to ICF target attribute name
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsICFBundleAttributeName")]
        public string IdcsICFBundleAttributeName { get; set; }
        
        /// <value>
        /// Metadata to identify the ICF required attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsICFRequired")]
        public System.Nullable<bool> IdcsICFRequired { get; set; }
                ///
        /// <value>
        /// Maps to ICF data type
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum IdcsICFAttributeTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "string")]
            String,
            [EnumMember(Value = "long")]
            Long,
            [EnumMember(Value = "char")]
            Char,
            [EnumMember(Value = "double")]
            Double,
            [EnumMember(Value = "float")]
            Float,
            [EnumMember(Value = "integer")]
            Integer,
            [EnumMember(Value = "boolean")]
            Boolean,
            [EnumMember(Value = "bytes")]
            Bytes,
            [EnumMember(Value = "bigdecimal")]
            Bigdecimal,
            [EnumMember(Value = "biginteger")]
            Biginteger,
            [EnumMember(Value = "guardedbytes")]
            Guardedbytes,
            [EnumMember(Value = "guardedstring")]
            Guardedstring
        };

        /// <value>
        /// Maps to ICF data type
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsICFAttributeType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IdcsICFAttributeTypeEnum> IdcsICFAttributeType { get; set; }
        
        /// <value>
        /// The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \\\"reference\\\" data type.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "referenceTypes")]
        public System.Collections.Generic.List<string> ReferenceTypes { get; set; }
        
        /// <value>
        /// Indicates that the schema has been deprecated since version
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsDeprecatedSinceVersion")]
        public System.Nullable<int> IdcsDeprecatedSinceVersion { get; set; }
        
        /// <value>
        /// Indicates that the schema has been added since version
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsAddedSinceVersion")]
        public System.Nullable<int> IdcsAddedSinceVersion { get; set; }
        
        /// <value>
        /// Indicates that the schema has been deprecated since this release number
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsDeprecatedSinceReleaseNumber")]
        public string IdcsDeprecatedSinceReleaseNumber { get; set; }
        
        /// <value>
        /// Indicates that the schema has been added since this release number
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsAddedSinceReleaseNumber")]
        public string IdcsAddedSinceReleaseNumber { get; set; }
        
        /// <value>
        /// Specifies the minimum length of the attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMinLength")]
        public System.Nullable<int> IdcsMinLength { get; set; }
        
        /// <value>
        /// Specifies the maximum length of the attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMaxLength")]
        public System.Nullable<int> IdcsMaxLength { get; set; }
        
        /// <value>
        /// Specifies the minimum value of the integer attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMinValue")]
        public System.Nullable<int> IdcsMinValue { get; set; }
        
        /// <value>
        /// Specifies the maximum value of the integer attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMaxValue")]
        public System.Nullable<int> IdcsMaxValue { get; set; }
        
        /// <value>
        /// If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsMultiLanguage")]
        public System.Nullable<bool> IdcsMultiLanguage { get; set; }
        
        /// <value>
        /// Specifies the directly referenced Resources
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsRefResourceAttributes")]
        public System.Collections.Generic.List<string> IdcsRefResourceAttributes { get; set; }
        
        /// <value>
        /// Specifies the indirectly referenced Resources
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsIndirectRefResourceAttributes")]
        public System.Collections.Generic.List<string> IdcsIndirectRefResourceAttributes { get; set; }
        
        /// <value>
        /// Sequence tracking ID name for the attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsAutoIncrementSeqName")]
        public string IdcsAutoIncrementSeqName { get; set; }
        
        /// <value>
        /// Specifies whether the value of the Resource attribute is persisted
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsValuePersisted")]
        public System.Nullable<bool> IdcsValuePersisted { get; set; }
                ///
        /// <value>
        /// Flag to specify if the attribute should be encrypted or hashed
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum IdcsSensitiveEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "encrypt")]
            Encrypt,
            [EnumMember(Value = "hash")]
            Hash,
            [EnumMember(Value = "hash_sc")]
            HashSc,
            [EnumMember(Value = "checksum")]
            Checksum,
            [EnumMember(Value = "none")]
            None
        };

        /// <value>
        /// Flag to specify if the attribute should be encrypted or hashed
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsSensitive")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IdcsSensitiveEnum> IdcsSensitive { get; set; }
        
        /// <value>
        /// Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsInternal")]
        public System.Nullable<bool> IdcsInternal { get; set; }
        
        /// <value>
        /// Trims any leading and trailing blanks from String values. Default is True.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsTrimStringValue")]
        public System.Nullable<bool> IdcsTrimStringValue { get; set; }
        
        /// <value>
        /// Specifies whether this attribute can be included in a search filter
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsSearchable")]
        public System.Nullable<bool> IdcsSearchable { get; set; }
        
        /// <value>
        /// Specifies whether this attribute value was generated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsGenerated")]
        public System.Nullable<bool> IdcsGenerated { get; set; }
        
        /// <value>
        /// Specifies whether changes to this attribute value are audited
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAuditable")]
        public System.Nullable<bool> IdcsAuditable { get; set; }
        
        /// <value>
        /// Target attribute name that this attribute gets mapped to for persistence
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetAttributeName")]
        public string IdcsTargetAttributeName { get; set; }
        
        /// <value>
        /// Target index name created for this attribute for performance
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetUniqueConstraintName")]
        public string IdcsTargetUniqueConstraintName { get; set; }
        
        /// <value>
        /// Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false & searchable attributes. Do not use by default.
        /// <br/>
        /// **Added In:** 19.1.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetNormAttributeName")]
        public string IdcsTargetNormAttributeName { get; set; }
        
        /// <value>
        /// Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
        /// <br/>
        /// **Added In:** 19.1.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetAttributeNameToMigrateFrom")]
        public string IdcsTargetAttributeNameToMigrateFrom { get; set; }
        
        /// <value>
        /// Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsToTargetMapper")]
        public string IdcsToTargetMapper { get; set; }
        
        /// <value>
        /// Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsFromTargetMapper")]
        public string IdcsFromTargetMapper { get; set; }
        
        /// <value>
        /// Specifies the user-friendly displayable attribute name or catalog key used for localization
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - idcsSearchable: true
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsDisplayName")]
        public string IdcsDisplayName { get; set; }
        
        /// <value>
        /// Specifies the Resource type to read from for dynamic canonical values
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceResourceType")]
        public string IdcsCanonicalValueSourceResourceType { get; set; }
        
        /// <value>
        /// Filter to use when getting canonical values for this schema attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceFilter")]
        public string IdcsCanonicalValueSourceFilter { get; set; }
        
        /// <value>
        /// Validate payload reference value during create, replace, and update. Default is True.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsValidateReference")]
        public System.Nullable<bool> IdcsValidateReference { get; set; }
        
        /// <value>
        /// The set of one or more sub attributes' names of a CMVA, whose values uniquely identify an instance of a CMVA
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCompositeKey")]
        public System.Collections.Generic.List<string> IdcsCompositeKey { get; set; }
        
        /// <value>
        /// **SCIM++ Properties:**
        /// - caseExact: false
        /// - multiValued: false
        /// - mutability: readOnly
        /// - required: false
        /// - idcsSearchable: true
        /// - returned: default
        /// - type: boolean
        /// - uniqueness: none
        /// Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true. 
        /// </value>
        [JsonProperty(PropertyName = "idcsFetchComplexAttributeValues")]
        public System.Nullable<bool> IdcsFetchComplexAttributeValues { get; set; }
        
        /// <value>
        /// Indicates if the attribute is scim compliant, default is true
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsScimCompliant")]
        public System.Nullable<bool> IdcsScimCompliant { get; set; }
        
        /// <value>
        /// Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - idcsSearchable: true
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAttributeMappable")]
        public System.Nullable<bool> IdcsAttributeMappable { get; set; }
        
        /// <value>
        /// Specifies the referenced Resource attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsRefResourceAttribute")]
        public string IdcsRefResourceAttribute { get; set; }
        
        /// <value>
        /// Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - idcsSearchable: true
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAttributeCacheable")]
        public System.Nullable<bool> IdcsAttributeCacheable { get; set; }
        
    }
}
