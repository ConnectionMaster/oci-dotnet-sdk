/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// Schema used for Identity Propagation Trust.
    /// </summary>
    public class IdentityPropagationTrust 
    {
        
        /// <value>
        /// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: always
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Unique OCI identifier for the SCIM Resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: immutable
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "ocid")]
        public string Ocid { get; set; }
        
        /// <value>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Schemas is required.")]
        [JsonProperty(PropertyName = "schemas")]
        public System.Collections.Generic.List<string> Schemas { get; set; }
        
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }
        
        [JsonProperty(PropertyName = "idcsCreatedBy")]
        public IdcsCreatedBy IdcsCreatedBy { get; set; }
        
        [JsonProperty(PropertyName = "idcsLastModifiedBy")]
        public IdcsLastModifiedBy IdcsLastModifiedBy { get; set; }
        
        /// <value>
        /// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsPreventedOperations", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<IdcsPreventedOperations> IdcsPreventedOperations { get; set; }
        
        /// <value>
        /// A list of tags on this resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [key, value]
        ///  - idcsSearchable: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.List<Tags> Tags { get; set; }
        
        /// <value>
        /// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "deleteInProgress")]
        public System.Nullable<bool> DeleteInProgress { get; set; }
        
        /// <value>
        /// The release number when the resource was upgraded.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsLastUpgradedInRelease")]
        public string IdcsLastUpgradedInRelease { get; set; }
        
        /// <value>
        /// OCI Domain Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "domainOcid")]
        public string DomainOcid { get; set; }
        
        /// <value>
        /// OCI Compartment Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "compartmentOcid")]
        public string CompartmentOcid { get; set; }
        
        /// <value>
        /// OCI Tenant Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tenancyOcid")]
        public string TenancyOcid { get; set; }
        
        /// <value>
        /// The name of the the Identity Propagation Trust.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: immutable
        ///  - returned: default
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The description of the Identity Propagation Trust.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - caseExact: false
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
                ///
        /// <value>
        /// The type of the inbound token from the Identity cloud provider.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - type: string
        ///  - multiValued: false
        ///  - uniqueness: none
        /// </value>
        ///
        public enum TypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "JWT")]
            Jwt,
            [EnumMember(Value = "SAML")]
            Saml,
            [EnumMember(Value = "SPNEGO")]
            Spnego,
            [EnumMember(Value = "AWS")]
            Aws
        };

        /// <value>
        /// The type of the inbound token from the Identity cloud provider.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - type: string
        ///  - multiValued: false
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Type is required.")]
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// The issuer claim of the Identity provider.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: true
        ///  - mutability: readWrite
        ///  - returned: always
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - uniqueness: server
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Issuer is required.")]
        [JsonProperty(PropertyName = "issuer")]
        public string Issuer { get; set; }
        
        /// <value>
        /// The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "accountId")]
        public string AccountId { get; set; }
        
        /// <value>
        /// Used for locating the subject claim from the incoming token.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - caseExact: true
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "subjectClaimName")]
        public string SubjectClaimName { get; set; }
        
        /// <value>
        /// Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - idcsSearchable: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "subjectMappingAttribute")]
        public string SubjectMappingAttribute { get; set; }
                ///
        /// <value>
        /// The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum SubjectTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "User")]
            User,
            [EnumMember(Value = "App")]
            App
        };

        /// <value>
        /// The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "subjectType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SubjectTypeEnum> SubjectType { get; set; }
        
        /// <value>
        /// The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \\\"aud\\\" or \\\"client_id\\\". If Azure, then \\\"appid\\\". If GCP, then \\\"aud\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "clientClaimName")]
        public string ClientClaimName { get; set; }
        
        /// <value>
        /// The value that corresponds to the client claim name used to identify to whom the token is issued.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: true
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - caseExact: true
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "clientClaimValues")]
        public System.Collections.Generic.List<string> ClientClaimValues { get; set; }
        
        /// <value>
        /// If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: boolean
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: true
        /// </value>
        [JsonProperty(PropertyName = "active")]
        public System.Nullable<bool> Active { get; set; }
        
        /// <value>
        /// The cloud provider's public key API of SAML and OIDC providers for signature validation.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - caseExact: false
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "publicKeyEndpoint")]
        public string PublicKeyEndpoint { get; set; }
        
        /// <value>
        /// Store the public key if public key cert.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: string
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "publicCertificate")]
        public string PublicCertificate { get; set; }
        
        /// <value>
        /// The value of all the authorized OAuth Clients.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "oauthClients")]
        public System.Collections.Generic.List<string> OauthClients { get; set; }
        
        /// <value>
        /// The value of all the authorized OCI Service Principals.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "servicePrincipals")]
        public System.Collections.Generic.List<string> ServicePrincipals { get; set; }
        
        /// <value>
        /// Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - type: boolean
        ///  - multiValued: false
        ///  - required: false
        ///  - mutability: readWrite
        ///  - returned: default
        ///  - uniqueness: none
        ///  - idcsSearchable: false
        /// </value>
        [JsonProperty(PropertyName = "allowImpersonation")]
        public System.Nullable<bool> AllowImpersonation { get; set; }
        
        /// <value>
        /// The clock skew (in secs) that's allowed for the token issue and expiry time.
        /// <br/>
        /// **Added In:** 2308181911
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "clockSkewSeconds")]
        public System.Nullable<int> ClockSkewSeconds { get; set; }
        
        /// <value>
        /// The Impersonating Principal.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [rule, value]
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "impersonationServiceUsers")]
        public System.Collections.Generic.List<IdentityPropagationTrustImpersonationServiceUsers> ImpersonationServiceUsers { get; set; }
        
        [JsonProperty(PropertyName = "keytab")]
        public IdentityPropagationTrustKeytab Keytab { get; set; }
        
    }
}
