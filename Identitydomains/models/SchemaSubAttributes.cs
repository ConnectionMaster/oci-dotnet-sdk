/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// A list specifying the contained attributes
    /// </summary>
    public class SchemaSubAttributes 
    {
        
        /// <value>
        /// Attribute's name
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// If true, indicates that the attribute value must be written to the home region and requires immediate read-after-write consistency for access flows initiated from a replica region.
        /// <br/>
        /// **Added In:** 2209220956
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: never
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsRequiresImmediateReadAfterWriteForAccessFlows")]
        public System.Nullable<bool> IdcsRequiresImmediateReadAfterWriteForAccessFlows { get; set; }
        
        /// <value>
        /// If true, indicates that the attribute value must be written to the home region for access flows initiated from a replica region.
        /// <br/>
        /// **Added In:** 2205120021
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsRequiresWriteForAccessFlows")]
        public System.Nullable<bool> IdcsRequiresWriteForAccessFlows { get; set; }
        
        /// <value>
        /// Localized schema attribute display name for use by UI client  for displaying attribute labels
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsDisplayNameMessageId")]
        public string IdcsDisplayNameMessageId { get; set; }
        
        /// <value>
        /// Specifies if the attributes in this schema can be displayed externally
        /// <br/>
        /// **Added In:** 19.1.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsRtsaHideAttribute")]
        public System.Nullable<bool> IdcsRtsaHideAttribute { get; set; }
        
        /// <value>
        /// Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internal flag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsInternal")]
        public System.Nullable<bool> IdcsInternal { get; set; }
                ///
        /// <value>
        /// Attribute's data type--for example, String
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum TypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "string")]
            String,
            [EnumMember(Value = "complex")]
            Complex,
            [EnumMember(Value = "boolean")]
            Boolean,
            [EnumMember(Value = "decimal")]
            Decimal,
            [EnumMember(Value = "integer")]
            Integer,
            [EnumMember(Value = "dateTime")]
            DateTime,
            [EnumMember(Value = "reference")]
            Reference,
            [EnumMember(Value = "binary")]
            Binary
        };

        /// <value>
        /// Attribute's data type--for example, String
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// Indicates the attribute's plurality
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "multiValued")]
        public System.Nullable<bool> MultiValued { get; set; }
        
        /// <value>
        /// Attribute's human-readable description
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Specifies if the attribute is required
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "required")]
        public System.Nullable<bool> Required { get; set; }
        
        /// <value>
        /// Specifies if the attribute is required
        /// <br/>
        /// **Added In:** 2305190132
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsReturnEmptyWhenNull")]
        public System.Nullable<bool> IdcsReturnEmptyWhenNull { get; set; }
        
        /// <value>
        /// A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \\\"work\\\", \\\"home\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "canonicalValues")]
        public System.Collections.Generic.List<string> CanonicalValues { get; set; }
        
        /// <value>
        /// Specifies the default value for an attribute. The value must be one from canonicalValues if defined.
        /// <br/>
        /// **Added In:** 18.1.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsDefaultValue")]
        public string IdcsDefaultValue { get; set; }
        
        /// <value>
        /// Specifies if the String attribute is case-sensitive
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "caseExact")]
        public System.Nullable<bool> CaseExact { get; set; }
                ///
        /// <value>
        /// Specifies if the attribute is mutable
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum MutabilityEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "readOnly")]
            ReadOnly,
            [EnumMember(Value = "readWrite")]
            ReadWrite,
            [EnumMember(Value = "immutable")]
            Immutable,
            [EnumMember(Value = "writeOnly")]
            WriteOnly
        };

        /// <value>
        /// Specifies if the attribute is mutable
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "mutability")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MutabilityEnum> Mutability { get; set; }
                ///
        /// <value>
        /// A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum ReturnedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "always")]
            Always,
            [EnumMember(Value = "never")]
            Never,
            [EnumMember(Value = "default")]
            Default,
            [EnumMember(Value = "request")]
            Request
        };

        /// <value>
        /// A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "returned")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ReturnedEnum> Returned { get; set; }
        
        /// <value>
        /// The attribute that defines the CSV header name for import/export
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCsvAttributeName")]
        public string IdcsCsvAttributeName { get; set; }
                ///
        /// <value>
        /// A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has a uniqueness of \\\"none\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum UniquenessEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "none")]
            None,
            [EnumMember(Value = "server")]
            Server,
            [EnumMember(Value = "global")]
            Global
        };

        /// <value>
        /// A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has a uniqueness of \\\"none\\\".
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "uniqueness")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<UniquenessEnum> Uniqueness { get; set; }
        
        /// <value>
        /// The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \\\"reference\\\" data type.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "referenceTypes")]
        public System.Collections.Generic.List<string> ReferenceTypes { get; set; }
        
        /// <value>
        /// Indicates that the schema has been deprecated since version
        /// <br/>
        /// **Deprecated Since: 19.3.3**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsDeprecatedSinceVersion")]
        public System.Nullable<int> IdcsDeprecatedSinceVersion { get; set; }
        
        /// <value>
        /// Indicates that the schema has been added since version
        /// <br/>
        /// **Deprecated Since: 19.3.3**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsAddedSinceVersion")]
        public System.Nullable<int> IdcsAddedSinceVersion { get; set; }
        
        /// <value>
        /// Indicates that the schema has been deprecated since this release number
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsDeprecatedSinceReleaseNumber")]
        public string IdcsDeprecatedSinceReleaseNumber { get; set; }
        
        /// <value>
        /// Indicates that the schema has been added since this release number
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsAddedSinceReleaseNumber")]
        public string IdcsAddedSinceReleaseNumber { get; set; }
        
        /// <value>
        /// Specifies the minimum length of this attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMinLength")]
        public System.Nullable<int> IdcsMinLength { get; set; }
        
        /// <value>
        /// Specifies the maximum length of this attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMaxLength")]
        public System.Nullable<int> IdcsMaxLength { get; set; }
        
        /// <value>
        /// Specifies the minimum value of the integer attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMinValue")]
        public System.Nullable<int> IdcsMinValue { get; set; }
        
        /// <value>
        /// Specifies the maximum value of the integer attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsMaxValue")]
        public System.Nullable<int> IdcsMaxValue { get; set; }
        
        /// <value>
        /// If true, specifies that the sub attribute value can be set to true on one and only one instance of the CMVA.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsOnlyOneValueCanBeTrue")]
        public System.Nullable<bool> IdcsOnlyOneValueCanBeTrue { get; set; }
        
        /// <value>
        /// **SCIM++ Properties:**
        /// - caseExact: true
        /// - multiValued: false
        /// - mutability: readOnly
        /// - required: false
        /// - returned: default
        /// - type: integer
        /// - uniqueness: none
        /// Specify a limit on the number of attribute-values that any caller will receive when requesting a CMVA attribute. If the no of CMVA instances exceeds the limit then Oracle Identity Cloud Service will throw exception. Users can choose to refine the filter on CMVA attribute. 
        /// </value>
        [JsonProperty(PropertyName = "idcsMaxValuesReturned")]
        public System.Nullable<int> IdcsMaxValuesReturned { get; set; }
        
        /// <value>
        /// If true, ARM will ensure atleast one of the instances of CMVA has the attribute value set to true.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsOneValueMustBeTrue")]
        public System.Nullable<bool> IdcsOneValueMustBeTrue { get; set; }
        
        /// <value>
        /// Specifies the directly referenced Resources
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsRefResourceAttributes")]
        public System.Collections.Generic.List<string> IdcsRefResourceAttributes { get; set; }
        
        /// <value>
        /// Specifies the indirectly referenced Resources
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsIndirectRefResourceAttributes")]
        public System.Collections.Generic.List<string> IdcsIndirectRefResourceAttributes { get; set; }
        
        /// <value>
        /// Specifies whether the sub-attribute of the Resource attribute is persisted
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsValuePersisted")]
        public System.Nullable<bool> IdcsValuePersisted { get; set; }
                ///
        /// <value>
        /// Specifiees if the attribute should be encrypted or hashed
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum IdcsSensitiveEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "encrypt")]
            Encrypt,
            [EnumMember(Value = "hash")]
            Hash,
            [EnumMember(Value = "hash_sc")]
            HashSc,
            [EnumMember(Value = "checksum")]
            Checksum,
            [EnumMember(Value = "none")]
            None
        };

        /// <value>
        /// Specifiees if the attribute should be encrypted or hashed
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsSensitive")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IdcsSensitiveEnum> IdcsSensitive { get; set; }
        
        /// <value>
        /// Trims any leading and trailing blanks from String values. Default is True.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsTrimStringValue")]
        public System.Nullable<bool> IdcsTrimStringValue { get; set; }
        
        /// <value>
        /// Specifies whether this attribute can be included in a search filter
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsSearchable")]
        public System.Nullable<bool> IdcsSearchable { get; set; }
        
        /// <value>
        /// Specifies whether this attribute value was generated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsGenerated")]
        public System.Nullable<bool> IdcsGenerated { get; set; }
        
        /// <value>
        /// Specifies whether changes to this attribute value will be audited
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAuditable")]
        public System.Nullable<bool> IdcsAuditable { get; set; }
        
        /// <value>
        /// Target attribute name that this attribute gets mapped to for persistence
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetAttributeName")]
        public string IdcsTargetAttributeName { get; set; }
        
        /// <value>
        /// Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false & searchable attributes. Do not use by default.
        /// <br/>
        /// **Added In:** 19.1.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetNormAttributeName")]
        public string IdcsTargetNormAttributeName { get; set; }
        
        /// <value>
        /// Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
        /// <br/>
        /// **Added In:** 19.2.1
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetAttributeNameToMigrateFrom")]
        public string IdcsTargetAttributeNameToMigrateFrom { get; set; }
        
        /// <value>
        /// Target index name created for this attribute for performance
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsTargetUniqueConstraintName")]
        public string IdcsTargetUniqueConstraintName { get; set; }
        
        /// <value>
        /// Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsToTargetMapper")]
        public string IdcsToTargetMapper { get; set; }
        
        /// <value>
        /// Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsFromTargetMapper")]
        public string IdcsFromTargetMapper { get; set; }
        
        /// <value>
        /// Specifies the user-friendly displayable attribute name or catalog key used for localization
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsDisplayName")]
        public string IdcsDisplayName { get; set; }
        
        /// <value>
        /// Specifies the Resource type to read from for dynamic canonical values
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceResourceType")]
        public string IdcsCanonicalValueSourceResourceType { get; set; }
        
        /// <value>
        /// Filter to use when getting canonical values for this schema attribute
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceFilter")]
        public string IdcsCanonicalValueSourceFilter { get; set; }
        
        /// <value>
        /// Specifies the Resource type ID to read from for dynamic canonical values
        /// <br/>
        /// **Added In:** 17.4.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceResourceTypeID")]
        public string IdcsCanonicalValueSourceResourceTypeID { get; set; }
        
        /// <value>
        /// Display name for the canonical value attribute name.
        /// <br/>
        /// **Added In:** 17.4.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceDisplayAttrName")]
        public string IdcsCanonicalValueSourceDisplayAttrName { get; set; }
        
        /// <value>
        /// Source key attribute for the canonical value.
        /// <br/>
        /// **Added In:** 17.4.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsCanonicalValueSourceKeyAttrName")]
        public string IdcsCanonicalValueSourceKeyAttrName { get; set; }
        
        /// <value>
        /// Validate payload reference value during create, replace, and update. Default is True.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsValidateReference")]
        public System.Nullable<bool> IdcsValidateReference { get; set; }
        
        /// <value>
        /// Indicates if the attribute is scim compliant, default is true
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsScimCompliant")]
        public System.Nullable<bool> IdcsScimCompliant { get; set; }
        
        /// <value>
        /// Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAttributeMappable")]
        public System.Nullable<bool> IdcsAttributeMappable { get; set; }
        
        /// <value>
        /// Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
        /// <br/>
        /// **Added In:** 17.3.4
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsAttributeCacheable")]
        public System.Nullable<bool> IdcsAttributeCacheable { get; set; }
        
        /// <value>
        /// Metadata used by Oracle Identity Cloud Service UI to sequence the attributes displayed on the Account Form.
        /// <br/>
        /// **Added In:** 17.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: integer
        /// </value>
        [JsonProperty(PropertyName = "idcsuiOrder")]
        public System.Nullable<int> IdcsuiOrder { get; set; }
        
        /// <value>
        /// Metadata used by Oracle Identity Cloud Service UI to validate the attribute values using regular expressions.
        /// <br/>
        /// **Added In:** 17.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsuiRegexp")]
        public string IdcsuiRegexp { get; set; }
        
        /// <value>
        /// Metadata used by Oracle Identity Cloud Service UI to decide whether the attribute must be displayed on the Account Form.
        /// <br/>
        /// **Added In:** 17.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsuiVisible")]
        public System.Nullable<bool> IdcsuiVisible { get; set; }
                ///
        /// <value>
        /// Metadata used by Oracle Identity Cloud Service UI to render a widget for this attribute on the Account Form.
        /// <br/>
        /// **Added In:** 17.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        ///
        public enum IdcsuiWidgetEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "inputtext")]
            Inputtext,
            [EnumMember(Value = "checkbox")]
            Checkbox,
            [EnumMember(Value = "textarea")]
            Textarea,
            [EnumMember(Value = "combobox")]
            Combobox
        };

        /// <value>
        /// Metadata used by Oracle Identity Cloud Service UI to render a widget for this attribute on the Account Form.
        /// <br/>
        /// **Added In:** 17.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        /// </value>
        [JsonProperty(PropertyName = "idcsuiWidget")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IdcsuiWidgetEnum> IdcsuiWidget { get; set; }
        
        /// <value>
        /// If true, ARM should not validate the value of the attribute since it will be converted/migrated to another attribute internally by the manager which will build valid post, put, or patch payload, depending on the client requested operation
        /// <br/>
        /// **Added In:** 18.2.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsValuePersistedInOtherAttribute")]
        public System.Nullable<bool> IdcsValuePersistedInOtherAttribute { get; set; }
        
        /// <value>
        /// Specifies whether the attribute is PII (personal information). False by default for all attributes. If attribute with idcsPii = true, it's value must be obfuscated before it's written to the Oracle Identity Cloud Service system logs.
        /// <br/>
        /// **Added In:** 18.3.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsPii")]
        public System.Nullable<bool> IdcsPii { get; set; }
        
        /// <value>
        /// Specifies if the value of the attribute should be sanitized using OWASP library for HTML content
        /// <br/>
        /// **Added In:** 20.1.3
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsSanitize")]
        public System.Nullable<bool> IdcsSanitize { get; set; }
        
        /// <value>
        /// Specifies whether the attribute should be excluded from the BulkApi patch generated by gradle task for upgrading OOTB resources.
        /// <br/>
        /// **Added In:** 2104150946
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: never
        ///  - type: boolean
        /// </value>
        [JsonProperty(PropertyName = "idcsExcludeFromUpgradePatch")]
        public System.Nullable<bool> IdcsExcludeFromUpgradePatch { get; set; }
        
    }
}
