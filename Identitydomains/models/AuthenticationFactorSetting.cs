/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// Multi Factor Authentication Settings for Tenant
    /// </summary>
    public class AuthenticationFactorSetting 
    {
        
        /// <value>
        /// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: always
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Unique OCI identifier for the SCIM Resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: immutable
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: global
        /// </value>
        [JsonProperty(PropertyName = "ocid")]
        public string Ocid { get; set; }
        
        /// <value>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Schemas is required.")]
        [JsonProperty(PropertyName = "schemas")]
        public System.Collections.Generic.List<string> Schemas { get; set; }
        
        [JsonProperty(PropertyName = "meta")]
        public Meta Meta { get; set; }
        
        [JsonProperty(PropertyName = "idcsCreatedBy")]
        public IdcsCreatedBy IdcsCreatedBy { get; set; }
        
        [JsonProperty(PropertyName = "idcsLastModifiedBy")]
        public IdcsLastModifiedBy IdcsLastModifiedBy { get; set; }
        
        /// <value>
        /// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsPreventedOperations", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<IdcsPreventedOperations> IdcsPreventedOperations { get; set; }
        
        /// <value>
        /// A list of tags on this resource.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [key, value]
        ///  - idcsSearchable: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.List<Tags> Tags { get; set; }
        
        /// <value>
        /// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "deleteInProgress")]
        public System.Nullable<bool> DeleteInProgress { get; set; }
        
        /// <value>
        /// The release number when the resource was upgraded.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "idcsLastUpgradedInRelease")]
        public string IdcsLastUpgradedInRelease { get; set; }
        
        /// <value>
        /// OCI Domain Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "domainOcid")]
        public string DomainOcid { get; set; }
        
        /// <value>
        /// OCI Compartment Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "compartmentOcid")]
        public string CompartmentOcid { get; set; }
        
        /// <value>
        /// OCI Tenant Id (ocid) in which the resource lives.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tenancyOcid")]
        public string TenancyOcid { get; set; }
        
        /// <value>
        /// If true, indicates that the EMAIL channel is enabled for authentication
        /// <br/>
        /// **Added In:** 18.1.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "emailEnabled")]
        public System.Nullable<bool> EmailEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the Short Message Service (SMS) channel is enabled for authentication
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SmsEnabled is required.")]
        [JsonProperty(PropertyName = "smsEnabled")]
        public System.Nullable<bool> SmsEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the phone (PHONE_CALL) channel is enabled for authentication
        /// <br/>
        /// **Added In:** 20.1.3
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "phoneCallEnabled")]
        public System.Nullable<bool> PhoneCallEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the Mobile App One Time Passcode channel is enabled for authentication
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TotpEnabled is required.")]
        [JsonProperty(PropertyName = "totpEnabled")]
        public System.Nullable<bool> TotpEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the Mobile App Push Notification channel is enabled for authentication
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PushEnabled is required.")]
        [JsonProperty(PropertyName = "pushEnabled")]
        public System.Nullable<bool> PushEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that Bypass Code is enabled for authentication
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "BypassCodeEnabled is required.")]
        [JsonProperty(PropertyName = "bypassCodeEnabled")]
        public System.Nullable<bool> BypassCodeEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that Security Questions are enabled for authentication
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SecurityQuestionsEnabled is required.")]
        [JsonProperty(PropertyName = "securityQuestionsEnabled")]
        public System.Nullable<bool> SecurityQuestionsEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the Fido Authenticator channels are enabled for authentication
        /// <br/>
        /// **Added In:** 2009232244
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "fidoAuthenticatorEnabled")]
        public System.Nullable<bool> FidoAuthenticatorEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that the Yubico OTP is enabled for authentication
        /// <br/>
        /// **Added In:** 2109090424
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "yubicoOtpEnabled")]
        public System.Nullable<bool> YubicoOtpEnabled { get; set; }
        
        /// <value>
        /// Specifies if Multi-Factor Authentication enrollment is mandatory or optional for a user
        /// <br/>
        /// **Deprecated Since: 18.1.2**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCanonicalValueSourceFilter: attrName eq \"mfaEnrollmentType\" and attrValues.value eq \"$(mfaEnrollmentType)\"
        ///  - idcsCanonicalValueSourceResourceType: AllowedValue
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MfaEnrollmentType is required.")]
        [JsonProperty(PropertyName = "mfaEnrollmentType")]
        public string MfaEnrollmentType { get; set; }
        
        /// <value>
        /// Specifies the category of people for whom Multi-Factor Authentication is enabled. This is a readOnly attribute which reflects the value of mfaEnabledCategory attribute in SsoSettings
        /// <br/>
        /// **Deprecated Since: 18.1.2**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "mfaEnabledCategory")]
        public string MfaEnabledCategory { get; set; }
        
        /// <value>
        /// If true, indicates that 'Show backup factor(s)' button will be hidden during authentication
        /// <br/>
        /// **Added In:** 19.3.3
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "hideBackupFactorEnabled")]
        public System.Nullable<bool> HideBackupFactorEnabled { get; set; }
        
        /// <value>
        /// If true, indicates that email will not be enrolled as a MFA factor automatically if it a account recovery factor
        /// <br/>
        /// **Added In:** 2011192329
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "autoEnrollEmailFactorDisabled")]
        public System.Nullable<bool> AutoEnrollEmailFactorDisabled { get; set; }
                ///
        ///
        public enum UserEnrollmentDisabledFactorsEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "EMAIL")]
            Email,
            [EnumMember(Value = "SMS")]
            Sms,
            [EnumMember(Value = "TOTP")]
            Totp,
            [EnumMember(Value = "PUSH")]
            Push,
            [EnumMember(Value = "OFFLINETOTP")]
            Offlinetotp,
            [EnumMember(Value = "VOICE")]
            Voice,
            [EnumMember(Value = "PHONE_CALL")]
            PhoneCall,
            [EnumMember(Value = "THIRDPARTY")]
            Thirdparty,
            [EnumMember(Value = "FIDO_AUTHENTICATOR")]
            FidoAuthenticator,
            [EnumMember(Value = "YUBICO_OTP")]
            YubicoOtp
        };

        /// <value>
        /// Factors for which enrollment should be blocked for End User
        /// <br/>
        /// **Added In:** 2012271618
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "userEnrollmentDisabledFactors", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<UserEnrollmentDisabledFactorsEnum> UserEnrollmentDisabledFactors { get; set; }
        
        [JsonProperty(PropertyName = "emailSettings")]
        public AuthenticationFactorSettingsEmailSettings EmailSettings { get; set; }
        
        [JsonProperty(PropertyName = "thirdPartyFactor")]
        public AuthenticationFactorSettingsThirdPartyFactor ThirdPartyFactor { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NotificationSettings is required.")]
        [JsonProperty(PropertyName = "notificationSettings")]
        public AuthenticationFactorSettingsNotificationSettings NotificationSettings { get; set; }
        
        [JsonProperty(PropertyName = "identityStoreSettings")]
        public AuthenticationFactorSettingsIdentityStoreSettings IdentityStoreSettings { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "BypassCodeSettings is required.")]
        [JsonProperty(PropertyName = "bypassCodeSettings")]
        public AuthenticationFactorSettingsBypassCodeSettings BypassCodeSettings { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ClientAppSettings is required.")]
        [JsonProperty(PropertyName = "clientAppSettings")]
        public AuthenticationFactorSettingsClientAppSettings ClientAppSettings { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EndpointRestrictions is required.")]
        [JsonProperty(PropertyName = "endpointRestrictions")]
        public AuthenticationFactorSettingsEndpointRestrictions EndpointRestrictions { get; set; }
        
        /// <value>
        /// Compliance Policy that defines actions to be taken when a condition is violated
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsCompositeKey: [name]
        ///  - idcsSearchable: false
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: true
        ///  - returned: default
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompliancePolicy is required.")]
        [JsonProperty(PropertyName = "compliancePolicy")]
        public System.Collections.Generic.List<AuthenticationFactorSettingsCompliancePolicy> CompliancePolicy { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TotpSettings is required.")]
        [JsonProperty(PropertyName = "totpSettings")]
        public AuthenticationFactorSettingsTotpSettings TotpSettings { get; set; }
        
        [JsonProperty(PropertyName = "urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings")]
        public ExtensionThirdPartyAuthenticationFactorSettings UrnIetfParamsScimSchemasOracleIdcsExtensionThirdPartyAuthenticationFactorSettings { get; set; }
        
        [JsonProperty(PropertyName = "urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings")]
        public ExtensionFidoAuthenticationFactorSettings UrnIetfParamsScimSchemasOracleIdcsExtensionFidoAuthenticationFactorSettings { get; set; }
        
    }
}
