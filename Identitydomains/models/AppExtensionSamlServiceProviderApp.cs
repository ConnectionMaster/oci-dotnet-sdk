/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.IdentitydomainsService.Models
{
    /// <summary>
    /// This extension defines attributes related to the Service Providers configuration.
    /// </summary>
    public class AppExtensionSamlServiceProviderApp 
    {
        
        /// <value>
        /// This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "metadata")]
        public string Metadata { get; set; }
        
        /// <value>
        /// The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "partnerProviderId")]
        public string PartnerProviderId { get; set; }
        
        /// <value>
        /// The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// <br/>
        /// **Added In:** 2202230830
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: request
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "partnerProviderPattern")]
        public string PartnerProviderPattern { get; set; }
        
        /// <value>
        /// The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
        /// <br/>
        /// **Added In:** 19.2.1
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "tenantProviderId")]
        public string TenantProviderId { get; set; }
        
        /// <value>
        /// This attribute represents the Succinct ID.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: server
        /// </value>
        [JsonProperty(PropertyName = "succinctId")]
        public string SuccinctId { get; set; }
        
        /// <value>
        /// The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "assertionConsumerUrl")]
        public string AssertionConsumerUrl { get; set; }
        
        /// <value>
        /// The URL to which the partner sends the logout request.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "logoutRequestUrl")]
        public string LogoutRequestUrl { get; set; }
        
        /// <value>
        /// The URL to which the partner sends the logout response.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "logoutResponseUrl")]
        public string LogoutResponseUrl { get; set; }
        
        /// <value>
        /// This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "nameIdFormat")]
        public string NameIdFormat { get; set; }
        
        /// <value>
        /// This attribute represents the signing certificate that an App uses to verify the signed authentication request.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "signingCertificate")]
        public string SigningCertificate { get; set; }
        
        /// <value>
        /// This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "encryptionCertificate")]
        public string EncryptionCertificate { get; set; }
                ///
        /// <value>
        /// This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum EncryptionAlgorithmEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "3DES")]
            _3Des,
            [EnumMember(Value = "AES-128")]
            Aes128,
            [EnumMember(Value = "AES-256")]
            Aes256,
            [EnumMember(Value = "AES-192")]
            Aes192,
            [EnumMember(Value = "AES-128-GCM")]
            Aes128Gcm,
            [EnumMember(Value = "AES-256-GCM")]
            Aes256Gcm,
            [EnumMember(Value = "AES-192-GCM")]
            Aes192Gcm
        };

        /// <value>
        /// This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "encryptionAlgorithm")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<EncryptionAlgorithmEnum> EncryptionAlgorithm { get; set; }
                ///
        /// <value>
        /// This attribute indicates the key encryption algorithm.
        /// <br/>
        /// **Added In:** 18.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum KeyEncryptionAlgorithmEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "RSA-v1.5")]
            RsaV15,
            [EnumMember(Value = "RSA-OAEP")]
            RsaOaep
        };

        /// <value>
        /// This attribute indicates the key encryption algorithm.
        /// <br/>
        /// **Added In:** 18.4.2
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "keyEncryptionAlgorithm")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<KeyEncryptionAlgorithmEnum> KeyEncryptionAlgorithm { get; set; }
        
        /// <value>
        /// If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "encryptAssertion")]
        public System.Nullable<bool> EncryptAssertion { get; set; }
                ///
        /// <value>
        /// Indicates which part of the response should be signed.  A value of \\\"Assertion\\\" indicates that the Assertion should be signed.  A value of \\\"Response\\\" indicates that the SSO Response should be signed. A value of \\\"AssertionAndResponse\\\" indicates that both the Assertion and the SSO Response should be signed.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum SignResponseOrAssertionEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "Assertion")]
            Assertion,
            [EnumMember(Value = "Response")]
            Response,
            [EnumMember(Value = "AssertionAndResponse")]
            AssertionAndResponse
        };

        /// <value>
        /// Indicates which part of the response should be signed.  A value of \\\"Assertion\\\" indicates that the Assertion should be signed.  A value of \\\"Response\\\" indicates that the SSO Response should be signed. A value of \\\"AssertionAndResponse\\\" indicates that both the Assertion and the SSO Response should be signed.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "signResponseOrAssertion")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SignResponseOrAssertionEnum> SignResponseOrAssertion { get; set; }
        
        /// <value>
        /// If true, then the signing certificate is included in the signature.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "includeSigningCertInSignature")]
        public System.Nullable<bool> IncludeSigningCertInSignature { get; set; }
                ///
        /// <value>
        /// This attribute represents the HTTP binding that would be used while logout.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum LogoutBindingEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "Redirect")]
            Redirect,
            [EnumMember(Value = "Post")]
            Post
        };

        /// <value>
        /// This attribute represents the HTTP binding that would be used while logout.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "logoutBinding")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LogoutBindingEnum> LogoutBinding { get; set; }
        
        /// <value>
        /// If true, then the SAML Service supports logout for this App.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "logoutEnabled")]
        public System.Nullable<bool> LogoutEnabled { get; set; }
                ///
        /// <value>
        /// This attribute represents the algorithm used to hash the signature.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum SignatureHashAlgorithmEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SHA-1")]
            Sha1,
            [EnumMember(Value = "SHA-256")]
            Sha256
        };

        /// <value>
        /// This attribute represents the algorithm used to hash the signature.
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "signatureHashAlgorithm")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SignatureHashAlgorithmEnum> SignatureHashAlgorithm { get; set; }
                ///
        /// <value>
        /// Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
        /// <br/>
        /// **Added In:** 18.2.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsDefaultValue: SAML2.0
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        ///
        public enum FederationProtocolEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SAML2.0")]
            Saml20,
            [EnumMember(Value = "WS-Fed1.1")]
            WsFed11
        };

        /// <value>
        /// Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
        /// <br/>
        /// **Added In:** 18.2.6
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: true
        ///  - idcsDefaultValue: SAML2.0
        ///  - idcsSearchable: true
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "federationProtocol")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<FederationProtocolEnum> FederationProtocol { get; set; }
        
        /// <value>
        /// **Deprecated Since: 18.2.2**
        /// <br/>
        /// **SCIM++ Properties:**
        /// - caseExact: false
        /// - idcsSearchable: true
        /// - idcsValuePersistedInOtherAttribute: true
        /// - multiValued: false
        /// - mutability: readWrite
        /// - required: false
        /// - returned: default
        /// - type: string
        /// - uniqueness: none
        /// This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema. 
        /// </value>
        [JsonProperty(PropertyName = "nameIdUserstoreAttribute")]
        public string NameIdUserstoreAttribute { get; set; }
        
        /// <value>
        /// If enabled, then the SAML Service supports Hok for this App.
        /// <br/>
        /// **Added In:** 2101262133
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: boolean
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "hokRequired")]
        public System.Nullable<bool> HokRequired { get; set; }
        
        /// <value>
        /// Hok Assertion Consumer Service Url
        /// <br/>
        /// **Added In:** 2101262133
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: string
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "hokAcsUrl")]
        public string HokAcsUrl { get; set; }
        
        /// <value>
        /// Records the notification timestamp for the SP whose signing certificate is about to expire.
        /// <br/>
        /// **Added In:** 2302092332
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsSearchable: false
        ///  - multiValued: false
        ///  - mutability: readOnly
        ///  - required: false
        ///  - returned: default
        ///  - type: dateTime
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "lastNotificationSentTime")]
        public string LastNotificationSentTime { get; set; }
        
        [JsonProperty(PropertyName = "outboundAssertionAttributes")]
        public AppOutboundAssertionAttributes OutboundAssertionAttributes { get; set; }
        
        /// <value>
        /// Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// <br/>
        /// **Deprecated Since: 18.2.2**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsCompositeKey: [name]
        ///  - idcsSearchable: false
        ///  - idcsValuePersistedInOtherAttribute: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "userAssertionAttributes")]
        public System.Collections.Generic.List<AppUserAssertionAttributes> UserAssertionAttributes { get; set; }
        
        /// <value>
        /// Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// <br/>
        /// **Deprecated Since: 18.2.2**
        /// <br/>
        /// **SCIM++ Properties:**
        ///  - caseExact: false
        ///  - idcsCompositeKey: [name]
        ///  - idcsSearchable: false
        ///  - idcsValuePersistedInOtherAttribute: true
        ///  - multiValued: true
        ///  - mutability: readWrite
        ///  - required: false
        ///  - returned: default
        ///  - type: complex
        ///  - uniqueness: none
        /// </value>
        [JsonProperty(PropertyName = "groupAssertionAttributes")]
        public System.Collections.Generic.List<AppGroupAssertionAttributes> GroupAssertionAttributes { get; set; }
        
    }
}
