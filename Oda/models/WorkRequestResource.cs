/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OdaService.Models
{
    /// <summary>
    /// A resource created or operated on by a work request.
    /// </summary>
    public class WorkRequestResource 
    {
                ///
        /// <value>
        /// The action to take against the Digital Assistant instance.
        /// </value>
        ///
        public enum ResourceActionEnum {
            [EnumMember(Value = "CREATE")]
            Create,
            [EnumMember(Value = "DELETE")]
            Delete,
            [EnumMember(Value = "PURGE")]
            Purge,
            [EnumMember(Value = "RECOVER")]
            Recover,
            [EnumMember(Value = "STOP")]
            Stop,
            [EnumMember(Value = "START")]
            Start,
            [EnumMember(Value = "CHANGE_COMPARTMENT")]
            ChangeCompartment,
            [EnumMember(Value = "CREATE_ASSOCIATION")]
            CreateAssociation,
            [EnumMember(Value = "DELETE_ASSOCIATION")]
            DeleteAssociation,
            [EnumMember(Value = "UPDATE_ENTITLEMENTS_FOR_CACCT")]
            UpdateEntitlementsForCacct
        };

        /// <value>
        /// The action to take against the Digital Assistant instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResourceAction is required.")]
        [JsonProperty(PropertyName = "resourceAction")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ResourceActionEnum> ResourceAction { get; set; }
        
        /// <value>
        /// The resource type that the work request affects.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResourceType is required.")]
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }
        
        /// <value>
        /// The identifier of the Digital Assistant instance that is the subject of the request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResourceId is required.")]
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }
                ///
        /// <value>
        /// The current state of the work request. The `SUCCEEDED`, `FAILED`, AND `CANCELED` states
        /// correspond to the action being performed.
        /// 
        /// </value>
        ///
        public enum StatusEnum {
            [EnumMember(Value = "ACCEPTED")]
            Accepted,
            [EnumMember(Value = "IN_PROGRESS")]
            InProgress,
            [EnumMember(Value = "SUCCEEDED")]
            Succeeded,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "CANCELING")]
            Canceling,
            [EnumMember(Value = "CANCELED")]
            Canceled
        };

        /// <value>
        /// The current state of the work request. The `SUCCEEDED`, `FAILED`, AND `CANCELED` states
        /// correspond to the action being performed.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// Short message providing more detail for the current status. For example, if an operation fails
        /// this may include information about the reason for the failure and a possible resolution.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "statusMessage")]
        public string StatusMessage { get; set; }
        
        /// <value>
        /// The URI path that the user can do a GET on to access the resource metadata.
        /// </value>
        [JsonProperty(PropertyName = "resourceUri")]
        public string ResourceUri { get; set; }
        
    }
}
