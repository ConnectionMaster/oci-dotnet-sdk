/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AianomalydetectionService.Models
{
    /// <summary>
    /// Detailed information like statistics, metrics and status for a signal
    /// </summary>
    public class PerSignalDetails 
    {
        
        /// <value>
        /// The name of a signal.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SignalName is required.")]
        [JsonProperty(PropertyName = "signalName")]
        public string SignalName { get; set; }
        
        /// <value>
        /// The ratio of missing values in a signal filled/imputed by the IDP algorithm.
        /// </value>
        [JsonProperty(PropertyName = "mviRatio")]
        public System.Double MviRatio { get; set; }
        
        /// <value>
        /// A boolean value to indicate if a signal is quantized or not.
        /// </value>
        [JsonProperty(PropertyName = "isQuantized")]
        public System.Nullable<bool> IsQuantized { get; set; }
        
        /// <value>
        /// Accuracy metric for a signal.
        /// </value>
        [JsonProperty(PropertyName = "fap")]
        public System.Nullable<float> Fap { get; set; }
        
        /// <value>
        /// Min value within a signal.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Min is required.")]
        [JsonProperty(PropertyName = "min")]
        public System.Double Min { get; set; }
        
        /// <value>
        /// Max value within a signal.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Max is required.")]
        [JsonProperty(PropertyName = "max")]
        public System.Double Max { get; set; }
        
        /// <value>
        /// Standard deviation of values within a signal.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Std is required.")]
        [JsonProperty(PropertyName = "std")]
        public System.Double Std { get; set; }
                ///
        /// <value>
        /// Status of the signal:
        ///  * ACCEPTED - the signal is used for training the model
        ///  * DROPPED - the signal does not meet requirement, and is dropped before training the model.
        ///  * OTHER - placeholder for other status
        /// 
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ACCEPTED")]
            Accepted,
            [EnumMember(Value = "DROPPED")]
            Dropped,
            [EnumMember(Value = "OTHER")]
            Other
        };

        /// <value>
        /// Status of the signal:
        ///  * ACCEPTED - the signal is used for training the model
        ///  * DROPPED - the signal does not meet requirement, and is dropped before training the model.
        ///  * OTHER - placeholder for other status
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// detailed information for a signal.
        /// </value>
        [JsonProperty(PropertyName = "details")]
        public string Details { get; set; }
        
    }
}
