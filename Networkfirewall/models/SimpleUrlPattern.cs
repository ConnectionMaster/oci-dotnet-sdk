/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NetworkfirewallService.Models
{
    /// <summary>
    /// Pattern describing an http/https URL or set thereof
    /// as a concatenation of optional host component and optional path component.
    /// <br/>
    /// `*.example.com` will match http://example.com/ and https://foo.example.com/foo?bar.
    /// <br/>
    /// `www.example.com/foo*` will match https://www.example.com/foo and http://www.exampe.com/foobar and https://www.example.com/foo/bar?baz, but not
    /// http://sub.www.example.com/foo or https://www.example.com/FOO.
    /// <br/>
    /// `*.example.com/foo*` will match http://example.com/foo and https://sub2.sub.example.com/foo/bar?baz, but not http://example.com/FOO.
    /// 
    /// </summary>
    public class SimpleUrlPattern : UrlPattern
    {
        
        /// <value>
        /// A string consisting of a concatenation of optional host component and optional path component.
        /// The host component may start with `*.` to match the case-insensitive domain and all its subdomains.
        /// The path component must start with a `/`, and may end with `*` to match all paths of which it is a case-sensitive prefix.
        /// A missing host component matches all request domains, and a missing path component matches all request paths.
        /// An empty value matches all requests.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Pattern is required.")]
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }
        
        [JsonProperty(PropertyName = "type")]
        private readonly string type = "SIMPLE";
    }
}
