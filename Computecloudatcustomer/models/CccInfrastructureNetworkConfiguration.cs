/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ComputecloudatcustomerService.Models
{
    /// <summary>
    /// Configuration information for the Compute Cloud@Customer infrastructure. This 
    /// network configuration information cannot be updated and is retrieved from the data center.
    /// The information will only be available
    /// after the connectionState is transitioned to CONNECTED.
    /// 
    /// </summary>
    public class CccInfrastructureNetworkConfiguration 
    {
        
        /// <value>
        /// Information about the management nodes that are provisioned in the Compute Cloud@Customer
        /// infrastructure.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "managementNodes")]
        public System.Collections.Generic.List<CccInfrastructureManagementNode> ManagementNodes { get; set; }
        
        /// <value>
        /// Uplink port speed defined in gigabytes per second.
        /// All uplink ports must have identical speed.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkPortSpeedInGbps")]
        public System.Nullable<int> UplinkPortSpeedInGbps { get; set; }
        
        /// <value>
        /// Number of uplink ports per spine switch. Connectivity is identical on both spine switches.
        /// For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkPortCount")]
        public System.Nullable<int> UplinkPortCount { get; set; }
        
        /// <value>
        /// The virtual local area network (VLAN) maximum transmission unit (MTU) size
        /// for the uplink ports.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkVlanMtu")]
        public System.Nullable<int> UplinkVlanMtu { get; set; }
        
        /// <value>
        /// Netmask of the subnet that the Compute Cloud@Customer infrastructure is
        /// connected to.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkNetmask")]
        public string UplinkNetmask { get; set; }
                ///
        /// <value>
        /// The port forward error correction (FEC) setting for the uplink port on the
        /// Compute Cloud@Customer infrastructure.
        /// 
        /// </value>
        ///
        public enum UplinkPortForwardErrorCorrectionEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "AUTO")]
            Auto,
            [EnumMember(Value = "FIRE_CODE_FEC")]
            FireCodeFec,
            [EnumMember(Value = "REED_SOLOMON_CONSORTIUM_16")]
            ReedSolomonConsortium16,
            [EnumMember(Value = "REED_SOLOMON_FEC")]
            ReedSolomonFec,
            [EnumMember(Value = "REED_SOLOMON_IEEE")]
            ReedSolomonIeee
        };

        /// <value>
        /// The port forward error correction (FEC) setting for the uplink port on the
        /// Compute Cloud@Customer infrastructure.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkPortForwardErrorCorrection")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<UplinkPortForwardErrorCorrectionEnum> UplinkPortForwardErrorCorrection { get; set; }
        
        /// <value>
        /// Domain name to be used as the base domain for the internal network and by 
        /// public facing services.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkDomain")]
        public string UplinkDomain { get; set; }
        
        /// <value>
        /// Uplink gateway in the datacenter network that the Compute Cloud@Customer
        /// connects to.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "uplinkGatewayIp")]
        public string UplinkGatewayIp { get; set; }
        
        /// <value>
        /// Addresses of the network spine switches.
        /// </value>
        [JsonProperty(PropertyName = "spineIps")]
        public System.Collections.Generic.List<string> SpineIps { get; set; }
        
        /// <value>
        /// The spine switch public virtual IP (VIP). Traffic routed to the
        /// Compute Cloud@Customer infrastructure and 
        /// and virtual cloud networks (VCNs) should have this address as next hop.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "spineVip")]
        public string SpineVip { get; set; }
        
        /// <value>
        /// The hostname corresponding to the virtual IP (VIP) address of the management nodes.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "mgmtVipHostname")]
        public string MgmtVipHostname { get; set; }
        
        /// <value>
        /// The IP address used as the virtual IP (VIP) address of the management nodes.
        /// </value>
        [JsonProperty(PropertyName = "mgmtVipIp")]
        public string MgmtVipIp { get; set; }
        
        /// <value>
        /// The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure
        /// uses for the data center network.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "dnsIps")]
        public System.Collections.Generic.List<string> DnsIps { get; set; }
        
        [JsonProperty(PropertyName = "infrastructureRoutingStatic")]
        public CccInfrastructureRoutingStaticDetails InfrastructureRoutingStatic { get; set; }
        
        [JsonProperty(PropertyName = "infrastructureRoutingDynamic")]
        public CccInfrastructureRoutingDynamicDetails InfrastructureRoutingDynamic { get; set; }
        
    }
}
