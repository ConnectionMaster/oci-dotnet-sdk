/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DistributeddatabaseService.Models
{
    /// <summary>
    /// Globally distributed database shard based on exadbxs.
    /// </summary>
    public class DistributedDatabaseShardWithExadbXs : DistributedDatabaseShard
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Database Home.
        /// </value>
        [JsonProperty(PropertyName = "dbHomeId")]
        public string DbHomeId { get; set; }
        
        /// <value>
        /// The name of the shardGroup for the shard.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShardGroup is required.")]
        [JsonProperty(PropertyName = "shardGroup")]
        public string ShardGroup { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VmCluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VmClusterId is required.")]
        [JsonProperty(PropertyName = "vmClusterId")]
        public string VmClusterId { get; set; }
        
        /// <value>
        /// The shard space name for the Globally distributed database. Shard space for existing shard cannot be changed, once shard is created.
        /// Shard space name shall be used while creation of new shards.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "shardSpace")]
        public string ShardSpace { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `kmsKeyId` are required for Customer Managed Keys.
        /// </value>
        [JsonProperty(PropertyName = "vaultId")]
        public string VaultId { get; set; }
        
        /// <value>
        /// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
        /// </value>
        [JsonProperty(PropertyName = "kmsKeyId")]
        public string KmsKeyId { get; set; }
        
        /// <value>
        /// The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "kmsKeyVersionId")]
        public string KmsKeyVersionId { get; set; }
                ///
        /// <value>
        /// Status of shard based on exadbxs for the Globally ditributed database.
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "CREATED")]
            Created,
            [EnumMember(Value = "READY_FOR_CONFIGURATION")]
            ReadyForConfiguration,
            [EnumMember(Value = "CONFIGURED")]
            Configured,
            [EnumMember(Value = "NEEDS_ATTENTION")]
            NeedsAttention
        };

        /// <value>
        /// Status of shard based on exadbxs for the Globally ditributed database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// the identifier of the underlying supporting resource.
        /// </value>
        [JsonProperty(PropertyName = "supportingResourceId")]
        public string SupportingResourceId { get; set; }
        
        /// <value>
        /// the identifier of the container database for underlying supporting resource.
        /// </value>
        [JsonProperty(PropertyName = "containerDatabaseId")]
        public string ContainerDatabaseId { get; set; }
        
        /// <value>
        /// Peer details for the shard.
        /// </value>
        [JsonProperty(PropertyName = "peerDetails")]
        public System.Collections.Generic.List<ShardPeerWithExadbXs> PeerDetails { get; set; }
        
        [JsonProperty(PropertyName = "metadata")]
        public DistributedDbMetadata Metadata { get; set; }
        
        [JsonProperty(PropertyName = "source")]
        private readonly string source = "EXADB_XS";
    }
}
