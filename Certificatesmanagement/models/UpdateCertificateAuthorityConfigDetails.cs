/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CertificatesmanagementService.Models
{
    /// <summary>
    /// The configuration details for updating a certificate authority (CA).
    /// </summary>
    [JsonConverter(typeof(UpdateCertificateAuthorityConfigDetailsModelConverter))]
    public class UpdateCertificateAuthorityConfigDetails 
    {
        
        
        /// <value>
        /// The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "versionName")]
        public string VersionName { get; set; }
                ///
        /// <value>
        /// The rotation state of the CA. The default is `PENDING`, meaning that the CA is staged and available for use. A CA version
        /// that you mark as `CURRENT` is currently in use, but you don't yet want to rotate it into current, active use. For example,
        /// you might create or update a CA and mark its rotation state as `PENDING` if you haven't yet updated the certificate on the target system.
        /// 
        /// </value>
        ///
        public enum StageEnum {
            [EnumMember(Value = "CURRENT")]
            Current,
            [EnumMember(Value = "PENDING")]
            Pending
        };

        /// <value>
        /// The rotation state of the CA. The default is `PENDING`, meaning that the CA is staged and available for use. A CA version
        /// that you mark as `CURRENT` is currently in use, but you don't yet want to rotate it into current, active use. For example,
        /// you might create or update a CA and mark its rotation state as `PENDING` if you haven't yet updated the certificate on the target system.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "stage")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<StageEnum> Stage { get; set; }
        
    }

    public class UpdateCertificateAuthorityConfigDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(UpdateCertificateAuthorityConfigDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(UpdateCertificateAuthorityConfigDetails);
            var discriminator = jsonObject["configType"].Value<string>();
            switch (discriminator)
            {
                case "SUBORDINATE_CA_ISSUED_BY_INTERNAL_CA":
                    obj = new UpdateSubordinateCaIssuedByInternalCaConfigDetails();
                    break;
                case "ROOT_CA_GENERATED_INTERNALLY":
                    obj = new UpdateRootCaByGeneratingInternallyConfigDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
