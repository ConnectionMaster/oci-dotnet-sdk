/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AdmService.Models
{
    /// <summary>
    /// A vulnerability is a weakness or error in an artifact.
    /// A vulnerability is a generalization of a CVE (every CVE is a vulnerability, but not every vulnerability has a CVE).
    /// 
    /// </summary>
    public class Vulnerability 
    {
        
        /// <value>
        /// Unique vulnerability identifier, e.g. CVE-1999-0067.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Source that published the vulnerability
        /// </value>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }
        
        /// <value>
        /// Common Vulnerability Scoring System (CVSS) Version 2.
        /// </value>
        [JsonProperty(PropertyName = "cvssV2Score")]
        public System.Nullable<float> CvssV2Score { get; set; }
        
        /// <value>
        /// Common Vulnerability Scoring System (CVSS) Version 3.
        /// </value>
        [JsonProperty(PropertyName = "cvssV3Score")]
        public System.Nullable<float> CvssV3Score { get; set; }
        
        /// <value>
        /// ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
        /// </value>
        [JsonProperty(PropertyName = "severity")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<VulnerabilitySeverity> Severity { get; set; }
        
        /// <value>
        /// Indicates if the vulnerability was ignored according to the audit configuration.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsIgnored is required.")]
        [JsonProperty(PropertyName = "isIgnored")]
        public System.Nullable<bool> IsIgnored { get; set; }
        
        /// <value>
        /// Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
        /// </value>
        [JsonProperty(PropertyName = "isFalsePositive")]
        public System.Nullable<bool> IsFalsePositive { get; set; }
        
    }
}
