/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.AdmService.Models
{
    /// <summary>
    /// vulnerability audit summary.
    /// </summary>
    public class VulnerabilityAuditSummary 
    {
        
        /// <value>
        /// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The name of the vulnerability audit.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the knowledge base.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "KnowledgeBaseId is required.")]
        [JsonProperty(PropertyName = "knowledgeBaseId")]
        public string KnowledgeBaseId { get; set; }
        
        /// <value>
        /// The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeUpdated is required.")]
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The current lifecycle state of the vulnerability audit.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<VulnerabilityAudit.LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MaxObservedCvssV2Score is required.")]
        [JsonProperty(PropertyName = "maxObservedCvssV2Score")]
        public System.Nullable<float> MaxObservedCvssV2Score { get; set; }
        
        /// <value>
        /// Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MaxObservedCvssV3Score is required.")]
        [JsonProperty(PropertyName = "maxObservedCvssV3Score")]
        public System.Nullable<float> MaxObservedCvssV3Score { get; set; }
        
        /// <value>
        /// Count of non-ignored vulnerable application dependencies.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VulnerableArtifactsCount is required.")]
        [JsonProperty(PropertyName = "vulnerableArtifactsCount")]
        public System.Nullable<int> VulnerableArtifactsCount { get; set; }
        
        /// <value>
        /// Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MaxObservedCvssV2ScoreWithIgnored is required.")]
        [JsonProperty(PropertyName = "maxObservedCvssV2ScoreWithIgnored")]
        public System.Nullable<float> MaxObservedCvssV2ScoreWithIgnored { get; set; }
        
        /// <value>
        /// Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MaxObservedCvssV3ScoreWithIgnored is required.")]
        [JsonProperty(PropertyName = "maxObservedCvssV3ScoreWithIgnored")]
        public System.Nullable<float> MaxObservedCvssV3ScoreWithIgnored { get; set; }
        
        /// <value>
        /// Count of all vulnerable application dependencies.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VulnerableArtifactsCountWithIgnored is required.")]
        [JsonProperty(PropertyName = "vulnerableArtifactsCountWithIgnored")]
        public System.Nullable<int> VulnerableArtifactsCountWithIgnored { get; set; }
        
        /// <value>
        /// Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
        /// </value>
        [JsonProperty(PropertyName = "isSuccess")]
        public System.Nullable<bool> IsSuccess { get; set; }
        
        /// <value>
        /// Type of the build tool.
        /// </value>
        [JsonProperty(PropertyName = "buildType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<VulnerabilityAudit.BuildTypeEnum> BuildType { get; set; }
        
        /// <value>
        /// The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces.
        /// Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
    }
}
