/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ComputeinstanceagentService.Models
{
    /// <summary>
    /// A command's execution summary.
    /// </summary>
    public class InstanceAgentCommandExecution 
    {
        
        /// <value>
        /// The OCID of the command
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceAgentCommandId is required.")]
        [JsonProperty(PropertyName = "instanceAgentCommandId")]
        public string InstanceAgentCommandId { get; set; }
        
        /// <value>
        /// The OCID of the instance
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceId is required.")]
        [JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }
                ///
        /// <value>
        /// Specifies the command delivery state.
        ///  * `VISIBLE` - The command is visible to instance.
        ///  * `PENDING` - The command is pending ack from the instance.
        ///  * `ACKED` - The command has been received and acked by the instance.
        ///  * `ACKED_CANCELED` - The canceled command has been received and acked by the instance.
        ///  * `EXPIRED` - The instance has not requested for commands and its delivery has expired.
        /// 
        /// </value>
        ///
        public enum DeliveryStateEnum {
            [EnumMember(Value = "VISIBLE")]
            Visible,
            [EnumMember(Value = "PENDING")]
            Pending,
            [EnumMember(Value = "ACKED")]
            Acked,
            [EnumMember(Value = "ACKED_CANCELED")]
            AckedCanceled,
            [EnumMember(Value = "EXPIRED")]
            Expired
        };

        /// <value>
        /// Specifies the command delivery state.
        ///  * `VISIBLE` - The command is visible to instance.
        ///  * `PENDING` - The command is pending ack from the instance.
        ///  * `ACKED` - The command has been received and acked by the instance.
        ///  * `ACKED_CANCELED` - The canceled command has been received and acked by the instance.
        ///  * `EXPIRED` - The instance has not requested for commands and its delivery has expired.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DeliveryState is required.")]
        [JsonProperty(PropertyName = "deliveryState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<DeliveryStateEnum> DeliveryState { get; set; }
                ///
        /// <value>
        /// command execution life cycle state.
        /// * `ACCEPTED` - The command execution has been accepted to run.
        /// * `IN_PROGRESS` - The command execution is in progress.
        /// * `SUCCEEDED` - The command execution is successful.
        /// * `FAILED` - The command execution has failed.
        /// * `TIMED_OUT` - The command execution has timedout.
        /// * `CANCELED` - The command execution has canceled.
        /// 
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "ACCEPTED")]
            Accepted,
            [EnumMember(Value = "IN_PROGRESS")]
            InProgress,
            [EnumMember(Value = "SUCCEEDED")]
            Succeeded,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "TIMED_OUT")]
            TimedOut,
            [EnumMember(Value = "CANCELED")]
            Canceled
        };

        /// <value>
        /// command execution life cycle state.
        /// * `ACCEPTED` - The command execution has been accepted to run.
        /// * `IN_PROGRESS` - The command execution is in progress.
        /// * `SUCCEEDED` - The command execution is successful.
        /// * `FAILED` - The command execution has failed.
        /// * `TIMED_OUT` - The command execution has timedout.
        /// * `CANCELED` - The command execution has canceled.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// The command creation date
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The command last updated at date.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeUpdated is required.")]
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The large non-consecutive number that Run Command Service assigns to each created command.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SequenceNumber is required.")]
        [JsonProperty(PropertyName = "sequenceNumber")]
        public System.Nullable<long> SequenceNumber { get; set; }
        
        /// <value>
        /// The user friendly display name of the command.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Content is required.")]
        [JsonProperty(PropertyName = "content")]
        public InstanceAgentCommandExecutionOutputContent Content { get; set; }
        
    }
}
