/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DesktopsService.Models
{
    /// <summary>
    /// Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
    /// 
    /// </summary>
    public class DesktopDevicePolicy 
    {
                ///
        /// <value>
        /// The clipboard mode.
        /// NONE: No access to the local clipboard is permitted.
        /// TODESKTOP: The clipboard can be used to transfer data to the desktop only. 
        /// FROMDESKTOP: The clipboard can be used to transfer data from the desktop only.
        /// FULL: The clipboard can be used to transfer data to and from the desktop.
        /// 
        /// </value>
        ///
        public enum ClipboardModeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "TODESKTOP")]
            Todesktop,
            [EnumMember(Value = "FROMDESKTOP")]
            Fromdesktop,
            [EnumMember(Value = "FULL")]
            Full
        };

        /// <value>
        /// The clipboard mode.
        /// NONE: No access to the local clipboard is permitted.
        /// TODESKTOP: The clipboard can be used to transfer data to the desktop only. 
        /// FROMDESKTOP: The clipboard can be used to transfer data from the desktop only.
        /// FULL: The clipboard can be used to transfer data to and from the desktop.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ClipboardMode is required.")]
        [JsonProperty(PropertyName = "clipboardMode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ClipboardModeEnum> ClipboardMode { get; set; }
                ///
        /// <value>
        /// The audio mode.
        /// NONE: No access to the local audio devices is permitted.
        /// TODESKTOP: The user may record audio on their desktop. 
        /// FROMDESKTOP: The user may play audio on their desktop.
        /// FULL: The user may play and record audio on their desktop.
        /// 
        /// </value>
        ///
        public enum AudioModeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "TODESKTOP")]
            Todesktop,
            [EnumMember(Value = "FROMDESKTOP")]
            Fromdesktop,
            [EnumMember(Value = "FULL")]
            Full
        };

        /// <value>
        /// The audio mode.
        /// NONE: No access to the local audio devices is permitted.
        /// TODESKTOP: The user may record audio on their desktop. 
        /// FROMDESKTOP: The user may play audio on their desktop.
        /// FULL: The user may play and record audio on their desktop.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AudioMode is required.")]
        [JsonProperty(PropertyName = "audioMode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AudioModeEnum> AudioMode { get; set; }
                ///
        /// <value>
        /// The client local drive access mode.
        /// NONE: No access to local drives permitted.
        /// READONLY: The user may read from local drives on their desktop.
        /// FULL: The user may read from and write to their local drives on their desktop. 
        /// 
        /// </value>
        ///
        public enum CdmModeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "READONLY")]
            Readonly,
            [EnumMember(Value = "FULL")]
            Full
        };

        /// <value>
        /// The client local drive access mode.
        /// NONE: No access to local drives permitted.
        /// READONLY: The user may read from local drives on their desktop.
        /// FULL: The user may read from and write to their local drives on their desktop. 
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CdmMode is required.")]
        [JsonProperty(PropertyName = "cdmMode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<CdmModeEnum> CdmMode { get; set; }
        
        /// <value>
        /// Indicates whether printing is enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsPrintingEnabled is required.")]
        [JsonProperty(PropertyName = "isPrintingEnabled")]
        public System.Nullable<bool> IsPrintingEnabled { get; set; }
        
        /// <value>
        /// Indicates whether the pointer is enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsPointerEnabled is required.")]
        [JsonProperty(PropertyName = "isPointerEnabled")]
        public System.Nullable<bool> IsPointerEnabled { get; set; }
        
        /// <value>
        /// Indicates whether the keyboard is enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsKeyboardEnabled is required.")]
        [JsonProperty(PropertyName = "isKeyboardEnabled")]
        public System.Nullable<bool> IsKeyboardEnabled { get; set; }
        
        /// <value>
        /// Indicates whether the display is enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsDisplayEnabled is required.")]
        [JsonProperty(PropertyName = "isDisplayEnabled")]
        public System.Nullable<bool> IsDisplayEnabled { get; set; }
        
    }
}
