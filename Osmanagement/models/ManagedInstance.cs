/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OsmanagementService.Models
{
    /// <summary>
    /// Detail information for an OCI Compute instance that is being managed
    /// </summary>
    public class ManagedInstance 
    {
        
        /// <value>
        /// Managed Instance identifier
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// OCID for the managed instance
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Information specified by the user about the managed instance
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Time at which the instance last checked in
        /// </value>
        [JsonProperty(PropertyName = "lastCheckin")]
        public string LastCheckin { get; set; }
        
        /// <value>
        /// Time at which the instance last booted
        /// </value>
        [JsonProperty(PropertyName = "lastBoot")]
        public string LastBoot { get; set; }
        
        /// <value>
        /// Number of updates available to be installed
        /// </value>
        [JsonProperty(PropertyName = "updatesAvailable")]
        public System.Nullable<int> UpdatesAvailable { get; set; }
        
        /// <value>
        /// Operating System Name
        /// </value>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }
        
        /// <value>
        /// Operating System Version
        /// </value>
        [JsonProperty(PropertyName = "osVersion")]
        public string OsVersion { get; set; }
        
        /// <value>
        /// Operating System Kernel Version
        /// </value>
        [JsonProperty(PropertyName = "osKernelVersion")]
        public string OsKernelVersion { get; set; }
        
        /// <value>
        /// OCID for the Compartment
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
                ///
        /// <value>
        /// status of the managed instance.
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NORMAL")]
            Normal,
            [EnumMember(Value = "UNREACHABLE")]
            Unreachable,
            [EnumMember(Value = "ERROR")]
            Error,
            [EnumMember(Value = "WARNING")]
            Warning
        };

        /// <value>
        /// status of the managed instance.
        /// </value>
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// the parent (base) Software Source attached to the Managed Instance
        /// </value>
        [JsonProperty(PropertyName = "parentSoftwareSource")]
        public SoftwareSourceId ParentSoftwareSource { get; set; }
        
        /// <value>
        /// list of child Software Sources attached to the Managed Instance
        /// </value>
        [JsonProperty(PropertyName = "childSoftwareSources")]
        public System.Collections.Generic.List<SoftwareSourceId> ChildSoftwareSources { get; set; }
        
        /// <value>
        /// The ids of the managed instance groups of which this instance is a
        /// member.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "managedInstanceGroups")]
        public System.Collections.Generic.List<Id> ManagedInstanceGroups { get; set; }
        
        /// <value>
        /// The Operating System type of the managed instance.
        /// </value>
        [JsonProperty(PropertyName = "osFamily")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<OsFamilies> OsFamily { get; set; }
        
        /// <value>
        /// Indicates whether a reboot is required to complete installation of updates.
        /// </value>
        [JsonProperty(PropertyName = "isRebootRequired")]
        public System.Nullable<bool> IsRebootRequired { get; set; }
        
        /// <value>
        /// OCID of the ONS topic used to send notification to users
        /// </value>
        [JsonProperty(PropertyName = "notificationTopicId")]
        public string NotificationTopicId { get; set; }
        
        /// <value>
        /// The ksplice effective kernel version
        /// </value>
        [JsonProperty(PropertyName = "kspliceEffectiveKernelVersion")]
        public string KspliceEffectiveKernelVersion { get; set; }
        
        /// <value>
        /// True if user allow data collection for this instance
        /// </value>
        [JsonProperty(PropertyName = "isDataCollectionAuthorized")]
        public System.Nullable<bool> IsDataCollectionAuthorized { get; set; }
        
        /// <value>
        /// if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
        /// </value>
        [JsonProperty(PropertyName = "autonomous")]
        public AutonomousSettings Autonomous { get; set; }
        
        /// <value>
        /// Number of security type updates available to be installed
        /// </value>
        [JsonProperty(PropertyName = "securityUpdatesAvailable")]
        public System.Nullable<int> SecurityUpdatesAvailable { get; set; }
        
        /// <value>
        /// Number of bug fix type updates available to be installed
        /// </value>
        [JsonProperty(PropertyName = "bugUpdatesAvailable")]
        public System.Nullable<int> BugUpdatesAvailable { get; set; }
        
        /// <value>
        /// Number of enhancement type updates available to be installed
        /// </value>
        [JsonProperty(PropertyName = "enhancementUpdatesAvailable")]
        public System.Nullable<int> EnhancementUpdatesAvailable { get; set; }
        
        /// <value>
        /// Number of non-classified updates available to be installed
        /// </value>
        [JsonProperty(PropertyName = "otherUpdatesAvailable")]
        public System.Nullable<int> OtherUpdatesAvailable { get; set; }
        
        /// <value>
        /// Number of scheduled jobs associated with this instance
        /// </value>
        [JsonProperty(PropertyName = "scheduledJobCount")]
        public System.Nullable<int> ScheduledJobCount { get; set; }
        
        /// <value>
        /// Number of work requests associated with this instance
        /// </value>
        [JsonProperty(PropertyName = "workRequestCount")]
        public System.Nullable<int> WorkRequestCount { get; set; }
        
    }
}
