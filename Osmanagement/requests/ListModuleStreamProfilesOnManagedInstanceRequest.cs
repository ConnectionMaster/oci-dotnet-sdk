/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Oci.OsmanagementService.Models;

namespace Oci.OsmanagementService.Requests
{
    /// <example>
    /// Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/osmanagement/ListModuleStreamProfilesOnManagedInstance.cs.html">here</a> to see an example of how to use ListModuleStreamProfilesOnManagedInstance request.
    /// </example>
    public class ListModuleStreamProfilesOnManagedInstanceRequest : Oci.Common.IOciRequest
    {
        
        /// <value>
        /// OCID for the managed instance
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ManagedInstanceId is required.")]
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Path, "managedInstanceId")]
        public string ManagedInstanceId { get; set; }
        
        /// <value>
        /// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The name of a module.  This parameter is required if a
        /// streamName is specified.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "moduleName")]
        public string ModuleName { get; set; }
        
        /// <value>
        /// The name of the stream of the containing module.  This parameter
        /// is required if a profileName is specified.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "streamName")]
        public string StreamName { get; set; }
        
        /// <value>
        /// The name of the profile of the containing module stream
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "profileName")]
        public string ProfileName { get; set; }
        
        ///
        /// <value>
        /// The status of the profile.
        /// <br/>
        /// A profile with the \"INSTALLED\" status indicates that the
        /// profile has been installed.
        /// <br/>
        /// A profile with the \"AVAILABLE\" status indicates that the
        /// profile is not installed, but can be.
        /// 
        /// </value>
        ///
        public enum ProfileStatusEnum {
            [EnumMember(Value = "INSTALLED")]
            Installed,
            [EnumMember(Value = "AVAILABLE")]
            Available
        };

        /// <value>
        /// The status of the profile.
        /// <br/>
        /// A profile with the \"INSTALLED\" status indicates that the
        /// profile has been installed.
        /// <br/>
        /// A profile with the \"AVAILABLE\" status indicates that the
        /// profile is not installed, but can be.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "profileStatus")]
        public System.Nullable<ProfileStatusEnum> ProfileStatus { get; set; }
        
        /// <value>
        /// The maximum number of items to return.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "limit")]
        public System.Nullable<int> Limit { get; set; }
        
        /// <value>
        /// The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "page")]
        public string Page { get; set; }
        
        ///
        /// <value>
        /// The sort order to use, either 'asc' or 'desc'.
        /// </value>
        ///
        public enum SortOrderEnum {
            [EnumMember(Value = "ASC")]
            Asc,
            [EnumMember(Value = "DESC")]
            Desc
        };

        /// <value>
        /// The sort order to use, either 'asc' or 'desc'.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortOrder")]
        public System.Nullable<SortOrderEnum> SortOrder { get; set; }
        
        ///
        /// <value>
        /// The field to sort by. Only one sort order may be provided. Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. If no value is specified TIMECREATED is default.
        /// 
        /// </value>
        ///
        public enum SortByEnum {
            [EnumMember(Value = "TIMECREATED")]
            Timecreated,
            [EnumMember(Value = "DISPLAYNAME")]
            Displayname
        };

        /// <value>
        /// The field to sort by. Only one sort order may be provided. Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. If no value is specified TIMECREATED is default.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortBy")]
        public System.Nullable<SortByEnum> SortBy { get; set; }
        
        /// <value>
        /// The client request ID for tracing.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Header, "opc-request-id")]
        public string OpcRequestId { get; set; }
    }
}
