/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DatabaseService.Models
{
    /// <summary>
    /// Details for the database upgrade source.
    /// 
    /// </summary>
    [JsonConverter(typeof(DatabaseUpgradeSourceBaseModelConverter))]
    public class DatabaseUpgradeSourceBase 
    {
                ///
        /// <value>
        /// The source of the Oracle Database software to be used for the upgrade.
        ///  - Use `DB_HOME` to specify an existing Database Home to upgrade the database. The database is moved to the target Database Home and makes use of the Oracle Database software version of the target Database Home.
        ///  - Use `DB_VERSION` to specify a generally-available Oracle Database software version to upgrade the database.
        ///  - Use `DB_SOFTWARE_IMAGE` to specify a [database software image](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/databasesoftwareimage.htm) to upgrade the database.
        /// 
        /// </value>
        ///
        public enum SourceEnum {
            [EnumMember(Value = "DB_HOME")]
            DbHome,
            [EnumMember(Value = "DB_VERSION")]
            DbVersion,
            [EnumMember(Value = "DB_SOFTWARE_IMAGE")]
            DbSoftwareImage
        };

        
        /// <value>
        /// Additional upgrade options supported by DBUA(Database Upgrade Assistant).
        /// Example: &quot;-upgradeTimezone false -keepEvents&quot;
        /// </value>
        [JsonProperty(PropertyName = "options")]
        public string Options { get; set; }
        
    }

    public class DatabaseUpgradeSourceBaseModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DatabaseUpgradeSourceBase);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DatabaseUpgradeSourceBase);
            var discriminator = jsonObject["source"].Value<string>();
            switch (discriminator)
            {
                case "DB_HOME":
                    obj = new DatabaseUpgradeWithDbHomeDetails();
                    break;
                case "DB_SOFTWARE_IMAGE":
                    obj = new DatabaseUpgradeWithDatabaseSoftwareImageDetails();
                    break;
                case "DB_VERSION":
                    obj = new DatabaseUpgradeWithDbVersionDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
