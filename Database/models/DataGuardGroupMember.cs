/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabaseService.Models
{
    /// <summary>
    /// The member of a Data Guard group. Represents either a PRIMARY or a STANDBY Data Guard instance.
    /// </summary>
    public class DataGuardGroupMember 
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the DB system, Cloud VM cluster or VM cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DbSystemId is required.")]
        [JsonProperty(PropertyName = "dbSystemId")]
        public string DbSystemId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DatabaseId is required.")]
        [JsonProperty(PropertyName = "databaseId")]
        public string DatabaseId { get; set; }
                ///
        /// <value>
        /// The role of the reporting database in this Data Guard association.
        /// </value>
        ///
        public enum RoleEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "PRIMARY")]
            Primary,
            [EnumMember(Value = "STANDBY")]
            Standby,
            [EnumMember(Value = "DISABLED_STANDBY")]
            DisabledStandby,
            [EnumMember(Value = "SNAPSHOT_STANDBY")]
            SnapshotStandby
        };

        /// <value>
        /// The role of the reporting database in this Data Guard association.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Role is required.")]
        [JsonProperty(PropertyName = "role")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<RoleEnum> Role { get; set; }
        
        /// <value>
        /// The lag time between updates to the primary database and application of the redo data on the standby database,
        /// as computed by the reporting database.
        /// <br/>
        /// Example: 1 second
        /// </value>
        [JsonProperty(PropertyName = "applyLag")]
        public string ApplyLag { get; set; }
        
        /// <value>
        /// The rate at which redo logs are synced between the associated databases.
        /// <br/>
        /// Example: 102.96 MByte/s
        /// </value>
        [JsonProperty(PropertyName = "applyRate")]
        public string ApplyRate { get; set; }
        
        /// <value>
        /// The rate at which redo logs are transported between the associated databases.
        /// <br/>
        /// Example: 1 second
        /// </value>
        [JsonProperty(PropertyName = "transportLag")]
        public string TransportLag { get; set; }
        
        /// <value>
        /// The date and time when last redo transport has been done.
        /// </value>
        [JsonProperty(PropertyName = "transportLagRefresh")]
        public string TransportLagRefresh { get; set; }
                ///
        /// <value>
        /// The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
        /// <br/>
        /// * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
        /// * MAXIMUM_PERFORMANCE - ASYNC
        /// * MAXIMUM_PROTECTION - SYNC
        /// <br/>
        /// For more information, see
        /// [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400)
        /// in the Oracle Data Guard documentation.
        /// <br/>
        /// **IMPORTANT** - The only transport type currently supported by the Database service is ASYNC.
        /// 
        /// </value>
        ///
        public enum TransportTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SYNC")]
            Sync,
            [EnumMember(Value = "ASYNC")]
            Async,
            [EnumMember(Value = "FASTSYNC")]
            Fastsync
        };

        /// <value>
        /// The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
        /// <br/>
        /// * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
        /// * MAXIMUM_PERFORMANCE - ASYNC
        /// * MAXIMUM_PROTECTION - SYNC
        /// <br/>
        /// For more information, see
        /// [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400)
        /// in the Oracle Data Guard documentation.
        /// <br/>
        /// **IMPORTANT** - The only transport type currently supported by the Database service is ASYNC.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "transportType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TransportTypeEnum> TransportType { get; set; }
        
        /// <value>
        /// True if active Data Guard is enabled.
        /// </value>
        [JsonProperty(PropertyName = "isActiveDataGuardEnabled")]
        public System.Nullable<bool> IsActiveDataGuardEnabled { get; set; }
        
    }
}
