/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.DatabaseService.Models;
using Oci.DatabaseService.Requests;
using Oci.DatabaseService.Responses;

namespace Oci.DatabaseService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Database.
    /// </summary>
    public class DatabaseWaiters
    {
        private readonly DatabaseClient client;
        private readonly Oci.WorkrequestsService.WorkRequestClient workRequestClient;

        public  DatabaseWaiters(DatabaseClient client, Oci.WorkrequestsService.WorkRequestClient workRequestClient)
        {
            this.client = client;
            this.workRequestClient = workRequestClient;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ActivateExadataInfrastructureRequest, ActivateExadataInfrastructureResponse> ForActivateExadataInfrastructure(ActivateExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForActivateExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ActivateExadataInfrastructureRequest, ActivateExadataInfrastructureResponse> ForActivateExadataInfrastructure(ActivateExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ActivateExadataInfrastructureRequest, ActivateExadataInfrastructureResponse>(() =>
            {
                var response = client.ActivateExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStandbyAutonomousContainerDatabaseRequest, AddStandbyAutonomousContainerDatabaseResponse> ForAddStandbyAutonomousContainerDatabase(AddStandbyAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAddStandbyAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStandbyAutonomousContainerDatabaseRequest, AddStandbyAutonomousContainerDatabaseResponse> ForAddStandbyAutonomousContainerDatabase(AddStandbyAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AddStandbyAutonomousContainerDatabaseRequest, AddStandbyAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.AddStandbyAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStorageCapacityCloudExadataInfrastructureRequest, AddStorageCapacityCloudExadataInfrastructureResponse> ForAddStorageCapacityCloudExadataInfrastructure(AddStorageCapacityCloudExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAddStorageCapacityCloudExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStorageCapacityCloudExadataInfrastructureRequest, AddStorageCapacityCloudExadataInfrastructureResponse> ForAddStorageCapacityCloudExadataInfrastructure(AddStorageCapacityCloudExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AddStorageCapacityCloudExadataInfrastructureRequest, AddStorageCapacityCloudExadataInfrastructureResponse>(() =>
            {
                var response = client.AddStorageCapacityCloudExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStorageCapacityExadataInfrastructureRequest, AddStorageCapacityExadataInfrastructureResponse> ForAddStorageCapacityExadataInfrastructure(AddStorageCapacityExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAddStorageCapacityExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddStorageCapacityExadataInfrastructureRequest, AddStorageCapacityExadataInfrastructureResponse> ForAddStorageCapacityExadataInfrastructure(AddStorageCapacityExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AddStorageCapacityExadataInfrastructureRequest, AddStorageCapacityExadataInfrastructureResponse>(() =>
            {
                var response = client.AddStorageCapacityExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddVirtualMachineToCloudVmClusterRequest, AddVirtualMachineToCloudVmClusterResponse> ForAddVirtualMachineToCloudVmCluster(AddVirtualMachineToCloudVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAddVirtualMachineToCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddVirtualMachineToCloudVmClusterRequest, AddVirtualMachineToCloudVmClusterResponse> ForAddVirtualMachineToCloudVmCluster(AddVirtualMachineToCloudVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AddVirtualMachineToCloudVmClusterRequest, AddVirtualMachineToCloudVmClusterResponse>(() =>
            {
                var response = client.AddVirtualMachineToCloudVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddVirtualMachineToVmClusterRequest, AddVirtualMachineToVmClusterResponse> ForAddVirtualMachineToVmCluster(AddVirtualMachineToVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAddVirtualMachineToVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AddVirtualMachineToVmClusterRequest, AddVirtualMachineToVmClusterResponse> ForAddVirtualMachineToVmCluster(AddVirtualMachineToVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AddVirtualMachineToVmClusterRequest, AddVirtualMachineToVmClusterResponse>(() =>
            {
                var response = client.AddVirtualMachineToVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AutonomousDatabaseManualRefreshRequest, AutonomousDatabaseManualRefreshResponse> ForAutonomousDatabaseManualRefresh(AutonomousDatabaseManualRefreshRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForAutonomousDatabaseManualRefresh(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<AutonomousDatabaseManualRefreshRequest, AutonomousDatabaseManualRefreshResponse> ForAutonomousDatabaseManualRefresh(AutonomousDatabaseManualRefreshRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<AutonomousDatabaseManualRefreshRequest, AutonomousDatabaseManualRefreshResponse>(() =>
            {
                var response = client.AutonomousDatabaseManualRefresh(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CancelBackupRequest, CancelBackupResponse> ForCancelBackup(CancelBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCancelBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CancelBackupRequest, CancelBackupResponse> ForCancelBackup(CancelBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CancelBackupRequest, CancelBackupResponse>(() =>
            {
                var response = client.CancelBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CancelExecutionWindowRequest, CancelExecutionWindowResponse> ForCancelExecutionWindow(CancelExecutionWindowRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCancelExecutionWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CancelExecutionWindowRequest, CancelExecutionWindowResponse> ForCancelExecutionWindow(CancelExecutionWindowRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CancelExecutionWindowRequest, CancelExecutionWindowResponse>(() =>
            {
                var response = client.CancelExecutionWindow(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CascadingDeleteSchedulingPlanRequest, CascadingDeleteSchedulingPlanResponse> ForCascadingDeleteSchedulingPlan(CascadingDeleteSchedulingPlanRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCascadingDeleteSchedulingPlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CascadingDeleteSchedulingPlanRequest, CascadingDeleteSchedulingPlanResponse> ForCascadingDeleteSchedulingPlan(CascadingDeleteSchedulingPlanRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CascadingDeleteSchedulingPlanRequest, CascadingDeleteSchedulingPlanResponse>(() =>
            {
                var response = client.CascadingDeleteSchedulingPlan(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousContainerDatabaseCompartmentRequest, ChangeAutonomousContainerDatabaseCompartmentResponse> ForChangeAutonomousContainerDatabaseCompartment(ChangeAutonomousContainerDatabaseCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousContainerDatabaseCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousContainerDatabaseCompartmentRequest, ChangeAutonomousContainerDatabaseCompartmentResponse> ForChangeAutonomousContainerDatabaseCompartment(ChangeAutonomousContainerDatabaseCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousContainerDatabaseCompartmentRequest, ChangeAutonomousContainerDatabaseCompartmentResponse>(() =>
            {
                var response = client.ChangeAutonomousContainerDatabaseCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseCompartmentRequest, ChangeAutonomousDatabaseCompartmentResponse> ForChangeAutonomousDatabaseCompartment(ChangeAutonomousDatabaseCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousDatabaseCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseCompartmentRequest, ChangeAutonomousDatabaseCompartmentResponse> ForChangeAutonomousDatabaseCompartment(ChangeAutonomousDatabaseCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousDatabaseCompartmentRequest, ChangeAutonomousDatabaseCompartmentResponse>(() =>
            {
                var response = client.ChangeAutonomousDatabaseCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseSoftwareImageCompartmentRequest, ChangeAutonomousDatabaseSoftwareImageCompartmentResponse> ForChangeAutonomousDatabaseSoftwareImageCompartment(ChangeAutonomousDatabaseSoftwareImageCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousDatabaseSoftwareImageCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseSoftwareImageCompartmentRequest, ChangeAutonomousDatabaseSoftwareImageCompartmentResponse> ForChangeAutonomousDatabaseSoftwareImageCompartment(ChangeAutonomousDatabaseSoftwareImageCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousDatabaseSoftwareImageCompartmentRequest, ChangeAutonomousDatabaseSoftwareImageCompartmentResponse>(() =>
            {
                var response = client.ChangeAutonomousDatabaseSoftwareImageCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseSubscriptionRequest, ChangeAutonomousDatabaseSubscriptionResponse> ForChangeAutonomousDatabaseSubscription(ChangeAutonomousDatabaseSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousDatabaseSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousDatabaseSubscriptionRequest, ChangeAutonomousDatabaseSubscriptionResponse> ForChangeAutonomousDatabaseSubscription(ChangeAutonomousDatabaseSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousDatabaseSubscriptionRequest, ChangeAutonomousDatabaseSubscriptionResponse>(() =>
            {
                var response = client.ChangeAutonomousDatabaseSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousExadataInfrastructureCompartmentRequest, ChangeAutonomousExadataInfrastructureCompartmentResponse> ForChangeAutonomousExadataInfrastructureCompartment(ChangeAutonomousExadataInfrastructureCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousExadataInfrastructureCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousExadataInfrastructureCompartmentRequest, ChangeAutonomousExadataInfrastructureCompartmentResponse> ForChangeAutonomousExadataInfrastructureCompartment(ChangeAutonomousExadataInfrastructureCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousExadataInfrastructureCompartmentRequest, ChangeAutonomousExadataInfrastructureCompartmentResponse>(() =>
            {
                var response = client.ChangeAutonomousExadataInfrastructureCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousVmClusterCompartmentRequest, ChangeAutonomousVmClusterCompartmentResponse> ForChangeAutonomousVmClusterCompartment(ChangeAutonomousVmClusterCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeAutonomousVmClusterCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeAutonomousVmClusterCompartmentRequest, ChangeAutonomousVmClusterCompartmentResponse> ForChangeAutonomousVmClusterCompartment(ChangeAutonomousVmClusterCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeAutonomousVmClusterCompartmentRequest, ChangeAutonomousVmClusterCompartmentResponse>(() =>
            {
                var response = client.ChangeAutonomousVmClusterCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeBackupDestinationCompartmentRequest, ChangeBackupDestinationCompartmentResponse> ForChangeBackupDestinationCompartment(ChangeBackupDestinationCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeBackupDestinationCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeBackupDestinationCompartmentRequest, ChangeBackupDestinationCompartmentResponse> ForChangeBackupDestinationCompartment(ChangeBackupDestinationCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeBackupDestinationCompartmentRequest, ChangeBackupDestinationCompartmentResponse>(() =>
            {
                var response = client.ChangeBackupDestinationCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudAutonomousVmClusterCompartmentRequest, ChangeCloudAutonomousVmClusterCompartmentResponse> ForChangeCloudAutonomousVmClusterCompartment(ChangeCloudAutonomousVmClusterCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudAutonomousVmClusterCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudAutonomousVmClusterCompartmentRequest, ChangeCloudAutonomousVmClusterCompartmentResponse> ForChangeCloudAutonomousVmClusterCompartment(ChangeCloudAutonomousVmClusterCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudAutonomousVmClusterCompartmentRequest, ChangeCloudAutonomousVmClusterCompartmentResponse>(() =>
            {
                var response = client.ChangeCloudAutonomousVmClusterCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudAutonomousVmClusterSubscriptionRequest, ChangeCloudAutonomousVmClusterSubscriptionResponse> ForChangeCloudAutonomousVmClusterSubscription(ChangeCloudAutonomousVmClusterSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudAutonomousVmClusterSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudAutonomousVmClusterSubscriptionRequest, ChangeCloudAutonomousVmClusterSubscriptionResponse> ForChangeCloudAutonomousVmClusterSubscription(ChangeCloudAutonomousVmClusterSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudAutonomousVmClusterSubscriptionRequest, ChangeCloudAutonomousVmClusterSubscriptionResponse>(() =>
            {
                var response = client.ChangeCloudAutonomousVmClusterSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudExadataInfrastructureCompartmentRequest, ChangeCloudExadataInfrastructureCompartmentResponse> ForChangeCloudExadataInfrastructureCompartment(ChangeCloudExadataInfrastructureCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudExadataInfrastructureCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudExadataInfrastructureCompartmentRequest, ChangeCloudExadataInfrastructureCompartmentResponse> ForChangeCloudExadataInfrastructureCompartment(ChangeCloudExadataInfrastructureCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudExadataInfrastructureCompartmentRequest, ChangeCloudExadataInfrastructureCompartmentResponse>(() =>
            {
                var response = client.ChangeCloudExadataInfrastructureCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudExadataInfrastructureSubscriptionRequest, ChangeCloudExadataInfrastructureSubscriptionResponse> ForChangeCloudExadataInfrastructureSubscription(ChangeCloudExadataInfrastructureSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudExadataInfrastructureSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudExadataInfrastructureSubscriptionRequest, ChangeCloudExadataInfrastructureSubscriptionResponse> ForChangeCloudExadataInfrastructureSubscription(ChangeCloudExadataInfrastructureSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudExadataInfrastructureSubscriptionRequest, ChangeCloudExadataInfrastructureSubscriptionResponse>(() =>
            {
                var response = client.ChangeCloudExadataInfrastructureSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudVmClusterCompartmentRequest, ChangeCloudVmClusterCompartmentResponse> ForChangeCloudVmClusterCompartment(ChangeCloudVmClusterCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudVmClusterCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudVmClusterCompartmentRequest, ChangeCloudVmClusterCompartmentResponse> ForChangeCloudVmClusterCompartment(ChangeCloudVmClusterCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudVmClusterCompartmentRequest, ChangeCloudVmClusterCompartmentResponse>(() =>
            {
                var response = client.ChangeCloudVmClusterCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudVmClusterSubscriptionRequest, ChangeCloudVmClusterSubscriptionResponse> ForChangeCloudVmClusterSubscription(ChangeCloudVmClusterSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeCloudVmClusterSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeCloudVmClusterSubscriptionRequest, ChangeCloudVmClusterSubscriptionResponse> ForChangeCloudVmClusterSubscription(ChangeCloudVmClusterSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeCloudVmClusterSubscriptionRequest, ChangeCloudVmClusterSubscriptionResponse>(() =>
            {
                var response = client.ChangeCloudVmClusterSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDatabaseSoftwareImageCompartmentRequest, ChangeDatabaseSoftwareImageCompartmentResponse> ForChangeDatabaseSoftwareImageCompartment(ChangeDatabaseSoftwareImageCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDatabaseSoftwareImageCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDatabaseSoftwareImageCompartmentRequest, ChangeDatabaseSoftwareImageCompartmentResponse> ForChangeDatabaseSoftwareImageCompartment(ChangeDatabaseSoftwareImageCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDatabaseSoftwareImageCompartmentRequest, ChangeDatabaseSoftwareImageCompartmentResponse>(() =>
            {
                var response = client.ChangeDatabaseSoftwareImageCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDataguardRoleRequest, ChangeDataguardRoleResponse> ForChangeDataguardRole(ChangeDataguardRoleRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDataguardRole(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDataguardRoleRequest, ChangeDataguardRoleResponse> ForChangeDataguardRole(ChangeDataguardRoleRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDataguardRoleRequest, ChangeDataguardRoleResponse>(() =>
            {
                var response = client.ChangeDataguardRole(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDbSystemCompartmentRequest, ChangeDbSystemCompartmentResponse> ForChangeDbSystemCompartment(ChangeDbSystemCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDbSystemCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDbSystemCompartmentRequest, ChangeDbSystemCompartmentResponse> ForChangeDbSystemCompartment(ChangeDbSystemCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDbSystemCompartmentRequest, ChangeDbSystemCompartmentResponse>(() =>
            {
                var response = client.ChangeDbSystemCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDisasterRecoveryConfigurationRequest, ChangeDisasterRecoveryConfigurationResponse> ForChangeDisasterRecoveryConfiguration(ChangeDisasterRecoveryConfigurationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDisasterRecoveryConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDisasterRecoveryConfigurationRequest, ChangeDisasterRecoveryConfigurationResponse> ForChangeDisasterRecoveryConfiguration(ChangeDisasterRecoveryConfigurationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDisasterRecoveryConfigurationRequest, ChangeDisasterRecoveryConfigurationResponse>(() =>
            {
                var response = client.ChangeDisasterRecoveryConfiguration(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeEncryptionKeyLocationRequest, ChangeEncryptionKeyLocationResponse> ForChangeEncryptionKeyLocation(ChangeEncryptionKeyLocationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeEncryptionKeyLocation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeEncryptionKeyLocationRequest, ChangeEncryptionKeyLocationResponse> ForChangeEncryptionKeyLocation(ChangeEncryptionKeyLocationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeEncryptionKeyLocationRequest, ChangeEncryptionKeyLocationResponse>(() =>
            {
                var response = client.ChangeEncryptionKeyLocation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadataInfrastructureCompartmentRequest, ChangeExadataInfrastructureCompartmentResponse> ForChangeExadataInfrastructureCompartment(ChangeExadataInfrastructureCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExadataInfrastructureCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadataInfrastructureCompartmentRequest, ChangeExadataInfrastructureCompartmentResponse> ForChangeExadataInfrastructureCompartment(ChangeExadataInfrastructureCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExadataInfrastructureCompartmentRequest, ChangeExadataInfrastructureCompartmentResponse>(() =>
            {
                var response = client.ChangeExadataInfrastructureCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadbVmClusterCompartmentRequest, ChangeExadbVmClusterCompartmentResponse> ForChangeExadbVmClusterCompartment(ChangeExadbVmClusterCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExadbVmClusterCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadbVmClusterCompartmentRequest, ChangeExadbVmClusterCompartmentResponse> ForChangeExadbVmClusterCompartment(ChangeExadbVmClusterCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExadbVmClusterCompartmentRequest, ChangeExadbVmClusterCompartmentResponse>(() =>
            {
                var response = client.ChangeExadbVmClusterCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadbVmClusterSubscriptionRequest, ChangeExadbVmClusterSubscriptionResponse> ForChangeExadbVmClusterSubscription(ChangeExadbVmClusterSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExadbVmClusterSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExadbVmClusterSubscriptionRequest, ChangeExadbVmClusterSubscriptionResponse> ForChangeExadbVmClusterSubscription(ChangeExadbVmClusterSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExadbVmClusterSubscriptionRequest, ChangeExadbVmClusterSubscriptionResponse>(() =>
            {
                var response = client.ChangeExadbVmClusterSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExascaleDbStorageVaultCompartmentRequest, ChangeExascaleDbStorageVaultCompartmentResponse> ForChangeExascaleDbStorageVaultCompartment(ChangeExascaleDbStorageVaultCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExascaleDbStorageVaultCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExascaleDbStorageVaultCompartmentRequest, ChangeExascaleDbStorageVaultCompartmentResponse> ForChangeExascaleDbStorageVaultCompartment(ChangeExascaleDbStorageVaultCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExascaleDbStorageVaultCompartmentRequest, ChangeExascaleDbStorageVaultCompartmentResponse>(() =>
            {
                var response = client.ChangeExascaleDbStorageVaultCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExascaleDbStorageVaultSubscriptionRequest, ChangeExascaleDbStorageVaultSubscriptionResponse> ForChangeExascaleDbStorageVaultSubscription(ChangeExascaleDbStorageVaultSubscriptionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExascaleDbStorageVaultSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExascaleDbStorageVaultSubscriptionRequest, ChangeExascaleDbStorageVaultSubscriptionResponse> ForChangeExascaleDbStorageVaultSubscription(ChangeExascaleDbStorageVaultSubscriptionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExascaleDbStorageVaultSubscriptionRequest, ChangeExascaleDbStorageVaultSubscriptionResponse>(() =>
            {
                var response = client.ChangeExascaleDbStorageVaultSubscription(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalContainerDatabaseCompartmentRequest, ChangeExternalContainerDatabaseCompartmentResponse> ForChangeExternalContainerDatabaseCompartment(ChangeExternalContainerDatabaseCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExternalContainerDatabaseCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalContainerDatabaseCompartmentRequest, ChangeExternalContainerDatabaseCompartmentResponse> ForChangeExternalContainerDatabaseCompartment(ChangeExternalContainerDatabaseCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExternalContainerDatabaseCompartmentRequest, ChangeExternalContainerDatabaseCompartmentResponse>(() =>
            {
                var response = client.ChangeExternalContainerDatabaseCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalNonContainerDatabaseCompartmentRequest, ChangeExternalNonContainerDatabaseCompartmentResponse> ForChangeExternalNonContainerDatabaseCompartment(ChangeExternalNonContainerDatabaseCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExternalNonContainerDatabaseCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalNonContainerDatabaseCompartmentRequest, ChangeExternalNonContainerDatabaseCompartmentResponse> ForChangeExternalNonContainerDatabaseCompartment(ChangeExternalNonContainerDatabaseCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExternalNonContainerDatabaseCompartmentRequest, ChangeExternalNonContainerDatabaseCompartmentResponse>(() =>
            {
                var response = client.ChangeExternalNonContainerDatabaseCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalPluggableDatabaseCompartmentRequest, ChangeExternalPluggableDatabaseCompartmentResponse> ForChangeExternalPluggableDatabaseCompartment(ChangeExternalPluggableDatabaseCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeExternalPluggableDatabaseCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeExternalPluggableDatabaseCompartmentRequest, ChangeExternalPluggableDatabaseCompartmentResponse> ForChangeExternalPluggableDatabaseCompartment(ChangeExternalPluggableDatabaseCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeExternalPluggableDatabaseCompartmentRequest, ChangeExternalPluggableDatabaseCompartmentResponse>(() =>
            {
                var response = client.ChangeExternalPluggableDatabaseCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeKeyStoreCompartmentRequest, ChangeKeyStoreCompartmentResponse> ForChangeKeyStoreCompartment(ChangeKeyStoreCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeKeyStoreCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeKeyStoreCompartmentRequest, ChangeKeyStoreCompartmentResponse> ForChangeKeyStoreCompartment(ChangeKeyStoreCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeKeyStoreCompartmentRequest, ChangeKeyStoreCompartmentResponse>(() =>
            {
                var response = client.ChangeKeyStoreCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeKeyStoreTypeRequest, ChangeKeyStoreTypeResponse> ForChangeKeyStoreType(ChangeKeyStoreTypeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeKeyStoreType(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeKeyStoreTypeRequest, ChangeKeyStoreTypeResponse> ForChangeKeyStoreType(ChangeKeyStoreTypeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeKeyStoreTypeRequest, ChangeKeyStoreTypeResponse>(() =>
            {
                var response = client.ChangeKeyStoreType(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeOneoffPatchCompartmentRequest, ChangeOneoffPatchCompartmentResponse> ForChangeOneoffPatchCompartment(ChangeOneoffPatchCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeOneoffPatchCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeOneoffPatchCompartmentRequest, ChangeOneoffPatchCompartmentResponse> ForChangeOneoffPatchCompartment(ChangeOneoffPatchCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeOneoffPatchCompartmentRequest, ChangeOneoffPatchCompartmentResponse>(() =>
            {
                var response = client.ChangeOneoffPatchCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSchedulingPlanCompartmentRequest, ChangeSchedulingPlanCompartmentResponse> ForChangeSchedulingPlanCompartment(ChangeSchedulingPlanCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeSchedulingPlanCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSchedulingPlanCompartmentRequest, ChangeSchedulingPlanCompartmentResponse> ForChangeSchedulingPlanCompartment(ChangeSchedulingPlanCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeSchedulingPlanCompartmentRequest, ChangeSchedulingPlanCompartmentResponse>(() =>
            {
                var response = client.ChangeSchedulingPlanCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSchedulingPolicyCompartmentRequest, ChangeSchedulingPolicyCompartmentResponse> ForChangeSchedulingPolicyCompartment(ChangeSchedulingPolicyCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeSchedulingPolicyCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSchedulingPolicyCompartmentRequest, ChangeSchedulingPolicyCompartmentResponse> ForChangeSchedulingPolicyCompartment(ChangeSchedulingPolicyCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeSchedulingPolicyCompartmentRequest, ChangeSchedulingPolicyCompartmentResponse>(() =>
            {
                var response = client.ChangeSchedulingPolicyCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVmClusterCompartmentRequest, ChangeVmClusterCompartmentResponse> ForChangeVmClusterCompartment(ChangeVmClusterCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeVmClusterCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVmClusterCompartmentRequest, ChangeVmClusterCompartmentResponse> ForChangeVmClusterCompartment(ChangeVmClusterCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeVmClusterCompartmentRequest, ChangeVmClusterCompartmentResponse>(() =>
            {
                var response = client.ChangeVmClusterCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CheckExternalDatabaseConnectorConnectionStatusRequest, CheckExternalDatabaseConnectorConnectionStatusResponse> ForCheckExternalDatabaseConnectorConnectionStatus(CheckExternalDatabaseConnectorConnectionStatusRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCheckExternalDatabaseConnectorConnectionStatus(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CheckExternalDatabaseConnectorConnectionStatusRequest, CheckExternalDatabaseConnectorConnectionStatusResponse> ForCheckExternalDatabaseConnectorConnectionStatus(CheckExternalDatabaseConnectorConnectionStatusRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CheckExternalDatabaseConnectorConnectionStatusRequest, CheckExternalDatabaseConnectorConnectionStatusResponse>(() =>
            {
                var response = client.CheckExternalDatabaseConnectorConnectionStatus(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CompleteExternalBackupJobRequest, CompleteExternalBackupJobResponse> ForCompleteExternalBackupJob(CompleteExternalBackupJobRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCompleteExternalBackupJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CompleteExternalBackupJobRequest, CompleteExternalBackupJobResponse> ForCompleteExternalBackupJob(CompleteExternalBackupJobRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CompleteExternalBackupJobRequest, CompleteExternalBackupJobResponse>(() =>
            {
                var response = client.CompleteExternalBackupJob(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureAutonomousDatabaseVaultKeyRequest, ConfigureAutonomousDatabaseVaultKeyResponse> ForConfigureAutonomousDatabaseVaultKey(ConfigureAutonomousDatabaseVaultKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConfigureAutonomousDatabaseVaultKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureAutonomousDatabaseVaultKeyRequest, ConfigureAutonomousDatabaseVaultKeyResponse> ForConfigureAutonomousDatabaseVaultKey(ConfigureAutonomousDatabaseVaultKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConfigureAutonomousDatabaseVaultKeyRequest, ConfigureAutonomousDatabaseVaultKeyResponse>(() =>
            {
                var response = client.ConfigureAutonomousDatabaseVaultKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureExascaleExadataInfrastructureRequest, ConfigureExascaleExadataInfrastructureResponse> ForConfigureExascaleExadataInfrastructure(ConfigureExascaleExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConfigureExascaleExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureExascaleExadataInfrastructureRequest, ConfigureExascaleExadataInfrastructureResponse> ForConfigureExascaleExadataInfrastructure(ConfigureExascaleExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConfigureExascaleExadataInfrastructureRequest, ConfigureExascaleExadataInfrastructureResponse>(() =>
            {
                var response = client.ConfigureExascaleExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureSaasAdminUserRequest, ConfigureSaasAdminUserResponse> ForConfigureSaasAdminUser(ConfigureSaasAdminUserRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConfigureSaasAdminUser(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfigureSaasAdminUserRequest, ConfigureSaasAdminUserResponse> ForConfigureSaasAdminUser(ConfigureSaasAdminUserRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConfigureSaasAdminUserRequest, ConfigureSaasAdminUserResponse>(() =>
            {
                var response = client.ConfigureSaasAdminUser(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfirmKeyStoreDetailsAreCorrectRequest, ConfirmKeyStoreDetailsAreCorrectResponse> ForConfirmKeyStoreDetailsAreCorrect(ConfirmKeyStoreDetailsAreCorrectRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConfirmKeyStoreDetailsAreCorrect(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConfirmKeyStoreDetailsAreCorrectRequest, ConfirmKeyStoreDetailsAreCorrectResponse> ForConfirmKeyStoreDetailsAreCorrect(ConfirmKeyStoreDetailsAreCorrectRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConfirmKeyStoreDetailsAreCorrectRequest, ConfirmKeyStoreDetailsAreCorrectResponse>(() =>
            {
                var response = client.ConfirmKeyStoreDetailsAreCorrect(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertStandbyAutonomousContainerDatabaseRequest, ConvertStandbyAutonomousContainerDatabaseResponse> ForConvertStandbyAutonomousContainerDatabase(ConvertStandbyAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConvertStandbyAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertStandbyAutonomousContainerDatabaseRequest, ConvertStandbyAutonomousContainerDatabaseResponse> ForConvertStandbyAutonomousContainerDatabase(ConvertStandbyAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConvertStandbyAutonomousContainerDatabaseRequest, ConvertStandbyAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.ConvertStandbyAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToPdbRequest, ConvertToPdbResponse> ForConvertToPdb(ConvertToPdbRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConvertToPdb(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToPdbRequest, ConvertToPdbResponse> ForConvertToPdb(ConvertToPdbRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConvertToPdbRequest, ConvertToPdbResponse>(() =>
            {
                var response = client.ConvertToPdb(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToRegularPluggableDatabaseRequest, ConvertToRegularPluggableDatabaseResponse> ForConvertToRegularPluggableDatabase(ConvertToRegularPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConvertToRegularPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToRegularPluggableDatabaseRequest, ConvertToRegularPluggableDatabaseResponse> ForConvertToRegularPluggableDatabase(ConvertToRegularPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConvertToRegularPluggableDatabaseRequest, ConvertToRegularPluggableDatabaseResponse>(() =>
            {
                var response = client.ConvertToRegularPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToStandaloneRequest, ConvertToStandaloneResponse> ForConvertToStandalone(ConvertToStandaloneRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForConvertToStandalone(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ConvertToStandaloneRequest, ConvertToStandaloneResponse> ForConvertToStandalone(ConvertToStandaloneRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ConvertToStandaloneRequest, ConvertToStandaloneResponse>(() =>
            {
                var response = client.ConvertToStandalone(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateApplicationVipRequest, CreateApplicationVipResponse> ForCreateApplicationVip(CreateApplicationVipRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateApplicationVip(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateApplicationVipRequest, CreateApplicationVipResponse> ForCreateApplicationVip(CreateApplicationVipRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateApplicationVipRequest, CreateApplicationVipResponse>(() =>
            {
                var response = client.CreateApplicationVip(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousContainerDatabaseRequest, CreateAutonomousContainerDatabaseResponse> ForCreateAutonomousContainerDatabase(CreateAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousContainerDatabaseRequest, CreateAutonomousContainerDatabaseResponse> ForCreateAutonomousContainerDatabase(CreateAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousContainerDatabaseRequest, CreateAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.CreateAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousContainerDatabaseDataguardAssociationRequest, CreateAutonomousContainerDatabaseDataguardAssociationResponse> ForCreateAutonomousContainerDatabaseDataguardAssociation(CreateAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousContainerDatabaseDataguardAssociationRequest, CreateAutonomousContainerDatabaseDataguardAssociationResponse> ForCreateAutonomousContainerDatabaseDataguardAssociation(CreateAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousContainerDatabaseDataguardAssociationRequest, CreateAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.CreateAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseRequest, CreateAutonomousDatabaseResponse> ForCreateAutonomousDatabase(CreateAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseRequest, CreateAutonomousDatabaseResponse> ForCreateAutonomousDatabase(CreateAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousDatabaseRequest, CreateAutonomousDatabaseResponse>(() =>
            {
                var response = client.CreateAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseBackupRequest, CreateAutonomousDatabaseBackupResponse> ForCreateAutonomousDatabaseBackup(CreateAutonomousDatabaseBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousDatabaseBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseBackupRequest, CreateAutonomousDatabaseBackupResponse> ForCreateAutonomousDatabaseBackup(CreateAutonomousDatabaseBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousDatabaseBackupRequest, CreateAutonomousDatabaseBackupResponse>(() =>
            {
                var response = client.CreateAutonomousDatabaseBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseSoftwareImageRequest, CreateAutonomousDatabaseSoftwareImageResponse> ForCreateAutonomousDatabaseSoftwareImage(CreateAutonomousDatabaseSoftwareImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousDatabaseSoftwareImageRequest, CreateAutonomousDatabaseSoftwareImageResponse> ForCreateAutonomousDatabaseSoftwareImage(CreateAutonomousDatabaseSoftwareImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousDatabaseSoftwareImageRequest, CreateAutonomousDatabaseSoftwareImageResponse>(() =>
            {
                var response = client.CreateAutonomousDatabaseSoftwareImage(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousVmClusterRequest, CreateAutonomousVmClusterResponse> ForCreateAutonomousVmCluster(CreateAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateAutonomousVmClusterRequest, CreateAutonomousVmClusterResponse> ForCreateAutonomousVmCluster(CreateAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateAutonomousVmClusterRequest, CreateAutonomousVmClusterResponse>(() =>
            {
                var response = client.CreateAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateBackupRequest, CreateBackupResponse> ForCreateBackup(CreateBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateBackupRequest, CreateBackupResponse> ForCreateBackup(CreateBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateBackupRequest, CreateBackupResponse>(() =>
            {
                var response = client.CreateBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudAutonomousVmClusterRequest, CreateCloudAutonomousVmClusterResponse> ForCreateCloudAutonomousVmCluster(CreateCloudAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateCloudAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudAutonomousVmClusterRequest, CreateCloudAutonomousVmClusterResponse> ForCreateCloudAutonomousVmCluster(CreateCloudAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateCloudAutonomousVmClusterRequest, CreateCloudAutonomousVmClusterResponse>(() =>
            {
                var response = client.CreateCloudAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudExadataInfrastructureRequest, CreateCloudExadataInfrastructureResponse> ForCreateCloudExadataInfrastructure(CreateCloudExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateCloudExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudExadataInfrastructureRequest, CreateCloudExadataInfrastructureResponse> ForCreateCloudExadataInfrastructure(CreateCloudExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateCloudExadataInfrastructureRequest, CreateCloudExadataInfrastructureResponse>(() =>
            {
                var response = client.CreateCloudExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudVmClusterRequest, CreateCloudVmClusterResponse> ForCreateCloudVmCluster(CreateCloudVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateCloudVmClusterRequest, CreateCloudVmClusterResponse> ForCreateCloudVmCluster(CreateCloudVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateCloudVmClusterRequest, CreateCloudVmClusterResponse>(() =>
            {
                var response = client.CreateCloudVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateConsoleConnectionRequest, CreateConsoleConnectionResponse> ForCreateConsoleConnection(CreateConsoleConnectionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateConsoleConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateConsoleConnectionRequest, CreateConsoleConnectionResponse> ForCreateConsoleConnection(CreateConsoleConnectionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateConsoleConnectionRequest, CreateConsoleConnectionResponse>(() =>
            {
                var response = client.CreateConsoleConnection(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateConsoleHistoryRequest, CreateConsoleHistoryResponse> ForCreateConsoleHistory(CreateConsoleHistoryRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateConsoleHistory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateConsoleHistoryRequest, CreateConsoleHistoryResponse> ForCreateConsoleHistory(CreateConsoleHistoryRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateConsoleHistoryRequest, CreateConsoleHistoryResponse>(() =>
            {
                var response = client.CreateConsoleHistory(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDataGuardAssociationRequest, CreateDataGuardAssociationResponse> ForCreateDataGuardAssociation(CreateDataGuardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDataGuardAssociationRequest, CreateDataGuardAssociationResponse> ForCreateDataGuardAssociation(CreateDataGuardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateDataGuardAssociationRequest, CreateDataGuardAssociationResponse>(() =>
            {
                var response = client.CreateDataGuardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDatabaseRequest, CreateDatabaseResponse> ForCreateDatabase(CreateDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDatabaseRequest, CreateDatabaseResponse> ForCreateDatabase(CreateDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateDatabaseRequest, CreateDatabaseResponse>(() =>
            {
                var response = client.CreateDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDatabaseSoftwareImageRequest, CreateDatabaseSoftwareImageResponse> ForCreateDatabaseSoftwareImage(CreateDatabaseSoftwareImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDatabaseSoftwareImageRequest, CreateDatabaseSoftwareImageResponse> ForCreateDatabaseSoftwareImage(CreateDatabaseSoftwareImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateDatabaseSoftwareImageRequest, CreateDatabaseSoftwareImageResponse>(() =>
            {
                var response = client.CreateDatabaseSoftwareImage(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDbHomeRequest, CreateDbHomeResponse> ForCreateDbHome(CreateDbHomeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateDbHome(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDbHomeRequest, CreateDbHomeResponse> ForCreateDbHome(CreateDbHomeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateDbHomeRequest, CreateDbHomeResponse>(() =>
            {
                var response = client.CreateDbHome(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExadataInfrastructureRequest, CreateExadataInfrastructureResponse> ForCreateExadataInfrastructure(CreateExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExadataInfrastructureRequest, CreateExadataInfrastructureResponse> ForCreateExadataInfrastructure(CreateExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExadataInfrastructureRequest, CreateExadataInfrastructureResponse>(() =>
            {
                var response = client.CreateExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExadbVmClusterRequest, CreateExadbVmClusterResponse> ForCreateExadbVmCluster(CreateExadbVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExadbVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExadbVmClusterRequest, CreateExadbVmClusterResponse> ForCreateExadbVmCluster(CreateExadbVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExadbVmClusterRequest, CreateExadbVmClusterResponse>(() =>
            {
                var response = client.CreateExadbVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExascaleDbStorageVaultRequest, CreateExascaleDbStorageVaultResponse> ForCreateExascaleDbStorageVault(CreateExascaleDbStorageVaultRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExascaleDbStorageVault(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExascaleDbStorageVaultRequest, CreateExascaleDbStorageVaultResponse> ForCreateExascaleDbStorageVault(CreateExascaleDbStorageVaultRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExascaleDbStorageVaultRequest, CreateExascaleDbStorageVaultResponse>(() =>
            {
                var response = client.CreateExascaleDbStorageVault(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExecutionActionRequest, CreateExecutionActionResponse> ForCreateExecutionAction(CreateExecutionActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExecutionAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExecutionActionRequest, CreateExecutionActionResponse> ForCreateExecutionAction(CreateExecutionActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExecutionActionRequest, CreateExecutionActionResponse>(() =>
            {
                var response = client.CreateExecutionAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExecutionWindowRequest, CreateExecutionWindowResponse> ForCreateExecutionWindow(CreateExecutionWindowRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExecutionWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExecutionWindowRequest, CreateExecutionWindowResponse> ForCreateExecutionWindow(CreateExecutionWindowRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExecutionWindowRequest, CreateExecutionWindowResponse>(() =>
            {
                var response = client.CreateExecutionWindow(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalBackupJobRequest, CreateExternalBackupJobResponse> ForCreateExternalBackupJob(CreateExternalBackupJobRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExternalBackupJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalBackupJobRequest, CreateExternalBackupJobResponse> ForCreateExternalBackupJob(CreateExternalBackupJobRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExternalBackupJobRequest, CreateExternalBackupJobResponse>(() =>
            {
                var response = client.CreateExternalBackupJob(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalContainerDatabaseRequest, CreateExternalContainerDatabaseResponse> ForCreateExternalContainerDatabase(CreateExternalContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExternalContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalContainerDatabaseRequest, CreateExternalContainerDatabaseResponse> ForCreateExternalContainerDatabase(CreateExternalContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExternalContainerDatabaseRequest, CreateExternalContainerDatabaseResponse>(() =>
            {
                var response = client.CreateExternalContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalDatabaseConnectorRequest, CreateExternalDatabaseConnectorResponse> ForCreateExternalDatabaseConnector(CreateExternalDatabaseConnectorRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExternalDatabaseConnector(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalDatabaseConnectorRequest, CreateExternalDatabaseConnectorResponse> ForCreateExternalDatabaseConnector(CreateExternalDatabaseConnectorRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExternalDatabaseConnectorRequest, CreateExternalDatabaseConnectorResponse>(() =>
            {
                var response = client.CreateExternalDatabaseConnector(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalNonContainerDatabaseRequest, CreateExternalNonContainerDatabaseResponse> ForCreateExternalNonContainerDatabase(CreateExternalNonContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExternalNonContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalNonContainerDatabaseRequest, CreateExternalNonContainerDatabaseResponse> ForCreateExternalNonContainerDatabase(CreateExternalNonContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExternalNonContainerDatabaseRequest, CreateExternalNonContainerDatabaseResponse>(() =>
            {
                var response = client.CreateExternalNonContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalPluggableDatabaseRequest, CreateExternalPluggableDatabaseResponse> ForCreateExternalPluggableDatabase(CreateExternalPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateExternalPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateExternalPluggableDatabaseRequest, CreateExternalPluggableDatabaseResponse> ForCreateExternalPluggableDatabase(CreateExternalPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateExternalPluggableDatabaseRequest, CreateExternalPluggableDatabaseResponse>(() =>
            {
                var response = client.CreateExternalPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateOneoffPatchRequest, CreateOneoffPatchResponse> ForCreateOneoffPatch(CreateOneoffPatchRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateOneoffPatch(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateOneoffPatchRequest, CreateOneoffPatchResponse> ForCreateOneoffPatch(CreateOneoffPatchRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateOneoffPatchRequest, CreateOneoffPatchResponse>(() =>
            {
                var response = client.CreateOneoffPatch(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreatePluggableDatabaseRequest, CreatePluggableDatabaseResponse> ForCreatePluggableDatabase(CreatePluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreatePluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreatePluggableDatabaseRequest, CreatePluggableDatabaseResponse> ForCreatePluggableDatabase(CreatePluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreatePluggableDatabaseRequest, CreatePluggableDatabaseResponse>(() =>
            {
                var response = client.CreatePluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreatePluggableDatabaseSnapshotRequest, CreatePluggableDatabaseSnapshotResponse> ForCreatePluggableDatabaseSnapshot(CreatePluggableDatabaseSnapshotRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreatePluggableDatabaseSnapshot(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreatePluggableDatabaseSnapshotRequest, CreatePluggableDatabaseSnapshotResponse> ForCreatePluggableDatabaseSnapshot(CreatePluggableDatabaseSnapshotRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreatePluggableDatabaseSnapshotRequest, CreatePluggableDatabaseSnapshotResponse>(() =>
            {
                var response = client.CreatePluggableDatabaseSnapshot(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateScheduledActionRequest, CreateScheduledActionResponse> ForCreateScheduledAction(CreateScheduledActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateScheduledAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateScheduledActionRequest, CreateScheduledActionResponse> ForCreateScheduledAction(CreateScheduledActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateScheduledActionRequest, CreateScheduledActionResponse>(() =>
            {
                var response = client.CreateScheduledAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingPlanRequest, CreateSchedulingPlanResponse> ForCreateSchedulingPlan(CreateSchedulingPlanRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateSchedulingPlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingPlanRequest, CreateSchedulingPlanResponse> ForCreateSchedulingPlan(CreateSchedulingPlanRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateSchedulingPlanRequest, CreateSchedulingPlanResponse>(() =>
            {
                var response = client.CreateSchedulingPlan(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingPolicyRequest, CreateSchedulingPolicyResponse> ForCreateSchedulingPolicy(CreateSchedulingPolicyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateSchedulingPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingPolicyRequest, CreateSchedulingPolicyResponse> ForCreateSchedulingPolicy(CreateSchedulingPolicyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateSchedulingPolicyRequest, CreateSchedulingPolicyResponse>(() =>
            {
                var response = client.CreateSchedulingPolicy(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingWindowRequest, CreateSchedulingWindowResponse> ForCreateSchedulingWindow(CreateSchedulingWindowRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateSchedulingWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSchedulingWindowRequest, CreateSchedulingWindowResponse> ForCreateSchedulingWindow(CreateSchedulingWindowRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateSchedulingWindowRequest, CreateSchedulingWindowResponse>(() =>
            {
                var response = client.CreateSchedulingWindow(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateVmClusterRequest, CreateVmClusterResponse> ForCreateVmCluster(CreateVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateVmClusterRequest, CreateVmClusterResponse> ForCreateVmCluster(CreateVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateVmClusterRequest, CreateVmClusterResponse>(() =>
            {
                var response = client.CreateVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateVmClusterNetworkRequest, CreateVmClusterNetworkResponse> ForCreateVmClusterNetwork(CreateVmClusterNetworkRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateVmClusterNetworkRequest, CreateVmClusterNetworkResponse> ForCreateVmClusterNetwork(CreateVmClusterNetworkRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateVmClusterNetworkRequest, CreateVmClusterNetworkResponse>(() =>
            {
                var response = client.CreateVmClusterNetwork(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DbNodeActionRequest, DbNodeActionResponse> ForDbNodeAction(DbNodeActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDbNodeAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DbNodeActionRequest, DbNodeActionResponse> ForDbNodeAction(DbNodeActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DbNodeActionRequest, DbNodeActionResponse>(() =>
            {
                var response = client.DbNodeAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteApplicationVipRequest, DeleteApplicationVipResponse> ForDeleteApplicationVip(DeleteApplicationVipRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteApplicationVip(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteApplicationVipRequest, DeleteApplicationVipResponse> ForDeleteApplicationVip(DeleteApplicationVipRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteApplicationVipRequest, DeleteApplicationVipResponse>(() =>
            {
                var response = client.DeleteApplicationVip(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseRequest, DeleteAutonomousDatabaseResponse> ForDeleteAutonomousDatabase(DeleteAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseRequest, DeleteAutonomousDatabaseResponse> ForDeleteAutonomousDatabase(DeleteAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteAutonomousDatabaseRequest, DeleteAutonomousDatabaseResponse>(() =>
            {
                var response = client.DeleteAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseBackupRequest, DeleteAutonomousDatabaseBackupResponse> ForDeleteAutonomousDatabaseBackup(DeleteAutonomousDatabaseBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteAutonomousDatabaseBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseBackupRequest, DeleteAutonomousDatabaseBackupResponse> ForDeleteAutonomousDatabaseBackup(DeleteAutonomousDatabaseBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteAutonomousDatabaseBackupRequest, DeleteAutonomousDatabaseBackupResponse>(() =>
            {
                var response = client.DeleteAutonomousDatabaseBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseSoftwareImageRequest, DeleteAutonomousDatabaseSoftwareImageResponse> ForDeleteAutonomousDatabaseSoftwareImage(DeleteAutonomousDatabaseSoftwareImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteAutonomousDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousDatabaseSoftwareImageRequest, DeleteAutonomousDatabaseSoftwareImageResponse> ForDeleteAutonomousDatabaseSoftwareImage(DeleteAutonomousDatabaseSoftwareImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteAutonomousDatabaseSoftwareImageRequest, DeleteAutonomousDatabaseSoftwareImageResponse>(() =>
            {
                var response = client.DeleteAutonomousDatabaseSoftwareImage(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousVmClusterRequest, DeleteAutonomousVmClusterResponse> ForDeleteAutonomousVmCluster(DeleteAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteAutonomousVmClusterRequest, DeleteAutonomousVmClusterResponse> ForDeleteAutonomousVmCluster(DeleteAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteAutonomousVmClusterRequest, DeleteAutonomousVmClusterResponse>(() =>
            {
                var response = client.DeleteAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteBackupRequest, DeleteBackupResponse> ForDeleteBackup(DeleteBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteBackupRequest, DeleteBackupResponse> ForDeleteBackup(DeleteBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteBackupRequest, DeleteBackupResponse>(() =>
            {
                var response = client.DeleteBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudAutonomousVmClusterRequest, DeleteCloudAutonomousVmClusterResponse> ForDeleteCloudAutonomousVmCluster(DeleteCloudAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteCloudAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudAutonomousVmClusterRequest, DeleteCloudAutonomousVmClusterResponse> ForDeleteCloudAutonomousVmCluster(DeleteCloudAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteCloudAutonomousVmClusterRequest, DeleteCloudAutonomousVmClusterResponse>(() =>
            {
                var response = client.DeleteCloudAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudExadataInfrastructureRequest, DeleteCloudExadataInfrastructureResponse> ForDeleteCloudExadataInfrastructure(DeleteCloudExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteCloudExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudExadataInfrastructureRequest, DeleteCloudExadataInfrastructureResponse> ForDeleteCloudExadataInfrastructure(DeleteCloudExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteCloudExadataInfrastructureRequest, DeleteCloudExadataInfrastructureResponse>(() =>
            {
                var response = client.DeleteCloudExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudVmClusterRequest, DeleteCloudVmClusterResponse> ForDeleteCloudVmCluster(DeleteCloudVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteCloudVmClusterRequest, DeleteCloudVmClusterResponse> ForDeleteCloudVmCluster(DeleteCloudVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteCloudVmClusterRequest, DeleteCloudVmClusterResponse>(() =>
            {
                var response = client.DeleteCloudVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteConsoleConnectionRequest, DeleteConsoleConnectionResponse> ForDeleteConsoleConnection(DeleteConsoleConnectionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteConsoleConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteConsoleConnectionRequest, DeleteConsoleConnectionResponse> ForDeleteConsoleConnection(DeleteConsoleConnectionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteConsoleConnectionRequest, DeleteConsoleConnectionResponse>(() =>
            {
                var response = client.DeleteConsoleConnection(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteConsoleHistoryRequest, DeleteConsoleHistoryResponse> ForDeleteConsoleHistory(DeleteConsoleHistoryRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteConsoleHistory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteConsoleHistoryRequest, DeleteConsoleHistoryResponse> ForDeleteConsoleHistory(DeleteConsoleHistoryRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteConsoleHistoryRequest, DeleteConsoleHistoryResponse>(() =>
            {
                var response = client.DeleteConsoleHistory(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDatabaseRequest, DeleteDatabaseResponse> ForDeleteDatabase(DeleteDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDatabaseRequest, DeleteDatabaseResponse> ForDeleteDatabase(DeleteDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteDatabaseRequest, DeleteDatabaseResponse>(() =>
            {
                var response = client.DeleteDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDatabaseSoftwareImageRequest, DeleteDatabaseSoftwareImageResponse> ForDeleteDatabaseSoftwareImage(DeleteDatabaseSoftwareImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDatabaseSoftwareImageRequest, DeleteDatabaseSoftwareImageResponse> ForDeleteDatabaseSoftwareImage(DeleteDatabaseSoftwareImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteDatabaseSoftwareImageRequest, DeleteDatabaseSoftwareImageResponse>(() =>
            {
                var response = client.DeleteDatabaseSoftwareImage(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDbHomeRequest, DeleteDbHomeResponse> ForDeleteDbHome(DeleteDbHomeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteDbHome(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDbHomeRequest, DeleteDbHomeResponse> ForDeleteDbHome(DeleteDbHomeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteDbHomeRequest, DeleteDbHomeResponse>(() =>
            {
                var response = client.DeleteDbHome(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExadataInfrastructureRequest, DeleteExadataInfrastructureResponse> ForDeleteExadataInfrastructure(DeleteExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExadataInfrastructureRequest, DeleteExadataInfrastructureResponse> ForDeleteExadataInfrastructure(DeleteExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExadataInfrastructureRequest, DeleteExadataInfrastructureResponse>(() =>
            {
                var response = client.DeleteExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExadbVmClusterRequest, DeleteExadbVmClusterResponse> ForDeleteExadbVmCluster(DeleteExadbVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExadbVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExadbVmClusterRequest, DeleteExadbVmClusterResponse> ForDeleteExadbVmCluster(DeleteExadbVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExadbVmClusterRequest, DeleteExadbVmClusterResponse>(() =>
            {
                var response = client.DeleteExadbVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExascaleDbStorageVaultRequest, DeleteExascaleDbStorageVaultResponse> ForDeleteExascaleDbStorageVault(DeleteExascaleDbStorageVaultRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExascaleDbStorageVault(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExascaleDbStorageVaultRequest, DeleteExascaleDbStorageVaultResponse> ForDeleteExascaleDbStorageVault(DeleteExascaleDbStorageVaultRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExascaleDbStorageVaultRequest, DeleteExascaleDbStorageVaultResponse>(() =>
            {
                var response = client.DeleteExascaleDbStorageVault(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExecutionActionRequest, DeleteExecutionActionResponse> ForDeleteExecutionAction(DeleteExecutionActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExecutionAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExecutionActionRequest, DeleteExecutionActionResponse> ForDeleteExecutionAction(DeleteExecutionActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExecutionActionRequest, DeleteExecutionActionResponse>(() =>
            {
                var response = client.DeleteExecutionAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalContainerDatabaseRequest, DeleteExternalContainerDatabaseResponse> ForDeleteExternalContainerDatabase(DeleteExternalContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExternalContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalContainerDatabaseRequest, DeleteExternalContainerDatabaseResponse> ForDeleteExternalContainerDatabase(DeleteExternalContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExternalContainerDatabaseRequest, DeleteExternalContainerDatabaseResponse>(() =>
            {
                var response = client.DeleteExternalContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalDatabaseConnectorRequest, DeleteExternalDatabaseConnectorResponse> ForDeleteExternalDatabaseConnector(DeleteExternalDatabaseConnectorRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExternalDatabaseConnector(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalDatabaseConnectorRequest, DeleteExternalDatabaseConnectorResponse> ForDeleteExternalDatabaseConnector(DeleteExternalDatabaseConnectorRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExternalDatabaseConnectorRequest, DeleteExternalDatabaseConnectorResponse>(() =>
            {
                var response = client.DeleteExternalDatabaseConnector(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalNonContainerDatabaseRequest, DeleteExternalNonContainerDatabaseResponse> ForDeleteExternalNonContainerDatabase(DeleteExternalNonContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExternalNonContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalNonContainerDatabaseRequest, DeleteExternalNonContainerDatabaseResponse> ForDeleteExternalNonContainerDatabase(DeleteExternalNonContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExternalNonContainerDatabaseRequest, DeleteExternalNonContainerDatabaseResponse>(() =>
            {
                var response = client.DeleteExternalNonContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalPluggableDatabaseRequest, DeleteExternalPluggableDatabaseResponse> ForDeleteExternalPluggableDatabase(DeleteExternalPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteExternalPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteExternalPluggableDatabaseRequest, DeleteExternalPluggableDatabaseResponse> ForDeleteExternalPluggableDatabase(DeleteExternalPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteExternalPluggableDatabaseRequest, DeleteExternalPluggableDatabaseResponse>(() =>
            {
                var response = client.DeleteExternalPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteOneoffPatchRequest, DeleteOneoffPatchResponse> ForDeleteOneoffPatch(DeleteOneoffPatchRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteOneoffPatch(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteOneoffPatchRequest, DeleteOneoffPatchResponse> ForDeleteOneoffPatch(DeleteOneoffPatchRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteOneoffPatchRequest, DeleteOneoffPatchResponse>(() =>
            {
                var response = client.DeleteOneoffPatch(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeletePluggableDatabaseRequest, DeletePluggableDatabaseResponse> ForDeletePluggableDatabase(DeletePluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeletePluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeletePluggableDatabaseRequest, DeletePluggableDatabaseResponse> ForDeletePluggableDatabase(DeletePluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeletePluggableDatabaseRequest, DeletePluggableDatabaseResponse>(() =>
            {
                var response = client.DeletePluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeletePluggableDatabaseSnapshotRequest, DeletePluggableDatabaseSnapshotResponse> ForDeletePluggableDatabaseSnapshot(DeletePluggableDatabaseSnapshotRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeletePluggableDatabaseSnapshot(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeletePluggableDatabaseSnapshotRequest, DeletePluggableDatabaseSnapshotResponse> ForDeletePluggableDatabaseSnapshot(DeletePluggableDatabaseSnapshotRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeletePluggableDatabaseSnapshotRequest, DeletePluggableDatabaseSnapshotResponse>(() =>
            {
                var response = client.DeletePluggableDatabaseSnapshot(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteScheduledActionRequest, DeleteScheduledActionResponse> ForDeleteScheduledAction(DeleteScheduledActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteScheduledAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteScheduledActionRequest, DeleteScheduledActionResponse> ForDeleteScheduledAction(DeleteScheduledActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteScheduledActionRequest, DeleteScheduledActionResponse>(() =>
            {
                var response = client.DeleteScheduledAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSchedulingPlanRequest, DeleteSchedulingPlanResponse> ForDeleteSchedulingPlan(DeleteSchedulingPlanRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteSchedulingPlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSchedulingPlanRequest, DeleteSchedulingPlanResponse> ForDeleteSchedulingPlan(DeleteSchedulingPlanRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteSchedulingPlanRequest, DeleteSchedulingPlanResponse>(() =>
            {
                var response = client.DeleteSchedulingPlan(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteVmClusterRequest, DeleteVmClusterResponse> ForDeleteVmCluster(DeleteVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteVmClusterRequest, DeleteVmClusterResponse> ForDeleteVmCluster(DeleteVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteVmClusterRequest, DeleteVmClusterResponse>(() =>
            {
                var response = client.DeleteVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteVmClusterNetworkRequest, DeleteVmClusterNetworkResponse> ForDeleteVmClusterNetwork(DeleteVmClusterNetworkRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteVmClusterNetworkRequest, DeleteVmClusterNetworkResponse> ForDeleteVmClusterNetwork(DeleteVmClusterNetworkRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteVmClusterNetworkRequest, DeleteVmClusterNetworkResponse>(() =>
            {
                var response = client.DeleteVmClusterNetwork(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeregisterAutonomousDatabaseDataSafeRequest, DeregisterAutonomousDatabaseDataSafeResponse> ForDeregisterAutonomousDatabaseDataSafe(DeregisterAutonomousDatabaseDataSafeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeregisterAutonomousDatabaseDataSafe(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeregisterAutonomousDatabaseDataSafeRequest, DeregisterAutonomousDatabaseDataSafeResponse> ForDeregisterAutonomousDatabaseDataSafe(DeregisterAutonomousDatabaseDataSafeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeregisterAutonomousDatabaseDataSafeRequest, DeregisterAutonomousDatabaseDataSafeResponse>(() =>
            {
                var response = client.DeregisterAutonomousDatabaseDataSafe(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableAutonomousDatabaseManagementRequest, DisableAutonomousDatabaseManagementResponse> ForDisableAutonomousDatabaseManagement(DisableAutonomousDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableAutonomousDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableAutonomousDatabaseManagementRequest, DisableAutonomousDatabaseManagementResponse> ForDisableAutonomousDatabaseManagement(DisableAutonomousDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableAutonomousDatabaseManagementRequest, DisableAutonomousDatabaseManagementResponse>(() =>
            {
                var response = client.DisableAutonomousDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableAutonomousDatabaseOperationsInsightsRequest, DisableAutonomousDatabaseOperationsInsightsResponse> ForDisableAutonomousDatabaseOperationsInsights(DisableAutonomousDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableAutonomousDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableAutonomousDatabaseOperationsInsightsRequest, DisableAutonomousDatabaseOperationsInsightsResponse> ForDisableAutonomousDatabaseOperationsInsights(DisableAutonomousDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableAutonomousDatabaseOperationsInsightsRequest, DisableAutonomousDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.DisableAutonomousDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableDatabaseManagementRequest, DisableDatabaseManagementResponse> ForDisableDatabaseManagement(DisableDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableDatabaseManagementRequest, DisableDatabaseManagementResponse> ForDisableDatabaseManagement(DisableDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableDatabaseManagementRequest, DisableDatabaseManagementResponse>(() =>
            {
                var response = client.DisableDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalContainerDatabaseDatabaseManagementRequest, DisableExternalContainerDatabaseDatabaseManagementResponse> ForDisableExternalContainerDatabaseDatabaseManagement(DisableExternalContainerDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalContainerDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalContainerDatabaseDatabaseManagementRequest, DisableExternalContainerDatabaseDatabaseManagementResponse> ForDisableExternalContainerDatabaseDatabaseManagement(DisableExternalContainerDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalContainerDatabaseDatabaseManagementRequest, DisableExternalContainerDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.DisableExternalContainerDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalContainerDatabaseStackMonitoringRequest, DisableExternalContainerDatabaseStackMonitoringResponse> ForDisableExternalContainerDatabaseStackMonitoring(DisableExternalContainerDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalContainerDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalContainerDatabaseStackMonitoringRequest, DisableExternalContainerDatabaseStackMonitoringResponse> ForDisableExternalContainerDatabaseStackMonitoring(DisableExternalContainerDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalContainerDatabaseStackMonitoringRequest, DisableExternalContainerDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.DisableExternalContainerDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseDatabaseManagementRequest, DisableExternalNonContainerDatabaseDatabaseManagementResponse> ForDisableExternalNonContainerDatabaseDatabaseManagement(DisableExternalNonContainerDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalNonContainerDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseDatabaseManagementRequest, DisableExternalNonContainerDatabaseDatabaseManagementResponse> ForDisableExternalNonContainerDatabaseDatabaseManagement(DisableExternalNonContainerDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalNonContainerDatabaseDatabaseManagementRequest, DisableExternalNonContainerDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.DisableExternalNonContainerDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseOperationsInsightsRequest, DisableExternalNonContainerDatabaseOperationsInsightsResponse> ForDisableExternalNonContainerDatabaseOperationsInsights(DisableExternalNonContainerDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalNonContainerDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseOperationsInsightsRequest, DisableExternalNonContainerDatabaseOperationsInsightsResponse> ForDisableExternalNonContainerDatabaseOperationsInsights(DisableExternalNonContainerDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalNonContainerDatabaseOperationsInsightsRequest, DisableExternalNonContainerDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.DisableExternalNonContainerDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseStackMonitoringRequest, DisableExternalNonContainerDatabaseStackMonitoringResponse> ForDisableExternalNonContainerDatabaseStackMonitoring(DisableExternalNonContainerDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalNonContainerDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalNonContainerDatabaseStackMonitoringRequest, DisableExternalNonContainerDatabaseStackMonitoringResponse> ForDisableExternalNonContainerDatabaseStackMonitoring(DisableExternalNonContainerDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalNonContainerDatabaseStackMonitoringRequest, DisableExternalNonContainerDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.DisableExternalNonContainerDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseDatabaseManagementRequest, DisableExternalPluggableDatabaseDatabaseManagementResponse> ForDisableExternalPluggableDatabaseDatabaseManagement(DisableExternalPluggableDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalPluggableDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseDatabaseManagementRequest, DisableExternalPluggableDatabaseDatabaseManagementResponse> ForDisableExternalPluggableDatabaseDatabaseManagement(DisableExternalPluggableDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalPluggableDatabaseDatabaseManagementRequest, DisableExternalPluggableDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.DisableExternalPluggableDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseOperationsInsightsRequest, DisableExternalPluggableDatabaseOperationsInsightsResponse> ForDisableExternalPluggableDatabaseOperationsInsights(DisableExternalPluggableDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalPluggableDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseOperationsInsightsRequest, DisableExternalPluggableDatabaseOperationsInsightsResponse> ForDisableExternalPluggableDatabaseOperationsInsights(DisableExternalPluggableDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalPluggableDatabaseOperationsInsightsRequest, DisableExternalPluggableDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.DisableExternalPluggableDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseStackMonitoringRequest, DisableExternalPluggableDatabaseStackMonitoringResponse> ForDisableExternalPluggableDatabaseStackMonitoring(DisableExternalPluggableDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisableExternalPluggableDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisableExternalPluggableDatabaseStackMonitoringRequest, DisableExternalPluggableDatabaseStackMonitoringResponse> ForDisableExternalPluggableDatabaseStackMonitoring(DisableExternalPluggableDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisableExternalPluggableDatabaseStackMonitoringRequest, DisableExternalPluggableDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.DisableExternalPluggableDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisablePluggableDatabaseManagementRequest, DisablePluggableDatabaseManagementResponse> ForDisablePluggableDatabaseManagement(DisablePluggableDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDisablePluggableDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DisablePluggableDatabaseManagementRequest, DisablePluggableDatabaseManagementResponse> ForDisablePluggableDatabaseManagement(DisablePluggableDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DisablePluggableDatabaseManagementRequest, DisablePluggableDatabaseManagementResponse>(() =>
            {
                var response = client.DisablePluggableDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EditAutonomousContainerDatabaseDataguardRequest, EditAutonomousContainerDatabaseDataguardResponse> ForEditAutonomousContainerDatabaseDataguard(EditAutonomousContainerDatabaseDataguardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEditAutonomousContainerDatabaseDataguard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EditAutonomousContainerDatabaseDataguardRequest, EditAutonomousContainerDatabaseDataguardResponse> ForEditAutonomousContainerDatabaseDataguard(EditAutonomousContainerDatabaseDataguardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EditAutonomousContainerDatabaseDataguardRequest, EditAutonomousContainerDatabaseDataguardResponse>(() =>
            {
                var response = client.EditAutonomousContainerDatabaseDataguard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableAutonomousDatabaseManagementRequest, EnableAutonomousDatabaseManagementResponse> ForEnableAutonomousDatabaseManagement(EnableAutonomousDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableAutonomousDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableAutonomousDatabaseManagementRequest, EnableAutonomousDatabaseManagementResponse> ForEnableAutonomousDatabaseManagement(EnableAutonomousDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableAutonomousDatabaseManagementRequest, EnableAutonomousDatabaseManagementResponse>(() =>
            {
                var response = client.EnableAutonomousDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableAutonomousDatabaseOperationsInsightsRequest, EnableAutonomousDatabaseOperationsInsightsResponse> ForEnableAutonomousDatabaseOperationsInsights(EnableAutonomousDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableAutonomousDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableAutonomousDatabaseOperationsInsightsRequest, EnableAutonomousDatabaseOperationsInsightsResponse> ForEnableAutonomousDatabaseOperationsInsights(EnableAutonomousDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableAutonomousDatabaseOperationsInsightsRequest, EnableAutonomousDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.EnableAutonomousDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableDatabaseManagementRequest, EnableDatabaseManagementResponse> ForEnableDatabaseManagement(EnableDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableDatabaseManagementRequest, EnableDatabaseManagementResponse> ForEnableDatabaseManagement(EnableDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableDatabaseManagementRequest, EnableDatabaseManagementResponse>(() =>
            {
                var response = client.EnableDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalContainerDatabaseDatabaseManagementRequest, EnableExternalContainerDatabaseDatabaseManagementResponse> ForEnableExternalContainerDatabaseDatabaseManagement(EnableExternalContainerDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalContainerDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalContainerDatabaseDatabaseManagementRequest, EnableExternalContainerDatabaseDatabaseManagementResponse> ForEnableExternalContainerDatabaseDatabaseManagement(EnableExternalContainerDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalContainerDatabaseDatabaseManagementRequest, EnableExternalContainerDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.EnableExternalContainerDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalContainerDatabaseStackMonitoringRequest, EnableExternalContainerDatabaseStackMonitoringResponse> ForEnableExternalContainerDatabaseStackMonitoring(EnableExternalContainerDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalContainerDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalContainerDatabaseStackMonitoringRequest, EnableExternalContainerDatabaseStackMonitoringResponse> ForEnableExternalContainerDatabaseStackMonitoring(EnableExternalContainerDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalContainerDatabaseStackMonitoringRequest, EnableExternalContainerDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.EnableExternalContainerDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseDatabaseManagementRequest, EnableExternalNonContainerDatabaseDatabaseManagementResponse> ForEnableExternalNonContainerDatabaseDatabaseManagement(EnableExternalNonContainerDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalNonContainerDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseDatabaseManagementRequest, EnableExternalNonContainerDatabaseDatabaseManagementResponse> ForEnableExternalNonContainerDatabaseDatabaseManagement(EnableExternalNonContainerDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalNonContainerDatabaseDatabaseManagementRequest, EnableExternalNonContainerDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.EnableExternalNonContainerDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseOperationsInsightsRequest, EnableExternalNonContainerDatabaseOperationsInsightsResponse> ForEnableExternalNonContainerDatabaseOperationsInsights(EnableExternalNonContainerDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalNonContainerDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseOperationsInsightsRequest, EnableExternalNonContainerDatabaseOperationsInsightsResponse> ForEnableExternalNonContainerDatabaseOperationsInsights(EnableExternalNonContainerDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalNonContainerDatabaseOperationsInsightsRequest, EnableExternalNonContainerDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.EnableExternalNonContainerDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseStackMonitoringRequest, EnableExternalNonContainerDatabaseStackMonitoringResponse> ForEnableExternalNonContainerDatabaseStackMonitoring(EnableExternalNonContainerDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalNonContainerDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalNonContainerDatabaseStackMonitoringRequest, EnableExternalNonContainerDatabaseStackMonitoringResponse> ForEnableExternalNonContainerDatabaseStackMonitoring(EnableExternalNonContainerDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalNonContainerDatabaseStackMonitoringRequest, EnableExternalNonContainerDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.EnableExternalNonContainerDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseDatabaseManagementRequest, EnableExternalPluggableDatabaseDatabaseManagementResponse> ForEnableExternalPluggableDatabaseDatabaseManagement(EnableExternalPluggableDatabaseDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalPluggableDatabaseDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseDatabaseManagementRequest, EnableExternalPluggableDatabaseDatabaseManagementResponse> ForEnableExternalPluggableDatabaseDatabaseManagement(EnableExternalPluggableDatabaseDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalPluggableDatabaseDatabaseManagementRequest, EnableExternalPluggableDatabaseDatabaseManagementResponse>(() =>
            {
                var response = client.EnableExternalPluggableDatabaseDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseOperationsInsightsRequest, EnableExternalPluggableDatabaseOperationsInsightsResponse> ForEnableExternalPluggableDatabaseOperationsInsights(EnableExternalPluggableDatabaseOperationsInsightsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalPluggableDatabaseOperationsInsights(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseOperationsInsightsRequest, EnableExternalPluggableDatabaseOperationsInsightsResponse> ForEnableExternalPluggableDatabaseOperationsInsights(EnableExternalPluggableDatabaseOperationsInsightsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalPluggableDatabaseOperationsInsightsRequest, EnableExternalPluggableDatabaseOperationsInsightsResponse>(() =>
            {
                var response = client.EnableExternalPluggableDatabaseOperationsInsights(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseStackMonitoringRequest, EnableExternalPluggableDatabaseStackMonitoringResponse> ForEnableExternalPluggableDatabaseStackMonitoring(EnableExternalPluggableDatabaseStackMonitoringRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnableExternalPluggableDatabaseStackMonitoring(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnableExternalPluggableDatabaseStackMonitoringRequest, EnableExternalPluggableDatabaseStackMonitoringResponse> ForEnableExternalPluggableDatabaseStackMonitoring(EnableExternalPluggableDatabaseStackMonitoringRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnableExternalPluggableDatabaseStackMonitoringRequest, EnableExternalPluggableDatabaseStackMonitoringResponse>(() =>
            {
                var response = client.EnableExternalPluggableDatabaseStackMonitoring(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnablePluggableDatabaseManagementRequest, EnablePluggableDatabaseManagementResponse> ForEnablePluggableDatabaseManagement(EnablePluggableDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForEnablePluggableDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<EnablePluggableDatabaseManagementRequest, EnablePluggableDatabaseManagementResponse> ForEnablePluggableDatabaseManagement(EnablePluggableDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<EnablePluggableDatabaseManagementRequest, EnablePluggableDatabaseManagementResponse>(() =>
            {
                var response = client.EnablePluggableDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailOverAutonomousDatabaseRequest, FailOverAutonomousDatabaseResponse> ForFailOverAutonomousDatabase(FailOverAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForFailOverAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailOverAutonomousDatabaseRequest, FailOverAutonomousDatabaseResponse> ForFailOverAutonomousDatabase(FailOverAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<FailOverAutonomousDatabaseRequest, FailOverAutonomousDatabaseResponse>(() =>
            {
                var response = client.FailOverAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverAutonomousContainerDatabaseDataguardRequest, FailoverAutonomousContainerDatabaseDataguardResponse> ForFailoverAutonomousContainerDatabaseDataguard(FailoverAutonomousContainerDatabaseDataguardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForFailoverAutonomousContainerDatabaseDataguard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverAutonomousContainerDatabaseDataguardRequest, FailoverAutonomousContainerDatabaseDataguardResponse> ForFailoverAutonomousContainerDatabaseDataguard(FailoverAutonomousContainerDatabaseDataguardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<FailoverAutonomousContainerDatabaseDataguardRequest, FailoverAutonomousContainerDatabaseDataguardResponse>(() =>
            {
                var response = client.FailoverAutonomousContainerDatabaseDataguard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverAutonomousContainerDatabaseDataguardAssociationRequest, FailoverAutonomousContainerDatabaseDataguardAssociationResponse> ForFailoverAutonomousContainerDatabaseDataguardAssociation(FailoverAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForFailoverAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverAutonomousContainerDatabaseDataguardAssociationRequest, FailoverAutonomousContainerDatabaseDataguardAssociationResponse> ForFailoverAutonomousContainerDatabaseDataguardAssociation(FailoverAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<FailoverAutonomousContainerDatabaseDataguardAssociationRequest, FailoverAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.FailoverAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverDataGuardRequest, FailoverDataGuardResponse> ForFailoverDataGuard(FailoverDataGuardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForFailoverDataGuard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverDataGuardRequest, FailoverDataGuardResponse> ForFailoverDataGuard(FailoverDataGuardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<FailoverDataGuardRequest, FailoverDataGuardResponse>(() =>
            {
                var response = client.FailoverDataGuard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverDataGuardAssociationRequest, FailoverDataGuardAssociationResponse> ForFailoverDataGuardAssociation(FailoverDataGuardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForFailoverDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<FailoverDataGuardAssociationRequest, FailoverDataGuardAssociationResponse> ForFailoverDataGuardAssociation(FailoverDataGuardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<FailoverDataGuardAssociationRequest, FailoverDataGuardAssociationResponse>(() =>
            {
                var response = client.FailoverDataGuardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetApplicationVipRequest, GetApplicationVipResponse> ForApplicationVip(GetApplicationVipRequest request, params ApplicationVip.LifecycleStateEnum[] targetStates)
        {
            return this.ForApplicationVip(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetApplicationVipRequest, GetApplicationVipResponse> ForApplicationVip(GetApplicationVipRequest request, WaiterConfiguration config, params ApplicationVip.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetApplicationVipRequest, GetApplicationVipResponse>(
                request,
                request => client.GetApplicationVip(request),
                response => targetStates.Contains(response.ApplicationVip.LifecycleState.Value),
                targetStates.Contains(ApplicationVip.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetApplicationVipRequest, GetApplicationVipResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousContainerDatabaseRequest, GetAutonomousContainerDatabaseResponse> ForAutonomousContainerDatabase(GetAutonomousContainerDatabaseRequest request, params AutonomousContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousContainerDatabaseRequest, GetAutonomousContainerDatabaseResponse> ForAutonomousContainerDatabase(GetAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params AutonomousContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousContainerDatabaseRequest, GetAutonomousContainerDatabaseResponse>(
                request,
                request => client.GetAutonomousContainerDatabase(request),
                response => targetStates.Contains(response.AutonomousContainerDatabase.LifecycleState.Value),
                targetStates.Contains(AutonomousContainerDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousContainerDatabaseRequest, GetAutonomousContainerDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousContainerDatabaseDataguardAssociationRequest, GetAutonomousContainerDatabaseDataguardAssociationResponse> ForAutonomousContainerDatabaseDataguardAssociation(GetAutonomousContainerDatabaseDataguardAssociationRequest request, params AutonomousContainerDatabaseDataguardAssociation.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousContainerDatabaseDataguardAssociationRequest, GetAutonomousContainerDatabaseDataguardAssociationResponse> ForAutonomousContainerDatabaseDataguardAssociation(GetAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params AutonomousContainerDatabaseDataguardAssociation.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousContainerDatabaseDataguardAssociationRequest, GetAutonomousContainerDatabaseDataguardAssociationResponse>(
                request,
                request => client.GetAutonomousContainerDatabaseDataguardAssociation(request),
                response => targetStates.Contains(response.AutonomousContainerDatabaseDataguardAssociation.LifecycleState.Value),
                targetStates.Contains(AutonomousContainerDatabaseDataguardAssociation.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousContainerDatabaseDataguardAssociationRequest, GetAutonomousContainerDatabaseDataguardAssociationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseRequest, GetAutonomousDatabaseResponse> ForAutonomousDatabase(GetAutonomousDatabaseRequest request, params AutonomousDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseRequest, GetAutonomousDatabaseResponse> ForAutonomousDatabase(GetAutonomousDatabaseRequest request, WaiterConfiguration config, params AutonomousDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousDatabaseRequest, GetAutonomousDatabaseResponse>(
                request,
                request => client.GetAutonomousDatabase(request),
                response => targetStates.Contains(response.AutonomousDatabase.LifecycleState.Value),
                targetStates.Contains(AutonomousDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousDatabaseRequest, GetAutonomousDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseBackupRequest, GetAutonomousDatabaseBackupResponse> ForAutonomousDatabaseBackup(GetAutonomousDatabaseBackupRequest request, params AutonomousDatabaseBackup.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousDatabaseBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseBackupRequest, GetAutonomousDatabaseBackupResponse> ForAutonomousDatabaseBackup(GetAutonomousDatabaseBackupRequest request, WaiterConfiguration config, params AutonomousDatabaseBackup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousDatabaseBackupRequest, GetAutonomousDatabaseBackupResponse>(
                request,
                request => client.GetAutonomousDatabaseBackup(request),
                response => targetStates.Contains(response.AutonomousDatabaseBackup.LifecycleState.Value),
                targetStates.Contains(AutonomousDatabaseBackup.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAutonomousDatabaseBackupRequest, GetAutonomousDatabaseBackupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseDataguardAssociationRequest, GetAutonomousDatabaseDataguardAssociationResponse> ForAutonomousDatabaseDataguardAssociation(GetAutonomousDatabaseDataguardAssociationRequest request, params AutonomousDatabaseDataguardAssociation.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseDataguardAssociationRequest, GetAutonomousDatabaseDataguardAssociationResponse> ForAutonomousDatabaseDataguardAssociation(GetAutonomousDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params AutonomousDatabaseDataguardAssociation.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousDatabaseDataguardAssociationRequest, GetAutonomousDatabaseDataguardAssociationResponse>(
                request,
                request => client.GetAutonomousDatabaseDataguardAssociation(request),
                response => targetStates.Contains(response.AutonomousDatabaseDataguardAssociation.LifecycleState.Value),
                targetStates.Contains(AutonomousDatabaseDataguardAssociation.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousDatabaseDataguardAssociationRequest, GetAutonomousDatabaseDataguardAssociationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseSoftwareImageRequest, GetAutonomousDatabaseSoftwareImageResponse> ForAutonomousDatabaseSoftwareImage(GetAutonomousDatabaseSoftwareImageRequest request, params AutonomousDatabaseSoftwareImage.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseSoftwareImageRequest, GetAutonomousDatabaseSoftwareImageResponse> ForAutonomousDatabaseSoftwareImage(GetAutonomousDatabaseSoftwareImageRequest request, WaiterConfiguration config, params AutonomousDatabaseSoftwareImage.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousDatabaseSoftwareImageRequest, GetAutonomousDatabaseSoftwareImageResponse>(
                request,
                request => client.GetAutonomousDatabaseSoftwareImage(request),
                response => targetStates.Contains(response.AutonomousDatabaseSoftwareImage.LifecycleState.Value),
                targetStates.Contains(AutonomousDatabaseSoftwareImage.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousDatabaseSoftwareImageRequest, GetAutonomousDatabaseSoftwareImageResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseWalletRequest, GetAutonomousDatabaseWalletResponse> ForAutonomousDatabaseWallet(GetAutonomousDatabaseWalletRequest request, params AutonomousDatabaseWallet.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousDatabaseWallet(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousDatabaseWalletRequest, GetAutonomousDatabaseWalletResponse> ForAutonomousDatabaseWallet(GetAutonomousDatabaseWalletRequest request, WaiterConfiguration config, params AutonomousDatabaseWallet.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousDatabaseWalletRequest, GetAutonomousDatabaseWalletResponse>(
                request,
                request => client.GetAutonomousDatabaseWallet(request),
                response => targetStates.Contains(response.AutonomousDatabaseWallet.LifecycleState.Value)
            );
            return new Waiter<GetAutonomousDatabaseWalletRequest, GetAutonomousDatabaseWalletResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousExadataInfrastructureRequest, GetAutonomousExadataInfrastructureResponse> ForAutonomousExadataInfrastructure(GetAutonomousExadataInfrastructureRequest request, params AutonomousExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousExadataInfrastructureRequest, GetAutonomousExadataInfrastructureResponse> ForAutonomousExadataInfrastructure(GetAutonomousExadataInfrastructureRequest request, WaiterConfiguration config, params AutonomousExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousExadataInfrastructureRequest, GetAutonomousExadataInfrastructureResponse>(
                request,
                request => client.GetAutonomousExadataInfrastructure(request),
                response => targetStates.Contains(response.AutonomousExadataInfrastructure.LifecycleState.Value),
                targetStates.Contains(AutonomousExadataInfrastructure.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousExadataInfrastructureRequest, GetAutonomousExadataInfrastructureResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousPatchRequest, GetAutonomousPatchResponse> ForAutonomousPatch(GetAutonomousPatchRequest request, params AutonomousPatch.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousPatch(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousPatchRequest, GetAutonomousPatchResponse> ForAutonomousPatch(GetAutonomousPatchRequest request, WaiterConfiguration config, params AutonomousPatch.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousPatchRequest, GetAutonomousPatchResponse>(
                request,
                request => client.GetAutonomousPatch(request),
                response => targetStates.Contains(response.AutonomousPatch.LifecycleState.Value)
            );
            return new Waiter<GetAutonomousPatchRequest, GetAutonomousPatchResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousVirtualMachineRequest, GetAutonomousVirtualMachineResponse> ForAutonomousVirtualMachine(GetAutonomousVirtualMachineRequest request, params AutonomousVirtualMachine.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousVirtualMachine(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousVirtualMachineRequest, GetAutonomousVirtualMachineResponse> ForAutonomousVirtualMachine(GetAutonomousVirtualMachineRequest request, WaiterConfiguration config, params AutonomousVirtualMachine.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousVirtualMachineRequest, GetAutonomousVirtualMachineResponse>(
                request,
                request => client.GetAutonomousVirtualMachine(request),
                response => targetStates.Contains(response.AutonomousVirtualMachine.LifecycleState.Value),
                targetStates.Contains(AutonomousVirtualMachine.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousVirtualMachineRequest, GetAutonomousVirtualMachineResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousVmClusterRequest, GetAutonomousVmClusterResponse> ForAutonomousVmCluster(GetAutonomousVmClusterRequest request, params AutonomousVmCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutonomousVmClusterRequest, GetAutonomousVmClusterResponse> ForAutonomousVmCluster(GetAutonomousVmClusterRequest request, WaiterConfiguration config, params AutonomousVmCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutonomousVmClusterRequest, GetAutonomousVmClusterResponse>(
                request,
                request => client.GetAutonomousVmCluster(request),
                response => targetStates.Contains(response.AutonomousVmCluster.LifecycleState.Value),
                targetStates.Contains(AutonomousVmCluster.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetAutonomousVmClusterRequest, GetAutonomousVmClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupRequest, GetBackupResponse> ForBackup(GetBackupRequest request, params Backup.LifecycleStateEnum[] targetStates)
        {
            return this.ForBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupRequest, GetBackupResponse> ForBackup(GetBackupRequest request, WaiterConfiguration config, params Backup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBackupRequest, GetBackupResponse>(
                request,
                request => client.GetBackup(request),
                response => targetStates.Contains(response.Backup.LifecycleState.Value),
                targetStates.Contains(Backup.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBackupRequest, GetBackupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupDestinationRequest, GetBackupDestinationResponse> ForBackupDestination(GetBackupDestinationRequest request, params BackupDestination.LifecycleStateEnum[] targetStates)
        {
            return this.ForBackupDestination(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupDestinationRequest, GetBackupDestinationResponse> ForBackupDestination(GetBackupDestinationRequest request, WaiterConfiguration config, params BackupDestination.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBackupDestinationRequest, GetBackupDestinationResponse>(
                request,
                request => client.GetBackupDestination(request),
                response => targetStates.Contains(response.BackupDestination.LifecycleState.Value),
                targetStates.Contains(BackupDestination.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBackupDestinationRequest, GetBackupDestinationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudAutonomousVmClusterRequest, GetCloudAutonomousVmClusterResponse> ForCloudAutonomousVmCluster(GetCloudAutonomousVmClusterRequest request, params CloudAutonomousVmCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForCloudAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudAutonomousVmClusterRequest, GetCloudAutonomousVmClusterResponse> ForCloudAutonomousVmCluster(GetCloudAutonomousVmClusterRequest request, WaiterConfiguration config, params CloudAutonomousVmCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCloudAutonomousVmClusterRequest, GetCloudAutonomousVmClusterResponse>(
                request,
                request => client.GetCloudAutonomousVmCluster(request),
                response => targetStates.Contains(response.CloudAutonomousVmCluster.LifecycleState.Value),
                targetStates.Contains(CloudAutonomousVmCluster.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetCloudAutonomousVmClusterRequest, GetCloudAutonomousVmClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudExadataInfrastructureRequest, GetCloudExadataInfrastructureResponse> ForCloudExadataInfrastructure(GetCloudExadataInfrastructureRequest request, params CloudExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            return this.ForCloudExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudExadataInfrastructureRequest, GetCloudExadataInfrastructureResponse> ForCloudExadataInfrastructure(GetCloudExadataInfrastructureRequest request, WaiterConfiguration config, params CloudExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCloudExadataInfrastructureRequest, GetCloudExadataInfrastructureResponse>(
                request,
                request => client.GetCloudExadataInfrastructure(request),
                response => targetStates.Contains(response.CloudExadataInfrastructure.LifecycleState.Value),
                targetStates.Contains(CloudExadataInfrastructure.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetCloudExadataInfrastructureRequest, GetCloudExadataInfrastructureResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudVmClusterRequest, GetCloudVmClusterResponse> ForCloudVmCluster(GetCloudVmClusterRequest request, params CloudVmCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCloudVmClusterRequest, GetCloudVmClusterResponse> ForCloudVmCluster(GetCloudVmClusterRequest request, WaiterConfiguration config, params CloudVmCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCloudVmClusterRequest, GetCloudVmClusterResponse>(
                request,
                request => client.GetCloudVmCluster(request),
                response => targetStates.Contains(response.CloudVmCluster.LifecycleState.Value),
                targetStates.Contains(CloudVmCluster.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetCloudVmClusterRequest, GetCloudVmClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleConnectionRequest, GetConsoleConnectionResponse> ForConsoleConnection(GetConsoleConnectionRequest request, params ConsoleConnection.LifecycleStateEnum[] targetStates)
        {
            return this.ForConsoleConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleConnectionRequest, GetConsoleConnectionResponse> ForConsoleConnection(GetConsoleConnectionRequest request, WaiterConfiguration config, params ConsoleConnection.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetConsoleConnectionRequest, GetConsoleConnectionResponse>(
                request,
                request => client.GetConsoleConnection(request),
                response => targetStates.Contains(response.ConsoleConnection.LifecycleState.Value),
                targetStates.Contains(ConsoleConnection.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetConsoleConnectionRequest, GetConsoleConnectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse> ForConsoleHistory(GetConsoleHistoryRequest request, params ConsoleHistory.LifecycleStateEnum[] targetStates)
        {
            return this.ForConsoleHistory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse> ForConsoleHistory(GetConsoleHistoryRequest request, WaiterConfiguration config, params ConsoleHistory.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetConsoleHistoryRequest, GetConsoleHistoryResponse>(
                request,
                request => client.GetConsoleHistory(request),
                response => targetStates.Contains(response.ConsoleHistory.LifecycleState.Value),
                targetStates.Contains(ConsoleHistory.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataGuardAssociationRequest, GetDataGuardAssociationResponse> ForDataGuardAssociation(GetDataGuardAssociationRequest request, params DataGuardAssociation.LifecycleStateEnum[] targetStates)
        {
            return this.ForDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataGuardAssociationRequest, GetDataGuardAssociationResponse> ForDataGuardAssociation(GetDataGuardAssociationRequest request, WaiterConfiguration config, params DataGuardAssociation.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDataGuardAssociationRequest, GetDataGuardAssociationResponse>(
                request,
                request => client.GetDataGuardAssociation(request),
                response => targetStates.Contains(response.DataGuardAssociation.LifecycleState.Value),
                targetStates.Contains(DataGuardAssociation.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDataGuardAssociationRequest, GetDataGuardAssociationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseRequest, GetDatabaseResponse> ForDatabase(GetDatabaseRequest request, params Database.LifecycleStateEnum[] targetStates)
        {
            return this.ForDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseRequest, GetDatabaseResponse> ForDatabase(GetDatabaseRequest request, WaiterConfiguration config, params Database.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDatabaseRequest, GetDatabaseResponse>(
                request,
                request => client.GetDatabase(request),
                response => targetStates.Contains(response.Database.LifecycleState.Value),
                targetStates.Contains(Database.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDatabaseRequest, GetDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseSoftwareImageRequest, GetDatabaseSoftwareImageResponse> ForDatabaseSoftwareImage(GetDatabaseSoftwareImageRequest request, params DatabaseSoftwareImage.LifecycleStateEnum[] targetStates)
        {
            return this.ForDatabaseSoftwareImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseSoftwareImageRequest, GetDatabaseSoftwareImageResponse> ForDatabaseSoftwareImage(GetDatabaseSoftwareImageRequest request, WaiterConfiguration config, params DatabaseSoftwareImage.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDatabaseSoftwareImageRequest, GetDatabaseSoftwareImageResponse>(
                request,
                request => client.GetDatabaseSoftwareImage(request),
                response => targetStates.Contains(response.DatabaseSoftwareImage.LifecycleState.Value),
                targetStates.Contains(DatabaseSoftwareImage.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDatabaseSoftwareImageRequest, GetDatabaseSoftwareImageResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseUpgradeHistoryEntryRequest, GetDatabaseUpgradeHistoryEntryResponse> ForDatabaseUpgradeHistoryEntry(GetDatabaseUpgradeHistoryEntryRequest request, params DatabaseUpgradeHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            return this.ForDatabaseUpgradeHistoryEntry(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseUpgradeHistoryEntryRequest, GetDatabaseUpgradeHistoryEntryResponse> ForDatabaseUpgradeHistoryEntry(GetDatabaseUpgradeHistoryEntryRequest request, WaiterConfiguration config, params DatabaseUpgradeHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDatabaseUpgradeHistoryEntryRequest, GetDatabaseUpgradeHistoryEntryResponse>(
                request,
                request => client.GetDatabaseUpgradeHistoryEntry(request),
                response => targetStates.Contains(response.DatabaseUpgradeHistoryEntry.LifecycleState.Value)
            );
            return new Waiter<GetDatabaseUpgradeHistoryEntryRequest, GetDatabaseUpgradeHistoryEntryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbHomeRequest, GetDbHomeResponse> ForDbHome(GetDbHomeRequest request, params DbHome.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbHome(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbHomeRequest, GetDbHomeResponse> ForDbHome(GetDbHomeRequest request, WaiterConfiguration config, params DbHome.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbHomeRequest, GetDbHomeResponse>(
                request,
                request => client.GetDbHome(request),
                response => targetStates.Contains(response.DbHome.LifecycleState.Value),
                targetStates.Contains(DbHome.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDbHomeRequest, GetDbHomeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbNodeRequest, GetDbNodeResponse> ForDbNode(GetDbNodeRequest request, params DbNode.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbNode(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbNodeRequest, GetDbNodeResponse> ForDbNode(GetDbNodeRequest request, WaiterConfiguration config, params DbNode.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbNodeRequest, GetDbNodeResponse>(
                request,
                request => client.GetDbNode(request),
                response => targetStates.Contains(response.DbNode.LifecycleState.Value),
                targetStates.Contains(DbNode.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDbNodeRequest, GetDbNodeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbServerRequest, GetDbServerResponse> ForDbServer(GetDbServerRequest request, params DbServer.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbServer(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbServerRequest, GetDbServerResponse> ForDbServer(GetDbServerRequest request, WaiterConfiguration config, params DbServer.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbServerRequest, GetDbServerResponse>(
                request,
                request => client.GetDbServer(request),
                response => targetStates.Contains(response.DbServer.LifecycleState.Value),
                targetStates.Contains(DbServer.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDbServerRequest, GetDbServerResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemRequest, GetDbSystemResponse> ForDbSystem(GetDbSystemRequest request, params DbSystem.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemRequest, GetDbSystemResponse> ForDbSystem(GetDbSystemRequest request, WaiterConfiguration config, params DbSystem.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbSystemRequest, GetDbSystemResponse>(
                request,
                request => client.GetDbSystem(request),
                response => targetStates.Contains(response.DbSystem.LifecycleState.Value),
                targetStates.Contains(DbSystem.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDbSystemRequest, GetDbSystemResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemUpgradeHistoryEntryRequest, GetDbSystemUpgradeHistoryEntryResponse> ForDbSystemUpgradeHistoryEntry(GetDbSystemUpgradeHistoryEntryRequest request, params DbSystemUpgradeHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbSystemUpgradeHistoryEntry(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemUpgradeHistoryEntryRequest, GetDbSystemUpgradeHistoryEntryResponse> ForDbSystemUpgradeHistoryEntry(GetDbSystemUpgradeHistoryEntryRequest request, WaiterConfiguration config, params DbSystemUpgradeHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbSystemUpgradeHistoryEntryRequest, GetDbSystemUpgradeHistoryEntryResponse>(
                request,
                request => client.GetDbSystemUpgradeHistoryEntry(request),
                response => targetStates.Contains(response.DbSystemUpgradeHistoryEntry.LifecycleState.Value)
            );
            return new Waiter<GetDbSystemUpgradeHistoryEntryRequest, GetDbSystemUpgradeHistoryEntryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadataInfrastructureRequest, GetExadataInfrastructureResponse> ForExadataInfrastructure(GetExadataInfrastructureRequest request, params ExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            return this.ForExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadataInfrastructureRequest, GetExadataInfrastructureResponse> ForExadataInfrastructure(GetExadataInfrastructureRequest request, WaiterConfiguration config, params ExadataInfrastructure.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExadataInfrastructureRequest, GetExadataInfrastructureResponse>(
                request,
                request => client.GetExadataInfrastructure(request),
                response => targetStates.Contains(response.ExadataInfrastructure.LifecycleState.Value),
                targetStates.Contains(ExadataInfrastructure.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetExadataInfrastructureRequest, GetExadataInfrastructureResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadataIormConfigRequest, GetExadataIormConfigResponse> ForExadataIormConfig(GetExadataIormConfigRequest request, params ExadataIormConfig.LifecycleStateEnum[] targetStates)
        {
            return this.ForExadataIormConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadataIormConfigRequest, GetExadataIormConfigResponse> ForExadataIormConfig(GetExadataIormConfigRequest request, WaiterConfiguration config, params ExadataIormConfig.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExadataIormConfigRequest, GetExadataIormConfigResponse>(
                request,
                request => client.GetExadataIormConfig(request),
                response => targetStates.Contains(response.ExadataIormConfig.LifecycleState.Value)
            );
            return new Waiter<GetExadataIormConfigRequest, GetExadataIormConfigResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterRequest, GetExadbVmClusterResponse> ForExadbVmCluster(GetExadbVmClusterRequest request, params ExadbVmCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForExadbVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterRequest, GetExadbVmClusterResponse> ForExadbVmCluster(GetExadbVmClusterRequest request, WaiterConfiguration config, params ExadbVmCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExadbVmClusterRequest, GetExadbVmClusterResponse>(
                request,
                request => client.GetExadbVmCluster(request),
                response => targetStates.Contains(response.ExadbVmCluster.LifecycleState.Value),
                targetStates.Contains(ExadbVmCluster.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExadbVmClusterRequest, GetExadbVmClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterUpdateRequest, GetExadbVmClusterUpdateResponse> ForExadbVmClusterUpdate(GetExadbVmClusterUpdateRequest request, params ExadbVmClusterUpdate.LifecycleStateEnum[] targetStates)
        {
            return this.ForExadbVmClusterUpdate(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterUpdateRequest, GetExadbVmClusterUpdateResponse> ForExadbVmClusterUpdate(GetExadbVmClusterUpdateRequest request, WaiterConfiguration config, params ExadbVmClusterUpdate.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExadbVmClusterUpdateRequest, GetExadbVmClusterUpdateResponse>(
                request,
                request => client.GetExadbVmClusterUpdate(request),
                response => targetStates.Contains(response.ExadbVmClusterUpdate.LifecycleState.Value)
            );
            return new Waiter<GetExadbVmClusterUpdateRequest, GetExadbVmClusterUpdateResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterUpdateHistoryEntryRequest, GetExadbVmClusterUpdateHistoryEntryResponse> ForExadbVmClusterUpdateHistoryEntry(GetExadbVmClusterUpdateHistoryEntryRequest request, params ExadbVmClusterUpdateHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            return this.ForExadbVmClusterUpdateHistoryEntry(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExadbVmClusterUpdateHistoryEntryRequest, GetExadbVmClusterUpdateHistoryEntryResponse> ForExadbVmClusterUpdateHistoryEntry(GetExadbVmClusterUpdateHistoryEntryRequest request, WaiterConfiguration config, params ExadbVmClusterUpdateHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExadbVmClusterUpdateHistoryEntryRequest, GetExadbVmClusterUpdateHistoryEntryResponse>(
                request,
                request => client.GetExadbVmClusterUpdateHistoryEntry(request),
                response => targetStates.Contains(response.ExadbVmClusterUpdateHistoryEntry.LifecycleState.Value)
            );
            return new Waiter<GetExadbVmClusterUpdateHistoryEntryRequest, GetExadbVmClusterUpdateHistoryEntryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExascaleDbStorageVaultRequest, GetExascaleDbStorageVaultResponse> ForExascaleDbStorageVault(GetExascaleDbStorageVaultRequest request, params ExascaleDbStorageVault.LifecycleStateEnum[] targetStates)
        {
            return this.ForExascaleDbStorageVault(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExascaleDbStorageVaultRequest, GetExascaleDbStorageVaultResponse> ForExascaleDbStorageVault(GetExascaleDbStorageVaultRequest request, WaiterConfiguration config, params ExascaleDbStorageVault.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExascaleDbStorageVaultRequest, GetExascaleDbStorageVaultResponse>(
                request,
                request => client.GetExascaleDbStorageVault(request),
                response => targetStates.Contains(response.ExascaleDbStorageVault.LifecycleState.Value),
                targetStates.Contains(ExascaleDbStorageVault.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExascaleDbStorageVaultRequest, GetExascaleDbStorageVaultResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExecutionActionRequest, GetExecutionActionResponse> ForExecutionAction(GetExecutionActionRequest request, params ExecutionAction.LifecycleStateEnum[] targetStates)
        {
            return this.ForExecutionAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExecutionActionRequest, GetExecutionActionResponse> ForExecutionAction(GetExecutionActionRequest request, WaiterConfiguration config, params ExecutionAction.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExecutionActionRequest, GetExecutionActionResponse>(
                request,
                request => client.GetExecutionAction(request),
                response => targetStates.Contains(response.ExecutionAction.LifecycleState.Value),
                targetStates.Contains(ExecutionAction.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetExecutionActionRequest, GetExecutionActionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExecutionWindowRequest, GetExecutionWindowResponse> ForExecutionWindow(GetExecutionWindowRequest request, params ExecutionWindow.LifecycleStateEnum[] targetStates)
        {
            return this.ForExecutionWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExecutionWindowRequest, GetExecutionWindowResponse> ForExecutionWindow(GetExecutionWindowRequest request, WaiterConfiguration config, params ExecutionWindow.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExecutionWindowRequest, GetExecutionWindowResponse>(
                request,
                request => client.GetExecutionWindow(request),
                response => targetStates.Contains(response.ExecutionWindow.LifecycleState.Value),
                targetStates.Contains(ExecutionWindow.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetExecutionWindowRequest, GetExecutionWindowResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalContainerDatabaseRequest, GetExternalContainerDatabaseResponse> ForExternalContainerDatabase(GetExternalContainerDatabaseRequest request, params ExternalContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForExternalContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalContainerDatabaseRequest, GetExternalContainerDatabaseResponse> ForExternalContainerDatabase(GetExternalContainerDatabaseRequest request, WaiterConfiguration config, params ExternalContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExternalContainerDatabaseRequest, GetExternalContainerDatabaseResponse>(
                request,
                request => client.GetExternalContainerDatabase(request),
                response => targetStates.Contains(response.ExternalContainerDatabase.LifecycleState.Value),
                targetStates.Contains(ExternalContainerDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExternalContainerDatabaseRequest, GetExternalContainerDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalDatabaseConnectorRequest, GetExternalDatabaseConnectorResponse> ForExternalDatabaseConnector(GetExternalDatabaseConnectorRequest request, params ExternalDatabaseConnector.LifecycleStateEnum[] targetStates)
        {
            return this.ForExternalDatabaseConnector(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalDatabaseConnectorRequest, GetExternalDatabaseConnectorResponse> ForExternalDatabaseConnector(GetExternalDatabaseConnectorRequest request, WaiterConfiguration config, params ExternalDatabaseConnector.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExternalDatabaseConnectorRequest, GetExternalDatabaseConnectorResponse>(
                request,
                request => client.GetExternalDatabaseConnector(request),
                response => targetStates.Contains(response.ExternalDatabaseConnector.LifecycleState.Value),
                targetStates.Contains(ExternalDatabaseConnector.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExternalDatabaseConnectorRequest, GetExternalDatabaseConnectorResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalNonContainerDatabaseRequest, GetExternalNonContainerDatabaseResponse> ForExternalNonContainerDatabase(GetExternalNonContainerDatabaseRequest request, params ExternalNonContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForExternalNonContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalNonContainerDatabaseRequest, GetExternalNonContainerDatabaseResponse> ForExternalNonContainerDatabase(GetExternalNonContainerDatabaseRequest request, WaiterConfiguration config, params ExternalNonContainerDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExternalNonContainerDatabaseRequest, GetExternalNonContainerDatabaseResponse>(
                request,
                request => client.GetExternalNonContainerDatabase(request),
                response => targetStates.Contains(response.ExternalNonContainerDatabase.LifecycleState.Value),
                targetStates.Contains(ExternalNonContainerDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExternalNonContainerDatabaseRequest, GetExternalNonContainerDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalPluggableDatabaseRequest, GetExternalPluggableDatabaseResponse> ForExternalPluggableDatabase(GetExternalPluggableDatabaseRequest request, params ExternalPluggableDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForExternalPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetExternalPluggableDatabaseRequest, GetExternalPluggableDatabaseResponse> ForExternalPluggableDatabase(GetExternalPluggableDatabaseRequest request, WaiterConfiguration config, params ExternalPluggableDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetExternalPluggableDatabaseRequest, GetExternalPluggableDatabaseResponse>(
                request,
                request => client.GetExternalPluggableDatabase(request),
                response => targetStates.Contains(response.ExternalPluggableDatabase.LifecycleState.Value),
                targetStates.Contains(ExternalPluggableDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetExternalPluggableDatabaseRequest, GetExternalPluggableDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetKeyStoreRequest, GetKeyStoreResponse> ForKeyStore(GetKeyStoreRequest request, params KeyStore.LifecycleStateEnum[] targetStates)
        {
            return this.ForKeyStore(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetKeyStoreRequest, GetKeyStoreResponse> ForKeyStore(GetKeyStoreRequest request, WaiterConfiguration config, params KeyStore.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetKeyStoreRequest, GetKeyStoreResponse>(
                request,
                request => client.GetKeyStore(request),
                response => targetStates.Contains(response.KeyStore.LifecycleState.Value),
                targetStates.Contains(KeyStore.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetKeyStoreRequest, GetKeyStoreResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaintenanceRunRequest, GetMaintenanceRunResponse> ForMaintenanceRun(GetMaintenanceRunRequest request, params MaintenanceRun.LifecycleStateEnum[] targetStates)
        {
            return this.ForMaintenanceRun(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaintenanceRunRequest, GetMaintenanceRunResponse> ForMaintenanceRun(GetMaintenanceRunRequest request, WaiterConfiguration config, params MaintenanceRun.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMaintenanceRunRequest, GetMaintenanceRunResponse>(
                request,
                request => client.GetMaintenanceRun(request),
                response => targetStates.Contains(response.MaintenanceRun.LifecycleState.Value),
                targetStates.Contains(MaintenanceRun.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMaintenanceRunRequest, GetMaintenanceRunResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetOneoffPatchRequest, GetOneoffPatchResponse> ForOneoffPatch(GetOneoffPatchRequest request, params OneoffPatch.LifecycleStateEnum[] targetStates)
        {
            return this.ForOneoffPatch(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetOneoffPatchRequest, GetOneoffPatchResponse> ForOneoffPatch(GetOneoffPatchRequest request, WaiterConfiguration config, params OneoffPatch.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetOneoffPatchRequest, GetOneoffPatchResponse>(
                request,
                request => client.GetOneoffPatch(request),
                response => targetStates.Contains(response.OneoffPatch.LifecycleState.Value),
                targetStates.Contains(OneoffPatch.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetOneoffPatchRequest, GetOneoffPatchResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPdbConversionHistoryEntryRequest, GetPdbConversionHistoryEntryResponse> ForPdbConversionHistoryEntry(GetPdbConversionHistoryEntryRequest request, params PdbConversionHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            return this.ForPdbConversionHistoryEntry(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPdbConversionHistoryEntryRequest, GetPdbConversionHistoryEntryResponse> ForPdbConversionHistoryEntry(GetPdbConversionHistoryEntryRequest request, WaiterConfiguration config, params PdbConversionHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPdbConversionHistoryEntryRequest, GetPdbConversionHistoryEntryResponse>(
                request,
                request => client.GetPdbConversionHistoryEntry(request),
                response => targetStates.Contains(response.PdbConversionHistoryEntry.LifecycleState.Value)
            );
            return new Waiter<GetPdbConversionHistoryEntryRequest, GetPdbConversionHistoryEntryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluggableDatabaseRequest, GetPluggableDatabaseResponse> ForPluggableDatabase(GetPluggableDatabaseRequest request, params PluggableDatabase.LifecycleStateEnum[] targetStates)
        {
            return this.ForPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluggableDatabaseRequest, GetPluggableDatabaseResponse> ForPluggableDatabase(GetPluggableDatabaseRequest request, WaiterConfiguration config, params PluggableDatabase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPluggableDatabaseRequest, GetPluggableDatabaseResponse>(
                request,
                request => client.GetPluggableDatabase(request),
                response => targetStates.Contains(response.PluggableDatabase.LifecycleState.Value),
                targetStates.Contains(PluggableDatabase.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetPluggableDatabaseRequest, GetPluggableDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluggableDatabaseSnapshotRequest, GetPluggableDatabaseSnapshotResponse> ForPluggableDatabaseSnapshot(GetPluggableDatabaseSnapshotRequest request, params PluggableDatabaseSnapshot.LifecycleStateEnum[] targetStates)
        {
            return this.ForPluggableDatabaseSnapshot(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPluggableDatabaseSnapshotRequest, GetPluggableDatabaseSnapshotResponse> ForPluggableDatabaseSnapshot(GetPluggableDatabaseSnapshotRequest request, WaiterConfiguration config, params PluggableDatabaseSnapshot.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPluggableDatabaseSnapshotRequest, GetPluggableDatabaseSnapshotResponse>(
                request,
                request => client.GetPluggableDatabaseSnapshot(request),
                response => targetStates.Contains(response.PluggableDatabaseSnapshot.LifecycleState.Value),
                targetStates.Contains(PluggableDatabaseSnapshot.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetPluggableDatabaseSnapshotRequest, GetPluggableDatabaseSnapshotResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetScheduledActionRequest, GetScheduledActionResponse> ForScheduledAction(GetScheduledActionRequest request, params ScheduledAction.LifecycleStateEnum[] targetStates)
        {
            return this.ForScheduledAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetScheduledActionRequest, GetScheduledActionResponse> ForScheduledAction(GetScheduledActionRequest request, WaiterConfiguration config, params ScheduledAction.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetScheduledActionRequest, GetScheduledActionResponse>(
                request,
                request => client.GetScheduledAction(request),
                response => targetStates.Contains(response.ScheduledAction.LifecycleState.Value),
                targetStates.Contains(ScheduledAction.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetScheduledActionRequest, GetScheduledActionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingPlanRequest, GetSchedulingPlanResponse> ForSchedulingPlan(GetSchedulingPlanRequest request, params SchedulingPlan.LifecycleStateEnum[] targetStates)
        {
            return this.ForSchedulingPlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingPlanRequest, GetSchedulingPlanResponse> ForSchedulingPlan(GetSchedulingPlanRequest request, WaiterConfiguration config, params SchedulingPlan.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSchedulingPlanRequest, GetSchedulingPlanResponse>(
                request,
                request => client.GetSchedulingPlan(request),
                response => targetStates.Contains(response.SchedulingPlan.LifecycleState.Value),
                targetStates.Contains(SchedulingPlan.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetSchedulingPlanRequest, GetSchedulingPlanResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingPolicyRequest, GetSchedulingPolicyResponse> ForSchedulingPolicy(GetSchedulingPolicyRequest request, params SchedulingPolicy.LifecycleStateEnum[] targetStates)
        {
            return this.ForSchedulingPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingPolicyRequest, GetSchedulingPolicyResponse> ForSchedulingPolicy(GetSchedulingPolicyRequest request, WaiterConfiguration config, params SchedulingPolicy.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSchedulingPolicyRequest, GetSchedulingPolicyResponse>(
                request,
                request => client.GetSchedulingPolicy(request),
                response => targetStates.Contains(response.SchedulingPolicy.LifecycleState.Value),
                targetStates.Contains(SchedulingPolicy.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetSchedulingPolicyRequest, GetSchedulingPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingWindowRequest, GetSchedulingWindowResponse> ForSchedulingWindow(GetSchedulingWindowRequest request, params SchedulingWindow.LifecycleStateEnum[] targetStates)
        {
            return this.ForSchedulingWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSchedulingWindowRequest, GetSchedulingWindowResponse> ForSchedulingWindow(GetSchedulingWindowRequest request, WaiterConfiguration config, params SchedulingWindow.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSchedulingWindowRequest, GetSchedulingWindowResponse>(
                request,
                request => client.GetSchedulingWindow(request),
                response => targetStates.Contains(response.SchedulingWindow.LifecycleState.Value),
                targetStates.Contains(SchedulingWindow.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetSchedulingWindowRequest, GetSchedulingWindowResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterRequest, GetVmClusterResponse> ForVmCluster(GetVmClusterRequest request, params VmCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterRequest, GetVmClusterResponse> ForVmCluster(GetVmClusterRequest request, WaiterConfiguration config, params VmCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVmClusterRequest, GetVmClusterResponse>(
                request,
                request => client.GetVmCluster(request),
                response => targetStates.Contains(response.VmCluster.LifecycleState.Value),
                targetStates.Contains(VmCluster.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVmClusterRequest, GetVmClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterNetworkRequest, GetVmClusterNetworkResponse> ForVmClusterNetwork(GetVmClusterNetworkRequest request, params VmClusterNetwork.LifecycleStateEnum[] targetStates)
        {
            return this.ForVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterNetworkRequest, GetVmClusterNetworkResponse> ForVmClusterNetwork(GetVmClusterNetworkRequest request, WaiterConfiguration config, params VmClusterNetwork.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVmClusterNetworkRequest, GetVmClusterNetworkResponse>(
                request,
                request => client.GetVmClusterNetwork(request),
                response => targetStates.Contains(response.VmClusterNetwork.LifecycleState.Value),
                targetStates.Contains(VmClusterNetwork.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVmClusterNetworkRequest, GetVmClusterNetworkResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterUpdateRequest, GetVmClusterUpdateResponse> ForVmClusterUpdate(GetVmClusterUpdateRequest request, params VmClusterUpdate.LifecycleStateEnum[] targetStates)
        {
            return this.ForVmClusterUpdate(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterUpdateRequest, GetVmClusterUpdateResponse> ForVmClusterUpdate(GetVmClusterUpdateRequest request, WaiterConfiguration config, params VmClusterUpdate.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVmClusterUpdateRequest, GetVmClusterUpdateResponse>(
                request,
                request => client.GetVmClusterUpdate(request),
                response => targetStates.Contains(response.VmClusterUpdate.LifecycleState.Value)
            );
            return new Waiter<GetVmClusterUpdateRequest, GetVmClusterUpdateResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterUpdateHistoryEntryRequest, GetVmClusterUpdateHistoryEntryResponse> ForVmClusterUpdateHistoryEntry(GetVmClusterUpdateHistoryEntryRequest request, params VmClusterUpdateHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            return this.ForVmClusterUpdateHistoryEntry(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVmClusterUpdateHistoryEntryRequest, GetVmClusterUpdateHistoryEntryResponse> ForVmClusterUpdateHistoryEntry(GetVmClusterUpdateHistoryEntryRequest request, WaiterConfiguration config, params VmClusterUpdateHistoryEntry.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVmClusterUpdateHistoryEntryRequest, GetVmClusterUpdateHistoryEntryResponse>(
                request,
                request => client.GetVmClusterUpdateHistoryEntry(request),
                response => targetStates.Contains(response.VmClusterUpdateHistoryEntry.LifecycleState.Value)
            );
            return new Waiter<GetVmClusterUpdateHistoryEntryRequest, GetVmClusterUpdateHistoryEntryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchAutonomousExadataInfrastructureRequest, LaunchAutonomousExadataInfrastructureResponse> ForLaunchAutonomousExadataInfrastructure(LaunchAutonomousExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForLaunchAutonomousExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchAutonomousExadataInfrastructureRequest, LaunchAutonomousExadataInfrastructureResponse> ForLaunchAutonomousExadataInfrastructure(LaunchAutonomousExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<LaunchAutonomousExadataInfrastructureRequest, LaunchAutonomousExadataInfrastructureResponse>(() =>
            {
                var response = client.LaunchAutonomousExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchDbSystemRequest, LaunchDbSystemResponse> ForLaunchDbSystem(LaunchDbSystemRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForLaunchDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchDbSystemRequest, LaunchDbSystemResponse> ForLaunchDbSystem(LaunchDbSystemRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<LaunchDbSystemRequest, LaunchDbSystemResponse>(() =>
            {
                var response = client.LaunchDbSystem(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LocalClonePluggableDatabaseRequest, LocalClonePluggableDatabaseResponse> ForLocalClonePluggableDatabase(LocalClonePluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForLocalClonePluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LocalClonePluggableDatabaseRequest, LocalClonePluggableDatabaseResponse> ForLocalClonePluggableDatabase(LocalClonePluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<LocalClonePluggableDatabaseRequest, LocalClonePluggableDatabaseResponse>(() =>
            {
                var response = client.LocalClonePluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateAutonomousContainerDatabaseDataguardAssociationRequest, MigrateAutonomousContainerDatabaseDataguardAssociationResponse> ForMigrateAutonomousContainerDatabaseDataguardAssociation(MigrateAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForMigrateAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateAutonomousContainerDatabaseDataguardAssociationRequest, MigrateAutonomousContainerDatabaseDataguardAssociationResponse> ForMigrateAutonomousContainerDatabaseDataguardAssociation(MigrateAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<MigrateAutonomousContainerDatabaseDataguardAssociationRequest, MigrateAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.MigrateAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateDataGuardAssociationToMultiDataGuardsRequest, MigrateDataGuardAssociationToMultiDataGuardsResponse> ForMigrateDataGuardAssociationToMultiDataGuards(MigrateDataGuardAssociationToMultiDataGuardsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForMigrateDataGuardAssociationToMultiDataGuards(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateDataGuardAssociationToMultiDataGuardsRequest, MigrateDataGuardAssociationToMultiDataGuardsResponse> ForMigrateDataGuardAssociationToMultiDataGuards(MigrateDataGuardAssociationToMultiDataGuardsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<MigrateDataGuardAssociationToMultiDataGuardsRequest, MigrateDataGuardAssociationToMultiDataGuardsResponse>(() =>
            {
                var response = client.MigrateDataGuardAssociationToMultiDataGuards(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateExadataDbSystemResourceModelRequest, MigrateExadataDbSystemResourceModelResponse> ForMigrateExadataDbSystemResourceModel(MigrateExadataDbSystemResourceModelRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForMigrateExadataDbSystemResourceModel(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateExadataDbSystemResourceModelRequest, MigrateExadataDbSystemResourceModelResponse> ForMigrateExadataDbSystemResourceModel(MigrateExadataDbSystemResourceModelRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<MigrateExadataDbSystemResourceModelRequest, MigrateExadataDbSystemResourceModelResponse>(() =>
            {
                var response = client.MigrateExadataDbSystemResourceModel(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateVaultKeyRequest, MigrateVaultKeyResponse> ForMigrateVaultKey(MigrateVaultKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForMigrateVaultKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MigrateVaultKeyRequest, MigrateVaultKeyResponse> ForMigrateVaultKey(MigrateVaultKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<MigrateVaultKeyRequest, MigrateVaultKeyResponse>(() =>
            {
                var response = client.MigrateVaultKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ModifyDatabaseManagementRequest, ModifyDatabaseManagementResponse> ForModifyDatabaseManagement(ModifyDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForModifyDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ModifyDatabaseManagementRequest, ModifyDatabaseManagementResponse> ForModifyDatabaseManagement(ModifyDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ModifyDatabaseManagementRequest, ModifyDatabaseManagementResponse>(() =>
            {
                var response = client.ModifyDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ModifyPluggableDatabaseManagementRequest, ModifyPluggableDatabaseManagementResponse> ForModifyPluggableDatabaseManagement(ModifyPluggableDatabaseManagementRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForModifyPluggableDatabaseManagement(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ModifyPluggableDatabaseManagementRequest, ModifyPluggableDatabaseManagementResponse> ForModifyPluggableDatabaseManagement(ModifyPluggableDatabaseManagementRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ModifyPluggableDatabaseManagementRequest, ModifyPluggableDatabaseManagementResponse>(() =>
            {
                var response = client.ModifyPluggableDatabaseManagement(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MoveExecutionActionMemberRequest, MoveExecutionActionMemberResponse> ForMoveExecutionActionMember(MoveExecutionActionMemberRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForMoveExecutionActionMember(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<MoveExecutionActionMemberRequest, MoveExecutionActionMemberResponse> ForMoveExecutionActionMember(MoveExecutionActionMemberRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<MoveExecutionActionMemberRequest, MoveExecutionActionMemberResponse>(() =>
            {
                var response = client.MoveExecutionActionMember(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RefreshPluggableDatabaseRequest, RefreshPluggableDatabaseResponse> ForRefreshPluggableDatabase(RefreshPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRefreshPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RefreshPluggableDatabaseRequest, RefreshPluggableDatabaseResponse> ForRefreshPluggableDatabase(RefreshPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RefreshPluggableDatabaseRequest, RefreshPluggableDatabaseResponse>(() =>
            {
                var response = client.RefreshPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RegisterAutonomousDatabaseDataSafeRequest, RegisterAutonomousDatabaseDataSafeResponse> ForRegisterAutonomousDatabaseDataSafe(RegisterAutonomousDatabaseDataSafeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRegisterAutonomousDatabaseDataSafe(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RegisterAutonomousDatabaseDataSafeRequest, RegisterAutonomousDatabaseDataSafeResponse> ForRegisterAutonomousDatabaseDataSafe(RegisterAutonomousDatabaseDataSafeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RegisterAutonomousDatabaseDataSafeRequest, RegisterAutonomousDatabaseDataSafeResponse>(() =>
            {
                var response = client.RegisterAutonomousDatabaseDataSafe(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RegisterCloudVmClusterPkcsRequest, RegisterCloudVmClusterPkcsResponse> ForRegisterCloudVmClusterPkcs(RegisterCloudVmClusterPkcsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRegisterCloudVmClusterPkcs(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RegisterCloudVmClusterPkcsRequest, RegisterCloudVmClusterPkcsResponse> ForRegisterCloudVmClusterPkcs(RegisterCloudVmClusterPkcsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RegisterCloudVmClusterPkcsRequest, RegisterCloudVmClusterPkcsResponse>(() =>
            {
                var response = client.RegisterCloudVmClusterPkcs(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateAutonomousContainerDatabaseDataguardRequest, ReinstateAutonomousContainerDatabaseDataguardResponse> ForReinstateAutonomousContainerDatabaseDataguard(ReinstateAutonomousContainerDatabaseDataguardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReinstateAutonomousContainerDatabaseDataguard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateAutonomousContainerDatabaseDataguardRequest, ReinstateAutonomousContainerDatabaseDataguardResponse> ForReinstateAutonomousContainerDatabaseDataguard(ReinstateAutonomousContainerDatabaseDataguardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReinstateAutonomousContainerDatabaseDataguardRequest, ReinstateAutonomousContainerDatabaseDataguardResponse>(() =>
            {
                var response = client.ReinstateAutonomousContainerDatabaseDataguard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateAutonomousContainerDatabaseDataguardAssociationRequest, ReinstateAutonomousContainerDatabaseDataguardAssociationResponse> ForReinstateAutonomousContainerDatabaseDataguardAssociation(ReinstateAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReinstateAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateAutonomousContainerDatabaseDataguardAssociationRequest, ReinstateAutonomousContainerDatabaseDataguardAssociationResponse> ForReinstateAutonomousContainerDatabaseDataguardAssociation(ReinstateAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReinstateAutonomousContainerDatabaseDataguardAssociationRequest, ReinstateAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.ReinstateAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateDataGuardRequest, ReinstateDataGuardResponse> ForReinstateDataGuard(ReinstateDataGuardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReinstateDataGuard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateDataGuardRequest, ReinstateDataGuardResponse> ForReinstateDataGuard(ReinstateDataGuardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReinstateDataGuardRequest, ReinstateDataGuardResponse>(() =>
            {
                var response = client.ReinstateDataGuard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateDataGuardAssociationRequest, ReinstateDataGuardAssociationResponse> ForReinstateDataGuardAssociation(ReinstateDataGuardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReinstateDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReinstateDataGuardAssociationRequest, ReinstateDataGuardAssociationResponse> ForReinstateDataGuardAssociation(ReinstateDataGuardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReinstateDataGuardAssociationRequest, ReinstateDataGuardAssociationResponse>(() =>
            {
                var response = client.ReinstateDataGuardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoteClonePluggableDatabaseRequest, RemoteClonePluggableDatabaseResponse> ForRemoteClonePluggableDatabase(RemoteClonePluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRemoteClonePluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoteClonePluggableDatabaseRequest, RemoteClonePluggableDatabaseResponse> ForRemoteClonePluggableDatabase(RemoteClonePluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RemoteClonePluggableDatabaseRequest, RemoteClonePluggableDatabaseResponse>(() =>
            {
                var response = client.RemoteClonePluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromCloudVmClusterRequest, RemoveVirtualMachineFromCloudVmClusterResponse> ForRemoveVirtualMachineFromCloudVmCluster(RemoveVirtualMachineFromCloudVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRemoveVirtualMachineFromCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromCloudVmClusterRequest, RemoveVirtualMachineFromCloudVmClusterResponse> ForRemoveVirtualMachineFromCloudVmCluster(RemoveVirtualMachineFromCloudVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RemoveVirtualMachineFromCloudVmClusterRequest, RemoveVirtualMachineFromCloudVmClusterResponse>(() =>
            {
                var response = client.RemoveVirtualMachineFromCloudVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromExadbVmClusterRequest, RemoveVirtualMachineFromExadbVmClusterResponse> ForRemoveVirtualMachineFromExadbVmCluster(RemoveVirtualMachineFromExadbVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRemoveVirtualMachineFromExadbVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromExadbVmClusterRequest, RemoveVirtualMachineFromExadbVmClusterResponse> ForRemoveVirtualMachineFromExadbVmCluster(RemoveVirtualMachineFromExadbVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RemoveVirtualMachineFromExadbVmClusterRequest, RemoveVirtualMachineFromExadbVmClusterResponse>(() =>
            {
                var response = client.RemoveVirtualMachineFromExadbVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromVmClusterRequest, RemoveVirtualMachineFromVmClusterResponse> ForRemoveVirtualMachineFromVmCluster(RemoveVirtualMachineFromVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRemoveVirtualMachineFromVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RemoveVirtualMachineFromVmClusterRequest, RemoveVirtualMachineFromVmClusterResponse> ForRemoveVirtualMachineFromVmCluster(RemoveVirtualMachineFromVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RemoveVirtualMachineFromVmClusterRequest, RemoveVirtualMachineFromVmClusterResponse>(() =>
            {
                var response = client.RemoveVirtualMachineFromVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReorderExecutionActionsRequest, ReorderExecutionActionsResponse> ForReorderExecutionActions(ReorderExecutionActionsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReorderExecutionActions(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReorderExecutionActionsRequest, ReorderExecutionActionsResponse> ForReorderExecutionActions(ReorderExecutionActionsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReorderExecutionActionsRequest, ReorderExecutionActionsResponse>(() =>
            {
                var response = client.ReorderExecutionActions(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReorderScheduledActionsRequest, ReorderScheduledActionsResponse> ForReorderScheduledActions(ReorderScheduledActionsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForReorderScheduledActions(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ReorderScheduledActionsRequest, ReorderScheduledActionsResponse> ForReorderScheduledActions(ReorderScheduledActionsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ReorderScheduledActionsRequest, ReorderScheduledActionsResponse>(() =>
            {
                var response = client.ReorderScheduledActions(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ResizeVmClusterNetworkRequest, ResizeVmClusterNetworkResponse> ForResizeVmClusterNetwork(ResizeVmClusterNetworkRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForResizeVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ResizeVmClusterNetworkRequest, ResizeVmClusterNetworkResponse> ForResizeVmClusterNetwork(ResizeVmClusterNetworkRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ResizeVmClusterNetworkRequest, ResizeVmClusterNetworkResponse>(() =>
            {
                var response = client.ResizeVmClusterNetwork(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestartAutonomousContainerDatabaseRequest, RestartAutonomousContainerDatabaseResponse> ForRestartAutonomousContainerDatabase(RestartAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRestartAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestartAutonomousContainerDatabaseRequest, RestartAutonomousContainerDatabaseResponse> ForRestartAutonomousContainerDatabase(RestartAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RestartAutonomousContainerDatabaseRequest, RestartAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.RestartAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestartAutonomousDatabaseRequest, RestartAutonomousDatabaseResponse> ForRestartAutonomousDatabase(RestartAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRestartAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestartAutonomousDatabaseRequest, RestartAutonomousDatabaseResponse> ForRestartAutonomousDatabase(RestartAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RestartAutonomousDatabaseRequest, RestartAutonomousDatabaseResponse>(() =>
            {
                var response = client.RestartAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestoreAutonomousDatabaseRequest, RestoreAutonomousDatabaseResponse> ForRestoreAutonomousDatabase(RestoreAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRestoreAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestoreAutonomousDatabaseRequest, RestoreAutonomousDatabaseResponse> ForRestoreAutonomousDatabase(RestoreAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RestoreAutonomousDatabaseRequest, RestoreAutonomousDatabaseResponse>(() =>
            {
                var response = client.RestoreAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestoreDatabaseRequest, RestoreDatabaseResponse> ForRestoreDatabase(RestoreDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRestoreDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RestoreDatabaseRequest, RestoreDatabaseResponse> ForRestoreDatabase(RestoreDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RestoreDatabaseRequest, RestoreDatabaseResponse>(() =>
            {
                var response = client.RestoreDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousContainerDatabaseEncryptionKeyRequest, RotateAutonomousContainerDatabaseEncryptionKeyResponse> ForRotateAutonomousContainerDatabaseEncryptionKey(RotateAutonomousContainerDatabaseEncryptionKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateAutonomousContainerDatabaseEncryptionKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousContainerDatabaseEncryptionKeyRequest, RotateAutonomousContainerDatabaseEncryptionKeyResponse> ForRotateAutonomousContainerDatabaseEncryptionKey(RotateAutonomousContainerDatabaseEncryptionKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateAutonomousContainerDatabaseEncryptionKeyRequest, RotateAutonomousContainerDatabaseEncryptionKeyResponse>(() =>
            {
                var response = client.RotateAutonomousContainerDatabaseEncryptionKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousDatabaseEncryptionKeyRequest, RotateAutonomousDatabaseEncryptionKeyResponse> ForRotateAutonomousDatabaseEncryptionKey(RotateAutonomousDatabaseEncryptionKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateAutonomousDatabaseEncryptionKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousDatabaseEncryptionKeyRequest, RotateAutonomousDatabaseEncryptionKeyResponse> ForRotateAutonomousDatabaseEncryptionKey(RotateAutonomousDatabaseEncryptionKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateAutonomousDatabaseEncryptionKeyRequest, RotateAutonomousDatabaseEncryptionKeyResponse>(() =>
            {
                var response = client.RotateAutonomousDatabaseEncryptionKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousVmClusterOrdsCertsRequest, RotateAutonomousVmClusterOrdsCertsResponse> ForRotateAutonomousVmClusterOrdsCerts(RotateAutonomousVmClusterOrdsCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateAutonomousVmClusterOrdsCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousVmClusterOrdsCertsRequest, RotateAutonomousVmClusterOrdsCertsResponse> ForRotateAutonomousVmClusterOrdsCerts(RotateAutonomousVmClusterOrdsCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateAutonomousVmClusterOrdsCertsRequest, RotateAutonomousVmClusterOrdsCertsResponse>(() =>
            {
                var response = client.RotateAutonomousVmClusterOrdsCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousVmClusterSslCertsRequest, RotateAutonomousVmClusterSslCertsResponse> ForRotateAutonomousVmClusterSslCerts(RotateAutonomousVmClusterSslCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateAutonomousVmClusterSslCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateAutonomousVmClusterSslCertsRequest, RotateAutonomousVmClusterSslCertsResponse> ForRotateAutonomousVmClusterSslCerts(RotateAutonomousVmClusterSslCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateAutonomousVmClusterSslCertsRequest, RotateAutonomousVmClusterSslCertsResponse>(() =>
            {
                var response = client.RotateAutonomousVmClusterSslCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateCloudAutonomousVmClusterOrdsCertsRequest, RotateCloudAutonomousVmClusterOrdsCertsResponse> ForRotateCloudAutonomousVmClusterOrdsCerts(RotateCloudAutonomousVmClusterOrdsCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateCloudAutonomousVmClusterOrdsCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateCloudAutonomousVmClusterOrdsCertsRequest, RotateCloudAutonomousVmClusterOrdsCertsResponse> ForRotateCloudAutonomousVmClusterOrdsCerts(RotateCloudAutonomousVmClusterOrdsCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateCloudAutonomousVmClusterOrdsCertsRequest, RotateCloudAutonomousVmClusterOrdsCertsResponse>(() =>
            {
                var response = client.RotateCloudAutonomousVmClusterOrdsCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateCloudAutonomousVmClusterSslCertsRequest, RotateCloudAutonomousVmClusterSslCertsResponse> ForRotateCloudAutonomousVmClusterSslCerts(RotateCloudAutonomousVmClusterSslCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateCloudAutonomousVmClusterSslCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateCloudAutonomousVmClusterSslCertsRequest, RotateCloudAutonomousVmClusterSslCertsResponse> ForRotateCloudAutonomousVmClusterSslCerts(RotateCloudAutonomousVmClusterSslCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateCloudAutonomousVmClusterSslCertsRequest, RotateCloudAutonomousVmClusterSslCertsResponse>(() =>
            {
                var response = client.RotateCloudAutonomousVmClusterSslCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateOrdsCertsRequest, RotateOrdsCertsResponse> ForRotateOrdsCerts(RotateOrdsCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateOrdsCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateOrdsCertsRequest, RotateOrdsCertsResponse> ForRotateOrdsCerts(RotateOrdsCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateOrdsCertsRequest, RotateOrdsCertsResponse>(() =>
            {
                var response = client.RotateOrdsCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotatePluggableDatabaseEncryptionKeyRequest, RotatePluggableDatabaseEncryptionKeyResponse> ForRotatePluggableDatabaseEncryptionKey(RotatePluggableDatabaseEncryptionKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotatePluggableDatabaseEncryptionKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotatePluggableDatabaseEncryptionKeyRequest, RotatePluggableDatabaseEncryptionKeyResponse> ForRotatePluggableDatabaseEncryptionKey(RotatePluggableDatabaseEncryptionKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotatePluggableDatabaseEncryptionKeyRequest, RotatePluggableDatabaseEncryptionKeyResponse>(() =>
            {
                var response = client.RotatePluggableDatabaseEncryptionKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateSslCertsRequest, RotateSslCertsResponse> ForRotateSslCerts(RotateSslCertsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateSslCerts(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateSslCertsRequest, RotateSslCertsResponse> ForRotateSslCerts(RotateSslCertsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateSslCertsRequest, RotateSslCertsResponse>(() =>
            {
                var response = client.RotateSslCerts(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateVaultKeyRequest, RotateVaultKeyResponse> ForRotateVaultKey(RotateVaultKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForRotateVaultKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<RotateVaultKeyRequest, RotateVaultKeyResponse> ForRotateVaultKey(RotateVaultKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<RotateVaultKeyRequest, RotateVaultKeyResponse>(() =>
            {
                var response = client.RotateVaultKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ScanExternalContainerDatabasePluggableDatabasesRequest, ScanExternalContainerDatabasePluggableDatabasesResponse> ForScanExternalContainerDatabasePluggableDatabases(ScanExternalContainerDatabasePluggableDatabasesRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForScanExternalContainerDatabasePluggableDatabases(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ScanExternalContainerDatabasePluggableDatabasesRequest, ScanExternalContainerDatabasePluggableDatabasesResponse> ForScanExternalContainerDatabasePluggableDatabases(ScanExternalContainerDatabasePluggableDatabasesRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ScanExternalContainerDatabasePluggableDatabasesRequest, ScanExternalContainerDatabasePluggableDatabasesResponse>(() =>
            {
                var response = client.ScanExternalContainerDatabasePluggableDatabases(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SetDbKeyVersionRequest, SetDbKeyVersionResponse> ForSetDbKeyVersion(SetDbKeyVersionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSetDbKeyVersion(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SetDbKeyVersionRequest, SetDbKeyVersionResponse> ForSetDbKeyVersion(SetDbKeyVersionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SetDbKeyVersionRequest, SetDbKeyVersionResponse>(() =>
            {
                var response = client.SetDbKeyVersion(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SetPdbKeyVersionRequest, SetPdbKeyVersionResponse> ForSetPdbKeyVersion(SetPdbKeyVersionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSetPdbKeyVersion(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SetPdbKeyVersionRequest, SetPdbKeyVersionResponse> ForSetPdbKeyVersion(SetPdbKeyVersionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SetPdbKeyVersionRequest, SetPdbKeyVersionResponse>(() =>
            {
                var response = client.SetPdbKeyVersion(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ShrinkAutonomousDatabaseRequest, ShrinkAutonomousDatabaseResponse> ForShrinkAutonomousDatabase(ShrinkAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForShrinkAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ShrinkAutonomousDatabaseRequest, ShrinkAutonomousDatabaseResponse> ForShrinkAutonomousDatabase(ShrinkAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ShrinkAutonomousDatabaseRequest, ShrinkAutonomousDatabaseResponse>(() =>
            {
                var response = client.ShrinkAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StartAutonomousDatabaseRequest, StartAutonomousDatabaseResponse> ForStartAutonomousDatabase(StartAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForStartAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StartAutonomousDatabaseRequest, StartAutonomousDatabaseResponse> ForStartAutonomousDatabase(StartAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<StartAutonomousDatabaseRequest, StartAutonomousDatabaseResponse>(() =>
            {
                var response = client.StartAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StartPluggableDatabaseRequest, StartPluggableDatabaseResponse> ForStartPluggableDatabase(StartPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForStartPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StartPluggableDatabaseRequest, StartPluggableDatabaseResponse> ForStartPluggableDatabase(StartPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<StartPluggableDatabaseRequest, StartPluggableDatabaseResponse>(() =>
            {
                var response = client.StartPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StopAutonomousDatabaseRequest, StopAutonomousDatabaseResponse> ForStopAutonomousDatabase(StopAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForStopAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StopAutonomousDatabaseRequest, StopAutonomousDatabaseResponse> ForStopAutonomousDatabase(StopAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<StopAutonomousDatabaseRequest, StopAutonomousDatabaseResponse>(() =>
            {
                var response = client.StopAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StopPluggableDatabaseRequest, StopPluggableDatabaseResponse> ForStopPluggableDatabase(StopPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForStopPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StopPluggableDatabaseRequest, StopPluggableDatabaseResponse> ForStopPluggableDatabase(StopPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<StopPluggableDatabaseRequest, StopPluggableDatabaseResponse>(() =>
            {
                var response = client.StopPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchOverDataGuardRequest, SwitchOverDataGuardResponse> ForSwitchOverDataGuard(SwitchOverDataGuardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSwitchOverDataGuard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchOverDataGuardRequest, SwitchOverDataGuardResponse> ForSwitchOverDataGuard(SwitchOverDataGuardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SwitchOverDataGuardRequest, SwitchOverDataGuardResponse>(() =>
            {
                var response = client.SwitchOverDataGuard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousContainerDatabaseDataguardRequest, SwitchoverAutonomousContainerDatabaseDataguardResponse> ForSwitchoverAutonomousContainerDatabaseDataguard(SwitchoverAutonomousContainerDatabaseDataguardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSwitchoverAutonomousContainerDatabaseDataguard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousContainerDatabaseDataguardRequest, SwitchoverAutonomousContainerDatabaseDataguardResponse> ForSwitchoverAutonomousContainerDatabaseDataguard(SwitchoverAutonomousContainerDatabaseDataguardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SwitchoverAutonomousContainerDatabaseDataguardRequest, SwitchoverAutonomousContainerDatabaseDataguardResponse>(() =>
            {
                var response = client.SwitchoverAutonomousContainerDatabaseDataguard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest, SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse> ForSwitchoverAutonomousContainerDatabaseDataguardAssociation(SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSwitchoverAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest, SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse> ForSwitchoverAutonomousContainerDatabaseDataguardAssociation(SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest, SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.SwitchoverAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousDatabaseRequest, SwitchoverAutonomousDatabaseResponse> ForSwitchoverAutonomousDatabase(SwitchoverAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSwitchoverAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverAutonomousDatabaseRequest, SwitchoverAutonomousDatabaseResponse> ForSwitchoverAutonomousDatabase(SwitchoverAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SwitchoverAutonomousDatabaseRequest, SwitchoverAutonomousDatabaseResponse>(() =>
            {
                var response = client.SwitchoverAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverDataGuardAssociationRequest, SwitchoverDataGuardAssociationResponse> ForSwitchoverDataGuardAssociation(SwitchoverDataGuardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForSwitchoverDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<SwitchoverDataGuardAssociationRequest, SwitchoverDataGuardAssociationResponse> ForSwitchoverDataGuardAssociation(SwitchoverDataGuardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<SwitchoverDataGuardAssociationRequest, SwitchoverDataGuardAssociationResponse>(() =>
            {
                var response = client.SwitchoverDataGuardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateAutonomousContainerDatabaseRequest, TerminateAutonomousContainerDatabaseResponse> ForTerminateAutonomousContainerDatabase(TerminateAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForTerminateAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateAutonomousContainerDatabaseRequest, TerminateAutonomousContainerDatabaseResponse> ForTerminateAutonomousContainerDatabase(TerminateAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<TerminateAutonomousContainerDatabaseRequest, TerminateAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.TerminateAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateAutonomousExadataInfrastructureRequest, TerminateAutonomousExadataInfrastructureResponse> ForTerminateAutonomousExadataInfrastructure(TerminateAutonomousExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForTerminateAutonomousExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateAutonomousExadataInfrastructureRequest, TerminateAutonomousExadataInfrastructureResponse> ForTerminateAutonomousExadataInfrastructure(TerminateAutonomousExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<TerminateAutonomousExadataInfrastructureRequest, TerminateAutonomousExadataInfrastructureResponse>(() =>
            {
                var response = client.TerminateAutonomousExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateDbSystemRequest, TerminateDbSystemResponse> ForTerminateDbSystem(TerminateDbSystemRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForTerminateDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<TerminateDbSystemRequest, TerminateDbSystemResponse> ForTerminateDbSystem(TerminateDbSystemRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<TerminateDbSystemRequest, TerminateDbSystemResponse>(() =>
            {
                var response = client.TerminateDbSystem(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UnregisterCloudVmClusterPkcsRequest, UnregisterCloudVmClusterPkcsResponse> ForUnregisterCloudVmClusterPkcs(UnregisterCloudVmClusterPkcsRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUnregisterCloudVmClusterPkcs(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UnregisterCloudVmClusterPkcsRequest, UnregisterCloudVmClusterPkcsResponse> ForUnregisterCloudVmClusterPkcs(UnregisterCloudVmClusterPkcsRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UnregisterCloudVmClusterPkcsRequest, UnregisterCloudVmClusterPkcsResponse>(() =>
            {
                var response = client.UnregisterCloudVmClusterPkcs(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousContainerDatabaseRequest, UpdateAutonomousContainerDatabaseResponse> ForUpdateAutonomousContainerDatabase(UpdateAutonomousContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousContainerDatabaseRequest, UpdateAutonomousContainerDatabaseResponse> ForUpdateAutonomousContainerDatabase(UpdateAutonomousContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousContainerDatabaseRequest, UpdateAutonomousContainerDatabaseResponse>(() =>
            {
                var response = client.UpdateAutonomousContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousContainerDatabaseDataguardAssociationRequest, UpdateAutonomousContainerDatabaseDataguardAssociationResponse> ForUpdateAutonomousContainerDatabaseDataguardAssociation(UpdateAutonomousContainerDatabaseDataguardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousContainerDatabaseDataguardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousContainerDatabaseDataguardAssociationRequest, UpdateAutonomousContainerDatabaseDataguardAssociationResponse> ForUpdateAutonomousContainerDatabaseDataguardAssociation(UpdateAutonomousContainerDatabaseDataguardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousContainerDatabaseDataguardAssociationRequest, UpdateAutonomousContainerDatabaseDataguardAssociationResponse>(() =>
            {
                var response = client.UpdateAutonomousContainerDatabaseDataguardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseRequest, UpdateAutonomousDatabaseResponse> ForUpdateAutonomousDatabase(UpdateAutonomousDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseRequest, UpdateAutonomousDatabaseResponse> ForUpdateAutonomousDatabase(UpdateAutonomousDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousDatabaseRequest, UpdateAutonomousDatabaseResponse>(() =>
            {
                var response = client.UpdateAutonomousDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseBackupRequest, UpdateAutonomousDatabaseBackupResponse> ForUpdateAutonomousDatabaseBackup(UpdateAutonomousDatabaseBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousDatabaseBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseBackupRequest, UpdateAutonomousDatabaseBackupResponse> ForUpdateAutonomousDatabaseBackup(UpdateAutonomousDatabaseBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousDatabaseBackupRequest, UpdateAutonomousDatabaseBackupResponse>(() =>
            {
                var response = client.UpdateAutonomousDatabaseBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseRegionalWalletRequest, UpdateAutonomousDatabaseRegionalWalletResponse> ForUpdateAutonomousDatabaseRegionalWallet(UpdateAutonomousDatabaseRegionalWalletRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousDatabaseRegionalWallet(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseRegionalWalletRequest, UpdateAutonomousDatabaseRegionalWalletResponse> ForUpdateAutonomousDatabaseRegionalWallet(UpdateAutonomousDatabaseRegionalWalletRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousDatabaseRegionalWalletRequest, UpdateAutonomousDatabaseRegionalWalletResponse>(() =>
            {
                var response = client.UpdateAutonomousDatabaseRegionalWallet(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseWalletRequest, UpdateAutonomousDatabaseWalletResponse> ForUpdateAutonomousDatabaseWallet(UpdateAutonomousDatabaseWalletRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousDatabaseWallet(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousDatabaseWalletRequest, UpdateAutonomousDatabaseWalletResponse> ForUpdateAutonomousDatabaseWallet(UpdateAutonomousDatabaseWalletRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousDatabaseWalletRequest, UpdateAutonomousDatabaseWalletResponse>(() =>
            {
                var response = client.UpdateAutonomousDatabaseWallet(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousExadataInfrastructureRequest, UpdateAutonomousExadataInfrastructureResponse> ForUpdateAutonomousExadataInfrastructure(UpdateAutonomousExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousExadataInfrastructureRequest, UpdateAutonomousExadataInfrastructureResponse> ForUpdateAutonomousExadataInfrastructure(UpdateAutonomousExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousExadataInfrastructureRequest, UpdateAutonomousExadataInfrastructureResponse>(() =>
            {
                var response = client.UpdateAutonomousExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousVmClusterRequest, UpdateAutonomousVmClusterResponse> ForUpdateAutonomousVmCluster(UpdateAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateAutonomousVmClusterRequest, UpdateAutonomousVmClusterResponse> ForUpdateAutonomousVmCluster(UpdateAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateAutonomousVmClusterRequest, UpdateAutonomousVmClusterResponse>(() =>
            {
                var response = client.UpdateAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateBackupRequest, UpdateBackupResponse> ForUpdateBackup(UpdateBackupRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateBackupRequest, UpdateBackupResponse> ForUpdateBackup(UpdateBackupRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateBackupRequest, UpdateBackupResponse>(() =>
            {
                var response = client.UpdateBackup(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudAutonomousVmClusterRequest, UpdateCloudAutonomousVmClusterResponse> ForUpdateCloudAutonomousVmCluster(UpdateCloudAutonomousVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateCloudAutonomousVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudAutonomousVmClusterRequest, UpdateCloudAutonomousVmClusterResponse> ForUpdateCloudAutonomousVmCluster(UpdateCloudAutonomousVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateCloudAutonomousVmClusterRequest, UpdateCloudAutonomousVmClusterResponse>(() =>
            {
                var response = client.UpdateCloudAutonomousVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudExadataInfrastructureRequest, UpdateCloudExadataInfrastructureResponse> ForUpdateCloudExadataInfrastructure(UpdateCloudExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateCloudExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudExadataInfrastructureRequest, UpdateCloudExadataInfrastructureResponse> ForUpdateCloudExadataInfrastructure(UpdateCloudExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateCloudExadataInfrastructureRequest, UpdateCloudExadataInfrastructureResponse>(() =>
            {
                var response = client.UpdateCloudExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudVmClusterRequest, UpdateCloudVmClusterResponse> ForUpdateCloudVmCluster(UpdateCloudVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateCloudVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudVmClusterRequest, UpdateCloudVmClusterResponse> ForUpdateCloudVmCluster(UpdateCloudVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateCloudVmClusterRequest, UpdateCloudVmClusterResponse>(() =>
            {
                var response = client.UpdateCloudVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudVmClusterIormConfigRequest, UpdateCloudVmClusterIormConfigResponse> ForUpdateCloudVmClusterIormConfig(UpdateCloudVmClusterIormConfigRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateCloudVmClusterIormConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateCloudVmClusterIormConfigRequest, UpdateCloudVmClusterIormConfigResponse> ForUpdateCloudVmClusterIormConfig(UpdateCloudVmClusterIormConfigRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateCloudVmClusterIormConfigRequest, UpdateCloudVmClusterIormConfigResponse>(() =>
            {
                var response = client.UpdateCloudVmClusterIormConfig(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateConsoleConnectionRequest, UpdateConsoleConnectionResponse> ForUpdateConsoleConnection(UpdateConsoleConnectionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateConsoleConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateConsoleConnectionRequest, UpdateConsoleConnectionResponse> ForUpdateConsoleConnection(UpdateConsoleConnectionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateConsoleConnectionRequest, UpdateConsoleConnectionResponse>(() =>
            {
                var response = client.UpdateConsoleConnection(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateConsoleHistoryRequest, UpdateConsoleHistoryResponse> ForUpdateConsoleHistory(UpdateConsoleHistoryRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateConsoleHistory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateConsoleHistoryRequest, UpdateConsoleHistoryResponse> ForUpdateConsoleHistory(UpdateConsoleHistoryRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateConsoleHistoryRequest, UpdateConsoleHistoryResponse>(() =>
            {
                var response = client.UpdateConsoleHistory(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDataGuardRequest, UpdateDataGuardResponse> ForUpdateDataGuard(UpdateDataGuardRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDataGuard(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDataGuardRequest, UpdateDataGuardResponse> ForUpdateDataGuard(UpdateDataGuardRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDataGuardRequest, UpdateDataGuardResponse>(() =>
            {
                var response = client.UpdateDataGuard(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDataGuardAssociationRequest, UpdateDataGuardAssociationResponse> ForUpdateDataGuardAssociation(UpdateDataGuardAssociationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDataGuardAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDataGuardAssociationRequest, UpdateDataGuardAssociationResponse> ForUpdateDataGuardAssociation(UpdateDataGuardAssociationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDataGuardAssociationRequest, UpdateDataGuardAssociationResponse>(() =>
            {
                var response = client.UpdateDataGuardAssociation(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDatabaseRequest, UpdateDatabaseResponse> ForUpdateDatabase(UpdateDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDatabaseRequest, UpdateDatabaseResponse> ForUpdateDatabase(UpdateDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDatabaseRequest, UpdateDatabaseResponse>(() =>
            {
                var response = client.UpdateDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbHomeRequest, UpdateDbHomeResponse> ForUpdateDbHome(UpdateDbHomeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDbHome(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbHomeRequest, UpdateDbHomeResponse> ForUpdateDbHome(UpdateDbHomeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDbHomeRequest, UpdateDbHomeResponse>(() =>
            {
                var response = client.UpdateDbHome(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbNodeRequest, UpdateDbNodeResponse> ForUpdateDbNode(UpdateDbNodeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDbNode(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbNodeRequest, UpdateDbNodeResponse> ForUpdateDbNode(UpdateDbNodeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDbNodeRequest, UpdateDbNodeResponse>(() =>
            {
                var response = client.UpdateDbNode(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbSystemRequest, UpdateDbSystemResponse> ForUpdateDbSystem(UpdateDbSystemRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateDbSystemRequest, UpdateDbSystemResponse> ForUpdateDbSystem(UpdateDbSystemRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateDbSystemRequest, UpdateDbSystemResponse>(() =>
            {
                var response = client.UpdateDbSystem(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadataInfrastructureRequest, UpdateExadataInfrastructureResponse> ForUpdateExadataInfrastructure(UpdateExadataInfrastructureRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExadataInfrastructure(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadataInfrastructureRequest, UpdateExadataInfrastructureResponse> ForUpdateExadataInfrastructure(UpdateExadataInfrastructureRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExadataInfrastructureRequest, UpdateExadataInfrastructureResponse>(() =>
            {
                var response = client.UpdateExadataInfrastructure(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadataIormConfigRequest, UpdateExadataIormConfigResponse> ForUpdateExadataIormConfig(UpdateExadataIormConfigRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExadataIormConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadataIormConfigRequest, UpdateExadataIormConfigResponse> ForUpdateExadataIormConfig(UpdateExadataIormConfigRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExadataIormConfigRequest, UpdateExadataIormConfigResponse>(() =>
            {
                var response = client.UpdateExadataIormConfig(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadbVmClusterRequest, UpdateExadbVmClusterResponse> ForUpdateExadbVmCluster(UpdateExadbVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExadbVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExadbVmClusterRequest, UpdateExadbVmClusterResponse> ForUpdateExadbVmCluster(UpdateExadbVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExadbVmClusterRequest, UpdateExadbVmClusterResponse>(() =>
            {
                var response = client.UpdateExadbVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExascaleDbStorageVaultRequest, UpdateExascaleDbStorageVaultResponse> ForUpdateExascaleDbStorageVault(UpdateExascaleDbStorageVaultRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExascaleDbStorageVault(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExascaleDbStorageVaultRequest, UpdateExascaleDbStorageVaultResponse> ForUpdateExascaleDbStorageVault(UpdateExascaleDbStorageVaultRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExascaleDbStorageVaultRequest, UpdateExascaleDbStorageVaultResponse>(() =>
            {
                var response = client.UpdateExascaleDbStorageVault(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExecutionActionRequest, UpdateExecutionActionResponse> ForUpdateExecutionAction(UpdateExecutionActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExecutionAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExecutionActionRequest, UpdateExecutionActionResponse> ForUpdateExecutionAction(UpdateExecutionActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExecutionActionRequest, UpdateExecutionActionResponse>(() =>
            {
                var response = client.UpdateExecutionAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExecutionWindowRequest, UpdateExecutionWindowResponse> ForUpdateExecutionWindow(UpdateExecutionWindowRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExecutionWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExecutionWindowRequest, UpdateExecutionWindowResponse> ForUpdateExecutionWindow(UpdateExecutionWindowRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExecutionWindowRequest, UpdateExecutionWindowResponse>(() =>
            {
                var response = client.UpdateExecutionWindow(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalContainerDatabaseRequest, UpdateExternalContainerDatabaseResponse> ForUpdateExternalContainerDatabase(UpdateExternalContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExternalContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalContainerDatabaseRequest, UpdateExternalContainerDatabaseResponse> ForUpdateExternalContainerDatabase(UpdateExternalContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExternalContainerDatabaseRequest, UpdateExternalContainerDatabaseResponse>(() =>
            {
                var response = client.UpdateExternalContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalDatabaseConnectorRequest, UpdateExternalDatabaseConnectorResponse> ForUpdateExternalDatabaseConnector(UpdateExternalDatabaseConnectorRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExternalDatabaseConnector(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalDatabaseConnectorRequest, UpdateExternalDatabaseConnectorResponse> ForUpdateExternalDatabaseConnector(UpdateExternalDatabaseConnectorRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExternalDatabaseConnectorRequest, UpdateExternalDatabaseConnectorResponse>(() =>
            {
                var response = client.UpdateExternalDatabaseConnector(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalNonContainerDatabaseRequest, UpdateExternalNonContainerDatabaseResponse> ForUpdateExternalNonContainerDatabase(UpdateExternalNonContainerDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExternalNonContainerDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalNonContainerDatabaseRequest, UpdateExternalNonContainerDatabaseResponse> ForUpdateExternalNonContainerDatabase(UpdateExternalNonContainerDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExternalNonContainerDatabaseRequest, UpdateExternalNonContainerDatabaseResponse>(() =>
            {
                var response = client.UpdateExternalNonContainerDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalPluggableDatabaseRequest, UpdateExternalPluggableDatabaseResponse> ForUpdateExternalPluggableDatabase(UpdateExternalPluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateExternalPluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateExternalPluggableDatabaseRequest, UpdateExternalPluggableDatabaseResponse> ForUpdateExternalPluggableDatabase(UpdateExternalPluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateExternalPluggableDatabaseRequest, UpdateExternalPluggableDatabaseResponse>(() =>
            {
                var response = client.UpdateExternalPluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdatePluggableDatabaseRequest, UpdatePluggableDatabaseResponse> ForUpdatePluggableDatabase(UpdatePluggableDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdatePluggableDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdatePluggableDatabaseRequest, UpdatePluggableDatabaseResponse> ForUpdatePluggableDatabase(UpdatePluggableDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdatePluggableDatabaseRequest, UpdatePluggableDatabaseResponse>(() =>
            {
                var response = client.UpdatePluggableDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateScheduledActionRequest, UpdateScheduledActionResponse> ForUpdateScheduledAction(UpdateScheduledActionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateScheduledAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateScheduledActionRequest, UpdateScheduledActionResponse> ForUpdateScheduledAction(UpdateScheduledActionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateScheduledActionRequest, UpdateScheduledActionResponse>(() =>
            {
                var response = client.UpdateScheduledAction(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSchedulingPolicyRequest, UpdateSchedulingPolicyResponse> ForUpdateSchedulingPolicy(UpdateSchedulingPolicyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateSchedulingPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSchedulingPolicyRequest, UpdateSchedulingPolicyResponse> ForUpdateSchedulingPolicy(UpdateSchedulingPolicyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateSchedulingPolicyRequest, UpdateSchedulingPolicyResponse>(() =>
            {
                var response = client.UpdateSchedulingPolicy(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSchedulingWindowRequest, UpdateSchedulingWindowResponse> ForUpdateSchedulingWindow(UpdateSchedulingWindowRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateSchedulingWindow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSchedulingWindowRequest, UpdateSchedulingWindowResponse> ForUpdateSchedulingWindow(UpdateSchedulingWindowRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateSchedulingWindowRequest, UpdateSchedulingWindowResponse>(() =>
            {
                var response = client.UpdateSchedulingWindow(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateVmClusterRequest, UpdateVmClusterResponse> ForUpdateVmCluster(UpdateVmClusterRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateVmCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateVmClusterRequest, UpdateVmClusterResponse> ForUpdateVmCluster(UpdateVmClusterRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateVmClusterRequest, UpdateVmClusterResponse>(() =>
            {
                var response = client.UpdateVmCluster(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateVmClusterNetworkRequest, UpdateVmClusterNetworkResponse> ForUpdateVmClusterNetwork(UpdateVmClusterNetworkRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateVmClusterNetworkRequest, UpdateVmClusterNetworkResponse> ForUpdateVmClusterNetwork(UpdateVmClusterNetworkRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateVmClusterNetworkRequest, UpdateVmClusterNetworkResponse>(() =>
            {
                var response = client.UpdateVmClusterNetwork(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpgradeDatabaseRequest, UpgradeDatabaseResponse> ForUpgradeDatabase(UpgradeDatabaseRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpgradeDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpgradeDatabaseRequest, UpgradeDatabaseResponse> ForUpgradeDatabase(UpgradeDatabaseRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpgradeDatabaseRequest, UpgradeDatabaseResponse>(() =>
            {
                var response = client.UpgradeDatabase(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpgradeDbSystemRequest, UpgradeDbSystemResponse> ForUpgradeDbSystem(UpgradeDbSystemRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpgradeDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpgradeDbSystemRequest, UpgradeDbSystemResponse> ForUpgradeDbSystem(UpgradeDbSystemRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpgradeDbSystemRequest, UpgradeDbSystemResponse>(() =>
            {
                var response = client.UpgradeDbSystem(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ValidateVmClusterNetworkRequest, ValidateVmClusterNetworkResponse> ForValidateVmClusterNetwork(ValidateVmClusterNetworkRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForValidateVmClusterNetwork(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ValidateVmClusterNetworkRequest, ValidateVmClusterNetworkResponse> ForValidateVmClusterNetwork(ValidateVmClusterNetworkRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ValidateVmClusterNetworkRequest, ValidateVmClusterNetworkResponse>(() =>
            {
                var response = client.ValidateVmClusterNetwork(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
    }
}
