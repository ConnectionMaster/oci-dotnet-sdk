/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.DatasafeService.Models;
using Oci.DatasafeService.Requests;
using Oci.DatasafeService.Responses;

namespace Oci.DatasafeService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of DataSafe.
    /// </summary>
    public class DataSafeWaiters
    {
        private readonly DataSafeClient client;

        public  DataSafeWaiters(DataSafeClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertRequest, GetAlertResponse> ForAlert(GetAlertRequest request, params AlertLifecycleState[] targetStates)
        {
            return this.ForAlert(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertRequest, GetAlertResponse> ForAlert(GetAlertRequest request, WaiterConfiguration config, params AlertLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAlertRequest, GetAlertResponse>(
                request,
                request => client.GetAlert(request),
                response => targetStates.Contains(response.Alert.LifecycleState.Value)
            );
            return new Waiter<GetAlertRequest, GetAlertResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertPolicyRequest, GetAlertPolicyResponse> ForAlertPolicy(GetAlertPolicyRequest request, params AlertPolicyLifecycleState[] targetStates)
        {
            return this.ForAlertPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertPolicyRequest, GetAlertPolicyResponse> ForAlertPolicy(GetAlertPolicyRequest request, WaiterConfiguration config, params AlertPolicyLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAlertPolicyRequest, GetAlertPolicyResponse>(
                request,
                request => client.GetAlertPolicy(request),
                response => targetStates.Contains(response.AlertPolicy.LifecycleState.Value),
                targetStates.Contains(AlertPolicyLifecycleState.Deleted)
            );
            return new Waiter<GetAlertPolicyRequest, GetAlertPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertPolicyRuleRequest, GetAlertPolicyRuleResponse> ForAlertPolicyRule(GetAlertPolicyRuleRequest request, params AlertPolicyRuleLifecycleState[] targetStates)
        {
            return this.ForAlertPolicyRule(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAlertPolicyRuleRequest, GetAlertPolicyRuleResponse> ForAlertPolicyRule(GetAlertPolicyRuleRequest request, WaiterConfiguration config, params AlertPolicyRuleLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAlertPolicyRuleRequest, GetAlertPolicyRuleResponse>(
                request,
                request => client.GetAlertPolicyRule(request),
                response => targetStates.Contains(response.AlertPolicyRule.LifecycleState.Value)
            );
            return new Waiter<GetAlertPolicyRuleRequest, GetAlertPolicyRuleResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditArchiveRetrievalRequest, GetAuditArchiveRetrievalResponse> ForAuditArchiveRetrieval(GetAuditArchiveRetrievalRequest request, params AuditArchiveRetrievalLifecycleState[] targetStates)
        {
            return this.ForAuditArchiveRetrieval(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditArchiveRetrievalRequest, GetAuditArchiveRetrievalResponse> ForAuditArchiveRetrieval(GetAuditArchiveRetrievalRequest request, WaiterConfiguration config, params AuditArchiveRetrievalLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAuditArchiveRetrievalRequest, GetAuditArchiveRetrievalResponse>(
                request,
                request => client.GetAuditArchiveRetrieval(request),
                response => targetStates.Contains(response.AuditArchiveRetrieval.LifecycleState.Value),
                targetStates.Contains(AuditArchiveRetrievalLifecycleState.Deleted)
            );
            return new Waiter<GetAuditArchiveRetrievalRequest, GetAuditArchiveRetrievalResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditPolicyRequest, GetAuditPolicyResponse> ForAuditPolicy(GetAuditPolicyRequest request, params AuditPolicyLifecycleState[] targetStates)
        {
            return this.ForAuditPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditPolicyRequest, GetAuditPolicyResponse> ForAuditPolicy(GetAuditPolicyRequest request, WaiterConfiguration config, params AuditPolicyLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAuditPolicyRequest, GetAuditPolicyResponse>(
                request,
                request => client.GetAuditPolicy(request),
                response => targetStates.Contains(response.AuditPolicy.LifecycleState.Value),
                targetStates.Contains(AuditPolicyLifecycleState.Deleted)
            );
            return new Waiter<GetAuditPolicyRequest, GetAuditPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditProfileRequest, GetAuditProfileResponse> ForAuditProfile(GetAuditProfileRequest request, params AuditProfileLifecycleState[] targetStates)
        {
            return this.ForAuditProfile(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditProfileRequest, GetAuditProfileResponse> ForAuditProfile(GetAuditProfileRequest request, WaiterConfiguration config, params AuditProfileLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAuditProfileRequest, GetAuditProfileResponse>(
                request,
                request => client.GetAuditProfile(request),
                response => targetStates.Contains(response.AuditProfile.LifecycleState.Value),
                targetStates.Contains(AuditProfileLifecycleState.Deleted)
            );
            return new Waiter<GetAuditProfileRequest, GetAuditProfileResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditTrailRequest, GetAuditTrailResponse> ForAuditTrail(GetAuditTrailRequest request, params AuditTrailLifecycleState[] targetStates)
        {
            return this.ForAuditTrail(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAuditTrailRequest, GetAuditTrailResponse> ForAuditTrail(GetAuditTrailRequest request, WaiterConfiguration config, params AuditTrailLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAuditTrailRequest, GetAuditTrailResponse>(
                request,
                request => client.GetAuditTrail(request),
                response => targetStates.Contains(response.AuditTrail.LifecycleState.Value)
            );
            return new Waiter<GetAuditTrailRequest, GetAuditTrailResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSafeConfigurationRequest, GetDataSafeConfigurationResponse> ForDataSafeConfiguration(GetDataSafeConfigurationRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDataSafeConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSafeConfigurationRequest, GetDataSafeConfigurationResponse> ForDataSafeConfiguration(GetDataSafeConfigurationRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDataSafeConfigurationRequest, GetDataSafeConfigurationResponse>(
                request,
                request => client.GetDataSafeConfiguration(request),
                response => targetStates.Contains(response.DataSafeConfiguration.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDataSafeConfigurationRequest, GetDataSafeConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSafePrivateEndpointRequest, GetDataSafePrivateEndpointResponse> ForDataSafePrivateEndpoint(GetDataSafePrivateEndpointRequest request, params LifecycleState[] targetStates)
        {
            return this.ForDataSafePrivateEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSafePrivateEndpointRequest, GetDataSafePrivateEndpointResponse> ForDataSafePrivateEndpoint(GetDataSafePrivateEndpointRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDataSafePrivateEndpointRequest, GetDataSafePrivateEndpointResponse>(
                request,
                request => client.GetDataSafePrivateEndpoint(request),
                response => targetStates.Contains(response.DataSafePrivateEndpoint.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetDataSafePrivateEndpointRequest, GetDataSafePrivateEndpointResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseSecurityConfigRequest, GetDatabaseSecurityConfigResponse> ForDatabaseSecurityConfig(GetDatabaseSecurityConfigRequest request, params DatabaseSecurityConfigLifecycleState[] targetStates)
        {
            return this.ForDatabaseSecurityConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDatabaseSecurityConfigRequest, GetDatabaseSecurityConfigResponse> ForDatabaseSecurityConfig(GetDatabaseSecurityConfigRequest request, WaiterConfiguration config, params DatabaseSecurityConfigLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDatabaseSecurityConfigRequest, GetDatabaseSecurityConfigResponse>(
                request,
                request => client.GetDatabaseSecurityConfig(request),
                response => targetStates.Contains(response.DatabaseSecurityConfig.LifecycleState.Value),
                targetStates.Contains(DatabaseSecurityConfigLifecycleState.Deleted)
            );
            return new Waiter<GetDatabaseSecurityConfigRequest, GetDatabaseSecurityConfigResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDiscoveryJobRequest, GetDiscoveryJobResponse> ForDiscoveryJob(GetDiscoveryJobRequest request, params DiscoveryLifecycleState[] targetStates)
        {
            return this.ForDiscoveryJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDiscoveryJobRequest, GetDiscoveryJobResponse> ForDiscoveryJob(GetDiscoveryJobRequest request, WaiterConfiguration config, params DiscoveryLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetDiscoveryJobRequest, GetDiscoveryJobResponse>(
                request,
                request => client.GetDiscoveryJob(request),
                response => targetStates.Contains(response.DiscoveryJob.LifecycleState.Value),
                targetStates.Contains(DiscoveryLifecycleState.Deleted)
            );
            return new Waiter<GetDiscoveryJobRequest, GetDiscoveryJobResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLibraryMaskingFormatRequest, GetLibraryMaskingFormatResponse> ForLibraryMaskingFormat(GetLibraryMaskingFormatRequest request, params MaskingLifecycleState[] targetStates)
        {
            return this.ForLibraryMaskingFormat(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLibraryMaskingFormatRequest, GetLibraryMaskingFormatResponse> ForLibraryMaskingFormat(GetLibraryMaskingFormatRequest request, WaiterConfiguration config, params MaskingLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetLibraryMaskingFormatRequest, GetLibraryMaskingFormatResponse>(
                request,
                request => client.GetLibraryMaskingFormat(request),
                response => targetStates.Contains(response.LibraryMaskingFormat.LifecycleState.Value),
                targetStates.Contains(MaskingLifecycleState.Deleted)
            );
            return new Waiter<GetLibraryMaskingFormatRequest, GetLibraryMaskingFormatResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingColumnRequest, GetMaskingColumnResponse> ForMaskingColumn(GetMaskingColumnRequest request, params MaskingColumnLifecycleState[] targetStates)
        {
            return this.ForMaskingColumn(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingColumnRequest, GetMaskingColumnResponse> ForMaskingColumn(GetMaskingColumnRequest request, WaiterConfiguration config, params MaskingColumnLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetMaskingColumnRequest, GetMaskingColumnResponse>(
                request,
                request => client.GetMaskingColumn(request),
                response => targetStates.Contains(response.MaskingColumn.LifecycleState.Value)
            );
            return new Waiter<GetMaskingColumnRequest, GetMaskingColumnResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingPolicyRequest, GetMaskingPolicyResponse> ForMaskingPolicy(GetMaskingPolicyRequest request, params MaskingLifecycleState[] targetStates)
        {
            return this.ForMaskingPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingPolicyRequest, GetMaskingPolicyResponse> ForMaskingPolicy(GetMaskingPolicyRequest request, WaiterConfiguration config, params MaskingLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetMaskingPolicyRequest, GetMaskingPolicyResponse>(
                request,
                request => client.GetMaskingPolicy(request),
                response => targetStates.Contains(response.MaskingPolicy.LifecycleState.Value),
                targetStates.Contains(MaskingLifecycleState.Deleted)
            );
            return new Waiter<GetMaskingPolicyRequest, GetMaskingPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingPolicyHealthReportRequest, GetMaskingPolicyHealthReportResponse> ForMaskingPolicyHealthReport(GetMaskingPolicyHealthReportRequest request, params MaskingPolicyHealthReport.LifecycleStateEnum[] targetStates)
        {
            return this.ForMaskingPolicyHealthReport(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingPolicyHealthReportRequest, GetMaskingPolicyHealthReportResponse> ForMaskingPolicyHealthReport(GetMaskingPolicyHealthReportRequest request, WaiterConfiguration config, params MaskingPolicyHealthReport.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMaskingPolicyHealthReportRequest, GetMaskingPolicyHealthReportResponse>(
                request,
                request => client.GetMaskingPolicyHealthReport(request),
                response => targetStates.Contains(response.MaskingPolicyHealthReport.LifecycleState.Value)
            );
            return new Waiter<GetMaskingPolicyHealthReportRequest, GetMaskingPolicyHealthReportResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingReportRequest, GetMaskingReportResponse> ForMaskingReport(GetMaskingReportRequest request, params MaskingLifecycleState[] targetStates)
        {
            return this.ForMaskingReport(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMaskingReportRequest, GetMaskingReportResponse> ForMaskingReport(GetMaskingReportRequest request, WaiterConfiguration config, params MaskingLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetMaskingReportRequest, GetMaskingReportResponse>(
                request,
                request => client.GetMaskingReport(request),
                response => targetStates.Contains(response.MaskingReport.LifecycleState.Value),
                targetStates.Contains(MaskingLifecycleState.Deleted)
            );
            return new Waiter<GetMaskingReportRequest, GetMaskingReportResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetOnPremConnectorRequest, GetOnPremConnectorResponse> ForOnPremConnector(GetOnPremConnectorRequest request, params LifecycleState[] targetStates)
        {
            return this.ForOnPremConnector(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetOnPremConnectorRequest, GetOnPremConnectorResponse> ForOnPremConnector(GetOnPremConnectorRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetOnPremConnectorRequest, GetOnPremConnectorResponse>(
                request,
                request => client.GetOnPremConnector(request),
                response => targetStates.Contains(response.OnPremConnector.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetOnPremConnectorRequest, GetOnPremConnectorResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPeerTargetDatabaseRequest, GetPeerTargetDatabaseResponse> ForPeerTargetDatabase(GetPeerTargetDatabaseRequest request, params TargetDatabaseLifecycleState[] targetStates)
        {
            return this.ForPeerTargetDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPeerTargetDatabaseRequest, GetPeerTargetDatabaseResponse> ForPeerTargetDatabase(GetPeerTargetDatabaseRequest request, WaiterConfiguration config, params TargetDatabaseLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetPeerTargetDatabaseRequest, GetPeerTargetDatabaseResponse>(
                request,
                request => client.GetPeerTargetDatabase(request),
                response => targetStates.Contains(response.PeerTargetDatabase.LifecycleState.Value),
                targetStates.Contains(TargetDatabaseLifecycleState.Deleted)
            );
            return new Waiter<GetPeerTargetDatabaseRequest, GetPeerTargetDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReportRequest, GetReportResponse> ForReport(GetReportRequest request, params ReportLifecycleState[] targetStates)
        {
            return this.ForReport(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReportRequest, GetReportResponse> ForReport(GetReportRequest request, WaiterConfiguration config, params ReportLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetReportRequest, GetReportResponse>(
                request,
                request => client.GetReport(request),
                response => targetStates.Contains(response.Report.LifecycleState.Value)
            );
            return new Waiter<GetReportRequest, GetReportResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReportDefinitionRequest, GetReportDefinitionResponse> ForReportDefinition(GetReportDefinitionRequest request, params ReportDefinitionLifecycleState[] targetStates)
        {
            return this.ForReportDefinition(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReportDefinitionRequest, GetReportDefinitionResponse> ForReportDefinition(GetReportDefinitionRequest request, WaiterConfiguration config, params ReportDefinitionLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetReportDefinitionRequest, GetReportDefinitionResponse>(
                request,
                request => client.GetReportDefinition(request),
                response => targetStates.Contains(response.ReportDefinition.LifecycleState.Value),
                targetStates.Contains(ReportDefinitionLifecycleState.Deleted)
            );
            return new Waiter<GetReportDefinitionRequest, GetReportDefinitionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSdmMaskingPolicyDifferenceRequest, GetSdmMaskingPolicyDifferenceResponse> ForSdmMaskingPolicyDifference(GetSdmMaskingPolicyDifferenceRequest request, params SdmMaskingPolicyDifference.LifecycleStateEnum[] targetStates)
        {
            return this.ForSdmMaskingPolicyDifference(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSdmMaskingPolicyDifferenceRequest, GetSdmMaskingPolicyDifferenceResponse> ForSdmMaskingPolicyDifference(GetSdmMaskingPolicyDifferenceRequest request, WaiterConfiguration config, params SdmMaskingPolicyDifference.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSdmMaskingPolicyDifferenceRequest, GetSdmMaskingPolicyDifferenceResponse>(
                request,
                request => client.GetSdmMaskingPolicyDifference(request),
                response => targetStates.Contains(response.SdmMaskingPolicyDifference.LifecycleState.Value),
                targetStates.Contains(SdmMaskingPolicyDifference.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetSdmMaskingPolicyDifferenceRequest, GetSdmMaskingPolicyDifferenceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityAssessmentRequest, GetSecurityAssessmentResponse> ForSecurityAssessment(GetSecurityAssessmentRequest request, params SecurityAssessmentLifecycleState[] targetStates)
        {
            return this.ForSecurityAssessment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityAssessmentRequest, GetSecurityAssessmentResponse> ForSecurityAssessment(GetSecurityAssessmentRequest request, WaiterConfiguration config, params SecurityAssessmentLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityAssessmentRequest, GetSecurityAssessmentResponse>(
                request,
                request => client.GetSecurityAssessment(request),
                response => targetStates.Contains(response.SecurityAssessment.LifecycleState.Value),
                targetStates.Contains(SecurityAssessmentLifecycleState.Deleted)
            );
            return new Waiter<GetSecurityAssessmentRequest, GetSecurityAssessmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityAssessmentComparisonRequest, GetSecurityAssessmentComparisonResponse> ForSecurityAssessmentComparison(GetSecurityAssessmentComparisonRequest request, params SecurityAssessmentComparison.LifecycleStateEnum[] targetStates)
        {
            return this.ForSecurityAssessmentComparison(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityAssessmentComparisonRequest, GetSecurityAssessmentComparisonResponse> ForSecurityAssessmentComparison(GetSecurityAssessmentComparisonRequest request, WaiterConfiguration config, params SecurityAssessmentComparison.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityAssessmentComparisonRequest, GetSecurityAssessmentComparisonResponse>(
                request,
                request => client.GetSecurityAssessmentComparison(request),
                response => targetStates.Contains(response.SecurityAssessmentComparison.LifecycleState.Value)
            );
            return new Waiter<GetSecurityAssessmentComparisonRequest, GetSecurityAssessmentComparisonResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyRequest, GetSecurityPolicyResponse> ForSecurityPolicy(GetSecurityPolicyRequest request, params SecurityPolicyLifecycleState[] targetStates)
        {
            return this.ForSecurityPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyRequest, GetSecurityPolicyResponse> ForSecurityPolicy(GetSecurityPolicyRequest request, WaiterConfiguration config, params SecurityPolicyLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityPolicyRequest, GetSecurityPolicyResponse>(
                request,
                request => client.GetSecurityPolicy(request),
                response => targetStates.Contains(response.SecurityPolicy.LifecycleState.Value),
                targetStates.Contains(SecurityPolicyLifecycleState.Deleted)
            );
            return new Waiter<GetSecurityPolicyRequest, GetSecurityPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyDeploymentRequest, GetSecurityPolicyDeploymentResponse> ForSecurityPolicyDeployment(GetSecurityPolicyDeploymentRequest request, params SecurityPolicyDeploymentLifecycleState[] targetStates)
        {
            return this.ForSecurityPolicyDeployment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyDeploymentRequest, GetSecurityPolicyDeploymentResponse> ForSecurityPolicyDeployment(GetSecurityPolicyDeploymentRequest request, WaiterConfiguration config, params SecurityPolicyDeploymentLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityPolicyDeploymentRequest, GetSecurityPolicyDeploymentResponse>(
                request,
                request => client.GetSecurityPolicyDeployment(request),
                response => targetStates.Contains(response.SecurityPolicyDeployment.LifecycleState.Value),
                targetStates.Contains(SecurityPolicyDeploymentLifecycleState.Deleted)
            );
            return new Waiter<GetSecurityPolicyDeploymentRequest, GetSecurityPolicyDeploymentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyReportRequest, GetSecurityPolicyReportResponse> ForSecurityPolicyReport(GetSecurityPolicyReportRequest request, params SecurityPolicyReportLifecycleState[] targetStates)
        {
            return this.ForSecurityPolicyReport(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityPolicyReportRequest, GetSecurityPolicyReportResponse> ForSecurityPolicyReport(GetSecurityPolicyReportRequest request, WaiterConfiguration config, params SecurityPolicyReportLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityPolicyReportRequest, GetSecurityPolicyReportResponse>(
                request,
                request => client.GetSecurityPolicyReport(request),
                response => targetStates.Contains(response.SecurityPolicyReport.LifecycleState.Value),
                targetStates.Contains(SecurityPolicyReportLifecycleState.Deleted)
            );
            return new Waiter<GetSecurityPolicyReportRequest, GetSecurityPolicyReportResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveColumnRequest, GetSensitiveColumnResponse> ForSensitiveColumn(GetSensitiveColumnRequest request, params SensitiveColumnLifecycleState[] targetStates)
        {
            return this.ForSensitiveColumn(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveColumnRequest, GetSensitiveColumnResponse> ForSensitiveColumn(GetSensitiveColumnRequest request, WaiterConfiguration config, params SensitiveColumnLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSensitiveColumnRequest, GetSensitiveColumnResponse>(
                request,
                request => client.GetSensitiveColumn(request),
                response => targetStates.Contains(response.SensitiveColumn.LifecycleState.Value)
            );
            return new Waiter<GetSensitiveColumnRequest, GetSensitiveColumnResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveDataModelRequest, GetSensitiveDataModelResponse> ForSensitiveDataModel(GetSensitiveDataModelRequest request, params DiscoveryLifecycleState[] targetStates)
        {
            return this.ForSensitiveDataModel(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveDataModelRequest, GetSensitiveDataModelResponse> ForSensitiveDataModel(GetSensitiveDataModelRequest request, WaiterConfiguration config, params DiscoveryLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSensitiveDataModelRequest, GetSensitiveDataModelResponse>(
                request,
                request => client.GetSensitiveDataModel(request),
                response => targetStates.Contains(response.SensitiveDataModel.LifecycleState.Value),
                targetStates.Contains(DiscoveryLifecycleState.Deleted)
            );
            return new Waiter<GetSensitiveDataModelRequest, GetSensitiveDataModelResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveTypeRequest, GetSensitiveTypeResponse> ForSensitiveType(GetSensitiveTypeRequest request, params DiscoveryLifecycleState[] targetStates)
        {
            return this.ForSensitiveType(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSensitiveTypeRequest, GetSensitiveTypeResponse> ForSensitiveType(GetSensitiveTypeRequest request, WaiterConfiguration config, params DiscoveryLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSensitiveTypeRequest, GetSensitiveTypeResponse>(
                request,
                request => client.GetSensitiveType(request),
                response => targetStates.Contains(response.SensitiveType.LifecycleState.Value),
                targetStates.Contains(DiscoveryLifecycleState.Deleted)
            );
            return new Waiter<GetSensitiveTypeRequest, GetSensitiveTypeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSqlCollectionRequest, GetSqlCollectionResponse> ForSqlCollection(GetSqlCollectionRequest request, params SqlCollectionLifecycleState[] targetStates)
        {
            return this.ForSqlCollection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSqlCollectionRequest, GetSqlCollectionResponse> ForSqlCollection(GetSqlCollectionRequest request, WaiterConfiguration config, params SqlCollectionLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSqlCollectionRequest, GetSqlCollectionResponse>(
                request,
                request => client.GetSqlCollection(request),
                response => targetStates.Contains(response.SqlCollection.LifecycleState.Value),
                targetStates.Contains(SqlCollectionLifecycleState.Deleted)
            );
            return new Waiter<GetSqlCollectionRequest, GetSqlCollectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSqlFirewallPolicyRequest, GetSqlFirewallPolicyResponse> ForSqlFirewallPolicy(GetSqlFirewallPolicyRequest request, params SqlFirewallPolicyLifecycleState[] targetStates)
        {
            return this.ForSqlFirewallPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSqlFirewallPolicyRequest, GetSqlFirewallPolicyResponse> ForSqlFirewallPolicy(GetSqlFirewallPolicyRequest request, WaiterConfiguration config, params SqlFirewallPolicyLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetSqlFirewallPolicyRequest, GetSqlFirewallPolicyResponse>(
                request,
                request => client.GetSqlFirewallPolicy(request),
                response => targetStates.Contains(response.SqlFirewallPolicy.LifecycleState.Value),
                targetStates.Contains(SqlFirewallPolicyLifecycleState.Deleted)
            );
            return new Waiter<GetSqlFirewallPolicyRequest, GetSqlFirewallPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetAlertPolicyAssociationRequest, GetTargetAlertPolicyAssociationResponse> ForTargetAlertPolicyAssociation(GetTargetAlertPolicyAssociationRequest request, params AlertPolicyLifecycleState[] targetStates)
        {
            return this.ForTargetAlertPolicyAssociation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetAlertPolicyAssociationRequest, GetTargetAlertPolicyAssociationResponse> ForTargetAlertPolicyAssociation(GetTargetAlertPolicyAssociationRequest request, WaiterConfiguration config, params AlertPolicyLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetTargetAlertPolicyAssociationRequest, GetTargetAlertPolicyAssociationResponse>(
                request,
                request => client.GetTargetAlertPolicyAssociation(request),
                response => targetStates.Contains(response.TargetAlertPolicyAssociation.LifecycleState.Value),
                targetStates.Contains(AlertPolicyLifecycleState.Deleted)
            );
            return new Waiter<GetTargetAlertPolicyAssociationRequest, GetTargetAlertPolicyAssociationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetDatabaseRequest, GetTargetDatabaseResponse> ForTargetDatabase(GetTargetDatabaseRequest request, params TargetDatabaseLifecycleState[] targetStates)
        {
            return this.ForTargetDatabase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetDatabaseRequest, GetTargetDatabaseResponse> ForTargetDatabase(GetTargetDatabaseRequest request, WaiterConfiguration config, params TargetDatabaseLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetTargetDatabaseRequest, GetTargetDatabaseResponse>(
                request,
                request => client.GetTargetDatabase(request),
                response => targetStates.Contains(response.TargetDatabase.LifecycleState.Value),
                targetStates.Contains(TargetDatabaseLifecycleState.Deleted)
            );
            return new Waiter<GetTargetDatabaseRequest, GetTargetDatabaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetUserAssessmentRequest, GetUserAssessmentResponse> ForUserAssessment(GetUserAssessmentRequest request, params UserAssessmentLifecycleState[] targetStates)
        {
            return this.ForUserAssessment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetUserAssessmentRequest, GetUserAssessmentResponse> ForUserAssessment(GetUserAssessmentRequest request, WaiterConfiguration config, params UserAssessmentLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetUserAssessmentRequest, GetUserAssessmentResponse>(
                request,
                request => client.GetUserAssessment(request),
                response => targetStates.Contains(response.UserAssessment.LifecycleState.Value),
                targetStates.Contains(UserAssessmentLifecycleState.Deleted)
            );
            return new Waiter<GetUserAssessmentRequest, GetUserAssessmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetUserAssessmentComparisonRequest, GetUserAssessmentComparisonResponse> ForUserAssessmentComparison(GetUserAssessmentComparisonRequest request, params UserAssessmentComparison.LifecycleStateEnum[] targetStates)
        {
            return this.ForUserAssessmentComparison(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetUserAssessmentComparisonRequest, GetUserAssessmentComparisonResponse> ForUserAssessmentComparison(GetUserAssessmentComparisonRequest request, WaiterConfiguration config, params UserAssessmentComparison.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetUserAssessmentComparisonRequest, GetUserAssessmentComparisonResponse>(
                request,
                request => client.GetUserAssessmentComparison(request),
                response => targetStates.Contains(response.UserAssessmentComparison.LifecycleState.Value)
            );
            return new Waiter<GetUserAssessmentComparisonRequest, GetUserAssessmentComparisonResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params WorkRequest.StatusEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
