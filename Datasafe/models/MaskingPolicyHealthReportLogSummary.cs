/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatasafeService.Models
{
    /// <summary>
    /// A log entry related to the pre-masking health check.
    /// </summary>
    public class MaskingPolicyHealthReportLogSummary 
    {
                ///
        /// <value>
        /// The log entry type.
        /// </value>
        ///
        public enum MessageTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "PASS")]
            Pass,
            [EnumMember(Value = "WARNING")]
            Warning,
            [EnumMember(Value = "ERROR")]
            Error
        };

        /// <value>
        /// The log entry type.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MessageType is required.")]
        [JsonProperty(PropertyName = "messageType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MessageTypeEnum> MessageType { get; set; }
        
        /// <value>
        /// The date and time the log entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Timestamp is required.")]
        [JsonProperty(PropertyName = "timestamp")]
        public System.Nullable<System.DateTime> Timestamp { get; set; }
        
        /// <value>
        /// A human-readable log entry.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Message is required.")]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        
        /// <value>
        /// A human-readable log entry to remedy any error or warnings in the masking policy.
        /// </value>
        [JsonProperty(PropertyName = "remediation")]
        public string Remediation { get; set; }
        
        /// <value>
        /// A human-readable description for the log entry.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Description is required.")]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
                ///
        /// <value>
        /// An enum type entry for each health check in the masking policy. Each enum describes a type of health check.
        /// INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables.
        /// PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking.
        /// TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. Also verifies that the specified tablespace by the user is valid, if user has provided one
        /// DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available.
        /// UNDO_TABLESPACE_CHECK checks if for all the instances of undo tablespace the AUTOEXTEND feature is enabled. 
        /// If it's not enabled, it further checks if the undo tablespace has any space remaining.
        /// STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not.
        /// OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled.
        /// DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled
        /// DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not.
        /// ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database.
        /// DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format.
        /// COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
        /// TIME_TRAVEL_CHECK checks if the masking tables have Time Travel enabled.
        /// INVALID_PACKAGE_CHECK checks if any of the required packages are in invalid state.
        /// 
        /// </value>
        ///
        public enum HealthCheckTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "INVALID_OBJECT_CHECK")]
            InvalidObjectCheck,
            [EnumMember(Value = "PRIVILEGE_CHECK")]
            PrivilegeCheck,
            [EnumMember(Value = "TABLESPACE_CHECK")]
            TablespaceCheck,
            [EnumMember(Value = "DATABASE_OR_SYSTEM_TRIGGERS_CHECK")]
            DatabaseOrSystemTriggersCheck,
            [EnumMember(Value = "UNDO_TABLESPACE_CHECK")]
            UndoTablespaceCheck,
            [EnumMember(Value = "STATE_STATS_CHECK")]
            StateStatsCheck,
            [EnumMember(Value = "OLS_POLICY_CHECK")]
            OlsPolicyCheck,
            [EnumMember(Value = "VPD_POLICY_CHECK")]
            VpdPolicyCheck,
            [EnumMember(Value = "DV_ENABLE_CHECK")]
            DvEnableCheck,
            [EnumMember(Value = "DE_COL_SIZE_CHECK")]
            DeColSizeCheck,
            [EnumMember(Value = "REDACTION_POLICY_CHECK")]
            RedactionPolicyCheck,
            [EnumMember(Value = "ACTIVE_MASK_JOB_CHECK")]
            ActiveMaskJobCheck,
            [EnumMember(Value = "TARGET_VALIDATION_CHECK")]
            TargetValidationCheck,
            [EnumMember(Value = "DETERMINISTIC_ENCRYPTION_FORMAT_CHECK")]
            DeterministicEncryptionFormatCheck,
            [EnumMember(Value = "COLUMN_EXIST_CHECK")]
            ColumnExistCheck,
            [EnumMember(Value = "TIME_TRAVEL_CHECK")]
            TimeTravelCheck,
            [EnumMember(Value = "INVALID_PACKAGE_CHECK")]
            InvalidPackageCheck
        };

        /// <value>
        /// An enum type entry for each health check in the masking policy. Each enum describes a type of health check.
        /// INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables.
        /// PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking.
        /// TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. Also verifies that the specified tablespace by the user is valid, if user has provided one
        /// DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available.
        /// UNDO_TABLESPACE_CHECK checks if for all the instances of undo tablespace the AUTOEXTEND feature is enabled. 
        /// If it's not enabled, it further checks if the undo tablespace has any space remaining.
        /// STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not.
        /// OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled.
        /// DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled
        /// DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not.
        /// ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database.
        /// DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format.
        /// COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
        /// TIME_TRAVEL_CHECK checks if the masking tables have Time Travel enabled.
        /// INVALID_PACKAGE_CHECK checks if any of the required packages are in invalid state.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "healthCheckType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<HealthCheckTypeEnum> HealthCheckType { get; set; }
        
    }
}
