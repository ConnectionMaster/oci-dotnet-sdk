/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatasafeService.Models
{
    /// <summary>
    /// Represents an audit policy relevant for the target database.The audit policy could be in any one of the following 3 states in the target database
    /// 1) Created and enabled
    /// 2) Created but not enabled
    /// 3) Not created
    /// For more details on relevant audit policies for the target database, refer to [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827).
    /// 
    /// </summary>
    public class AuditSpecification 
    {
        
        /// <value>
        /// Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AuditPolicyName is required.")]
        [JsonProperty(PropertyName = "auditPolicyName")]
        public string AuditPolicyName { get; set; }
        
        /// <value>
        /// Indicates the names of corresponding database policy ( or policies) in the target database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DatabasePolicyNames is required.")]
        [JsonProperty(PropertyName = "databasePolicyNames")]
        public System.Collections.Generic.List<string> DatabasePolicyNames { get; set; }
        
        /// <value>
        /// The category to which the audit policy belongs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AuditPolicyCategory is required.")]
        [JsonProperty(PropertyName = "auditPolicyCategory")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AuditPolicyCategory> AuditPolicyCategory { get; set; }
                ///
        /// <value>
        /// Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        /// </value>
        ///
        public enum EnableStatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ENABLED")]
            Enabled,
            [EnumMember(Value = "DISABLED")]
            Disabled,
            [EnumMember(Value = "PARTIALLY_ENABLED")]
            PartiallyEnabled
        };

        /// <value>
        /// Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EnableStatus is required.")]
        [JsonProperty(PropertyName = "enableStatus")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<EnableStatusEnum> EnableStatus { get; set; }
        
        /// <value>
        /// Provides information about the policy that has been only partially enabled.
        /// </value>
        [JsonProperty(PropertyName = "partiallyEnabledMsg")]
        public string PartiallyEnabledMsg { get; set; }
        
        /// <value>
        /// Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsEnabledForAllUsers is required.")]
        [JsonProperty(PropertyName = "isEnabledForAllUsers")]
        public System.Nullable<bool> IsEnabledForAllUsers { get; set; }
        
        /// <value>
        /// Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsViewOnly is required.")]
        [JsonProperty(PropertyName = "isViewOnly")]
        public System.Nullable<bool> IsViewOnly { get; set; }
        
        /// <value>
        /// Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsSeededInTarget is required.")]
        [JsonProperty(PropertyName = "isSeededInTarget")]
        public System.Nullable<bool> IsSeededInTarget { get; set; }
        
        /// <value>
        /// Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsSeededInDataSafe is required.")]
        [JsonProperty(PropertyName = "isSeededInDataSafe")]
        public System.Nullable<bool> IsSeededInDataSafe { get; set; }
        
        /// <value>
        /// Indicates whether the policy is already created on the target database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsCreated is required.")]
        [JsonProperty(PropertyName = "isCreated")]
        public System.Nullable<bool> IsCreated { get; set; }
                ///
        /// <value>
        /// Indicates on whom the audit policy is enabled.
        /// </value>
        ///
        public enum EnabledEntitiesEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ALL_USERS")]
            AllUsers,
            [EnumMember(Value = "INCLUDE_USERS")]
            IncludeUsers,
            [EnumMember(Value = "INCLUDE_ROLES")]
            IncludeRoles,
            [EnumMember(Value = "EXCLUDE_USERS")]
            ExcludeUsers,
            [EnumMember(Value = "INCLUDE_USERS_ROLES")]
            IncludeUsersRoles,
            [EnumMember(Value = "DISABLED")]
            Disabled
        };

        /// <value>
        /// Indicates on whom the audit policy is enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EnabledEntities is required.")]
        [JsonProperty(PropertyName = "enabledEntities")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<EnabledEntitiesEnum> EnabledEntities { get; set; }
        
    }
}
