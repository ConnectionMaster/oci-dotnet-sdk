/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatasafeService.Models
{
    /// <summary>
    /// The description of the column.
    /// </summary>
    public class Column 
    {
        
        /// <value>
        /// Name of the column displayed on UI.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// Specifies the corresponding field name in the data source.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FieldName is required.")]
        [JsonProperty(PropertyName = "fieldName")]
        public string FieldName { get; set; }
        
        /// <value>
        /// Specifies the data type of the column.
        /// </value>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }
        
        /// <value>
        /// Indicates if the column is hidden. Values can either be 'true' or 'false'.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsHidden is required.")]
        [JsonProperty(PropertyName = "isHidden")]
        public System.Nullable<bool> IsHidden { get; set; }
        
        /// <value>
        /// Specifies the display order of the column.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayOrder is required.")]
        [JsonProperty(PropertyName = "displayOrder")]
        public System.Nullable<int> DisplayOrder { get; set; }
        
        /// <value>
        /// Specifies if column is virtual and can only be used as column filter.
        /// </value>
        [JsonProperty(PropertyName = "isVirtual")]
        public System.Nullable<bool> IsVirtual { get; set; }
                ///
        ///
        public enum ApplicableOperatorsEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "IN")]
            In,
            [EnumMember(Value = "EQ")]
            Eq,
            [EnumMember(Value = "EQ_CS")]
            EqCs,
            [EnumMember(Value = "GT")]
            Gt,
            [EnumMember(Value = "GE")]
            Ge,
            [EnumMember(Value = "LT")]
            Lt,
            [EnumMember(Value = "LE")]
            Le,
            [EnumMember(Value = "AND")]
            And,
            [EnumMember(Value = "OR")]
            Or,
            [EnumMember(Value = "NE")]
            Ne,
            [EnumMember(Value = "CO")]
            Co,
            [EnumMember(Value = "CO_CS")]
            CoCs,
            [EnumMember(Value = "NOT")]
            Not,
            [EnumMember(Value = "NOT_IN")]
            NotIn,
            [EnumMember(Value = "IN_SET")]
            InSet,
            [EnumMember(Value = "NOT_IN_SET")]
            NotInSet
        };

        /// <value>
        /// An array of operators that can be supported by column fieldName.
        /// </value>
        [JsonProperty(PropertyName = "applicableOperators", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<ApplicableOperatorsEnum> ApplicableOperators { get; set; }
        
    }
}
