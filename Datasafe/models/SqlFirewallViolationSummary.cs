/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatasafeService.Models
{
    /// <summary>
    /// The resource represents the SQL violations collected from the target database by Oracle Data Safe.
    /// </summary>
    public class SqlFirewallViolationSummary 
    {
        
        /// <value>
        /// The OCID of the SQL violation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The OCID of the compartment containing the SQL violation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The name of the database user.
        /// </value>
        [JsonProperty(PropertyName = "dbUserName")]
        public string DbUserName { get; set; }
        
        /// <value>
        /// The OCID of the target database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TargetId is required.")]
        [JsonProperty(PropertyName = "targetId")]
        public string TargetId { get; set; }
        
        /// <value>
        /// The name of the target database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TargetName is required.")]
        [JsonProperty(PropertyName = "targetName")]
        public string TargetName { get; set; }
        
        /// <value>
        /// The time of the SQL violation occurrence in the target database.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OperationTime is required.")]
        [JsonProperty(PropertyName = "operationTime")]
        public System.Nullable<System.DateTime> OperationTime { get; set; }
        
        /// <value>
        /// The timestamp when this SQL violation was collected from the target database by Data Safe.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCollected is required.")]
        [JsonProperty(PropertyName = "timeCollected")]
        public System.Nullable<System.DateTime> TimeCollected { get; set; }
        
        /// <value>
        /// The name of the operating system user for the database session.
        /// </value>
        [JsonProperty(PropertyName = "clientOsUserName")]
        public string ClientOsUserName { get; set; }
        
        /// <value>
        /// The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
        /// </value>
        [JsonProperty(PropertyName = "operation")]
        public string Operation { get; set; }
        
        /// <value>
        /// The SQL text caught by the firewall.
        /// </value>
        [JsonProperty(PropertyName = "sqlText")]
        public string SqlText { get; set; }
        
        /// <value>
        /// The objects accessed by the SQL.
        /// </value>
        [JsonProperty(PropertyName = "sqlAccessedObjects")]
        public string SqlAccessedObjects { get; set; }
        
        /// <value>
        /// The name of the user that SQL was executed as.
        /// </value>
        [JsonProperty(PropertyName = "currentDbUserName")]
        public string CurrentDbUserName { get; set; }
                ///
        /// <value>
        /// Specifies the level of SQL for this violation.
        /// USER_ISSUED_SQL - User issued SQL statements only.
        /// ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        /// 
        /// </value>
        ///
        public enum SqlLevelEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "USER_ISSUED_SQL")]
            UserIssuedSql,
            [EnumMember(Value = "ALL_SQL")]
            AllSql
        };

        /// <value>
        /// Specifies the level of SQL for this violation.
        /// USER_ISSUED_SQL - User issued SQL statements only.
        /// ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sqlLevel")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SqlLevelEnum> SqlLevel { get; set; }
        
        /// <value>
        /// The IP address of the host machine from which the session was generated.
        /// </value>
        [JsonProperty(PropertyName = "clientIp")]
        public string ClientIp { get; set; }
        
        /// <value>
        /// The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
        /// </value>
        [JsonProperty(PropertyName = "clientProgram")]
        public string ClientProgram { get; set; }
        
        /// <value>
        /// Indicates whether SQL or context violation.
        /// </value>
        [JsonProperty(PropertyName = "violationCause")]
        public string ViolationCause { get; set; }
                ///
        /// <value>
        /// The action taken for this SQL violation.
        /// </value>
        ///
        public enum ViolationActionEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "BLOCKED")]
            Blocked,
            [EnumMember(Value = "ALLOWED")]
            Allowed
        };

        /// <value>
        /// The action taken for this SQL violation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ViolationAction is required.")]
        [JsonProperty(PropertyName = "violationAction")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ViolationActionEnum> ViolationAction { get; set; }
        
    }
}
