/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.MediaservicesService.Models;
using Oci.MediaservicesService.Requests;
using Oci.MediaservicesService.Responses;

namespace Oci.MediaservicesService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of MediaServices.
    /// </summary>
    public class MediaServicesWaiters
    {
        private readonly MediaServicesClient client;

        public  MediaServicesWaiters(MediaServicesClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaAssetRequest, GetMediaAssetResponse> ForMediaAsset(GetMediaAssetRequest request, params LifecycleState[] targetStates)
        {
            return this.ForMediaAsset(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaAssetRequest, GetMediaAssetResponse> ForMediaAsset(GetMediaAssetRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetMediaAssetRequest, GetMediaAssetResponse>(
                request,
                request => client.GetMediaAsset(request),
                response => targetStates.Contains(response.MediaAsset.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetMediaAssetRequest, GetMediaAssetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaAssetDistributionChannelAttachmentRequest, GetMediaAssetDistributionChannelAttachmentResponse> ForMediaAssetDistributionChannelAttachment(GetMediaAssetDistributionChannelAttachmentRequest request, params MediaAssetDistributionChannelAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForMediaAssetDistributionChannelAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaAssetDistributionChannelAttachmentRequest, GetMediaAssetDistributionChannelAttachmentResponse> ForMediaAssetDistributionChannelAttachment(GetMediaAssetDistributionChannelAttachmentRequest request, WaiterConfiguration config, params MediaAssetDistributionChannelAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMediaAssetDistributionChannelAttachmentRequest, GetMediaAssetDistributionChannelAttachmentResponse>(
                request,
                request => client.GetMediaAssetDistributionChannelAttachment(request),
                response => targetStates.Contains(response.MediaAssetDistributionChannelAttachment.LifecycleState.Value)
            );
            return new Waiter<GetMediaAssetDistributionChannelAttachmentRequest, GetMediaAssetDistributionChannelAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowRequest, GetMediaWorkflowResponse> ForMediaWorkflow(GetMediaWorkflowRequest request, params MediaWorkflow.LifecycleStateEnum[] targetStates)
        {
            return this.ForMediaWorkflow(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowRequest, GetMediaWorkflowResponse> ForMediaWorkflow(GetMediaWorkflowRequest request, WaiterConfiguration config, params MediaWorkflow.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMediaWorkflowRequest, GetMediaWorkflowResponse>(
                request,
                request => client.GetMediaWorkflow(request),
                response => targetStates.Contains(response.MediaWorkflow.LifecycleState.Value),
                targetStates.Contains(MediaWorkflow.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMediaWorkflowRequest, GetMediaWorkflowResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowConfigurationRequest, GetMediaWorkflowConfigurationResponse> ForMediaWorkflowConfiguration(GetMediaWorkflowConfigurationRequest request, params MediaWorkflowConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForMediaWorkflowConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowConfigurationRequest, GetMediaWorkflowConfigurationResponse> ForMediaWorkflowConfiguration(GetMediaWorkflowConfigurationRequest request, WaiterConfiguration config, params MediaWorkflowConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMediaWorkflowConfigurationRequest, GetMediaWorkflowConfigurationResponse>(
                request,
                request => client.GetMediaWorkflowConfiguration(request),
                response => targetStates.Contains(response.MediaWorkflowConfiguration.LifecycleState.Value),
                targetStates.Contains(MediaWorkflowConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMediaWorkflowConfigurationRequest, GetMediaWorkflowConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowJobRequest, GetMediaWorkflowJobResponse> ForMediaWorkflowJob(GetMediaWorkflowJobRequest request, params MediaWorkflowJob.LifecycleStateEnum[] targetStates)
        {
            return this.ForMediaWorkflowJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMediaWorkflowJobRequest, GetMediaWorkflowJobResponse> ForMediaWorkflowJob(GetMediaWorkflowJobRequest request, WaiterConfiguration config, params MediaWorkflowJob.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMediaWorkflowJobRequest, GetMediaWorkflowJobResponse>(
                request,
                request => client.GetMediaWorkflowJob(request),
                response => targetStates.Contains(response.MediaWorkflowJob.LifecycleState.Value)
            );
            return new Waiter<GetMediaWorkflowJobRequest, GetMediaWorkflowJobResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamCdnConfigRequest, GetStreamCdnConfigResponse> ForStreamCdnConfig(GetStreamCdnConfigRequest request, params StreamCdnConfig.LifecycleStateEnum[] targetStates)
        {
            return this.ForStreamCdnConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamCdnConfigRequest, GetStreamCdnConfigResponse> ForStreamCdnConfig(GetStreamCdnConfigRequest request, WaiterConfiguration config, params StreamCdnConfig.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetStreamCdnConfigRequest, GetStreamCdnConfigResponse>(
                request,
                request => client.GetStreamCdnConfig(request),
                response => targetStates.Contains(response.StreamCdnConfig.LifecycleState.Value),
                targetStates.Contains(StreamCdnConfig.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetStreamCdnConfigRequest, GetStreamCdnConfigResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamDistributionChannelRequest, GetStreamDistributionChannelResponse> ForStreamDistributionChannel(GetStreamDistributionChannelRequest request, params StreamDistributionChannel.LifecycleStateEnum[] targetStates)
        {
            return this.ForStreamDistributionChannel(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamDistributionChannelRequest, GetStreamDistributionChannelResponse> ForStreamDistributionChannel(GetStreamDistributionChannelRequest request, WaiterConfiguration config, params StreamDistributionChannel.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetStreamDistributionChannelRequest, GetStreamDistributionChannelResponse>(
                request,
                request => client.GetStreamDistributionChannel(request),
                response => targetStates.Contains(response.StreamDistributionChannel.LifecycleState.Value),
                targetStates.Contains(StreamDistributionChannel.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetStreamDistributionChannelRequest, GetStreamDistributionChannelResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamPackagingConfigRequest, GetStreamPackagingConfigResponse> ForStreamPackagingConfig(GetStreamPackagingConfigRequest request, params StreamPackagingConfig.LifecycleStateEnum[] targetStates)
        {
            return this.ForStreamPackagingConfig(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetStreamPackagingConfigRequest, GetStreamPackagingConfigResponse> ForStreamPackagingConfig(GetStreamPackagingConfigRequest request, WaiterConfiguration config, params StreamPackagingConfig.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetStreamPackagingConfigRequest, GetStreamPackagingConfigResponse>(
                request,
                request => client.GetStreamPackagingConfig(request),
                response => targetStates.Contains(response.StreamPackagingConfig.LifecycleState.Value),
                targetStates.Contains(StreamPackagingConfig.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetStreamPackagingConfigRequest, GetStreamPackagingConfigResponse>(config, agent);
        }
    }
}
