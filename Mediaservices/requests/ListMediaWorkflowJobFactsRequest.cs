/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Oci.MediaservicesService.Models;

namespace Oci.MediaservicesService.Requests
{
    /// <example>
    /// Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/mediaservices/ListMediaWorkflowJobFacts.cs.html">here</a> to see an example of how to use ListMediaWorkflowJobFacts request.
    /// </example>
    public class ListMediaWorkflowJobFactsRequest : Oci.Common.IOciRequest
    {
        
        /// <value>
        /// Unique MediaWorkflowJob identifier.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MediaWorkflowJobId is required.")]
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Path, "mediaWorkflowJobId")]
        public string MediaWorkflowJobId { get; set; }
        
        /// <value>
        /// Filter by MediaWorkflowJob ID and MediaWorkflowJobFact key.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "key")]
        public System.Nullable<int> Key { get; set; }
        
        ///
        /// <value>
        /// Types of details to include.
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "runnableJob")]
            RunnableJob,
            [EnumMember(Value = "taskDeclaration")]
            TaskDeclaration,
            [EnumMember(Value = "workflow")]
            Workflow,
            [EnumMember(Value = "configuration")]
            Configuration,
            [EnumMember(Value = "parameterResolutionEvent")]
            ParameterResolutionEvent
        };

        /// <value>
        /// Types of details to include.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "type")]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// Types of details to include.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortBy")]
        public System.Nullable<MediaWorkflowJobFactSortBy> SortBy { get; set; }
        
        /// <value>
        /// The sort order to use, either 'ASC' or 'DESC'.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortOrder")]
        public System.Nullable<SortOrder> SortOrder { get; set; }
        
        /// <value>
        /// A token representing the position at which to start retrieving results. This must come from the
        /// `opc-next-page` header field of a previous response.
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "page")]
        public string Page { get; set; }
        
        /// <value>
        /// The maximum number of items to return.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "limit")]
        public System.Nullable<int> Limit { get; set; }
        
        /// <value>
        /// The client request ID for tracing.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Header, "opc-request-id")]
        public string OpcRequestId { get; set; }
    }
}
