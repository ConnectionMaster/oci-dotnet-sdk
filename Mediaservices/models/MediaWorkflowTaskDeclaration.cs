/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.MediaservicesService.Models
{
    /// <summary>
    /// The declaration of a type of task that can be used in a MediaWorkflow.
    /// </summary>
    public class MediaWorkflowTaskDeclaration 
    {
        
        /// <value>
        /// MediaWorkflowTaskDeclaration identifier. The name and version should be unique among
        /// MediaWorkflowTaskDeclarations.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The version of MediaWorkflowTaskDeclaration, incremented whenever the team implementing the task processor
        /// modifies the JSON schema of this declaration's definitions, parameters or list of required parameters.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Version is required.")]
        [JsonProperty(PropertyName = "version")]
        public System.Nullable<int> Version { get; set; }
        
        /// <value>
        /// JSON schema specifying the parameters supported by this type of task. This is used to validate tasks'
        /// parameters when jobs are created.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ParametersSchema is required.")]
        [JsonProperty(PropertyName = "parametersSchema")]
        public System.Collections.Generic.Dictionary<string, System.Object> ParametersSchema { get; set; }
        
        /// <value>
        /// JSON schema similar to the parameterSchema, but permits parameter values to refer to other parameters using the
        /// ${/path/to/another/parmeter} syntax.  This is used to validate task parameters when workflows are created.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ParametersSchemaAllowingReferences is required.")]
        [JsonProperty(PropertyName = "parametersSchemaAllowingReferences")]
        public System.Collections.Generic.Dictionary<string, System.Object> ParametersSchemaAllowingReferences { get; set; }
        
        /// <value>
        /// Locks associated with this resource.
        /// </value>
        [JsonProperty(PropertyName = "locks")]
        public System.Collections.Generic.List<ResourceLock> Locks { get; set; }
        
    }
}
