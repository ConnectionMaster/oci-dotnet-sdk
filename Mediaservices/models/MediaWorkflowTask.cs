/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.MediaservicesService.Models
{
    /// <summary>
    /// Defines the type of processing to be run at a given point in the workflow, parameters to configure the
    /// processing, and any processing that must be completed before this processing begins.
    /// 
    /// </summary>
    public class MediaWorkflowTask 
    {
        
        /// <value>
        /// The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Type is required.")]
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }
        
        /// <value>
        /// The version of the MediaWorkflowTaskDeclaration.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Version is required.")]
        [JsonProperty(PropertyName = "version")]
        public System.Nullable<long> Version { get; set; }
        
        /// <value>
        /// A unique identifier for this task within its workflow. Keys are used to reference a task within workflows
        /// and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Key is required.")]
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }
        
        /// <value>
        /// Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "prerequisites")]
        public System.Collections.Generic.List<string> Prerequisites { get; set; }
        
        /// <value>
        /// Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is
        /// unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task's
        /// workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "enableParameterReference")]
        public string EnableParameterReference { get; set; }
        
        /// <value>
        /// Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created
        /// from the workflow of this task, the task will only be enabled if the value of the parameter specified by
        /// enableParameterReference is equal to the value of this property. This property must be prenset if and only if
        /// a enableParameterReference is given. The value is a JSON node.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "enableWhenReferencedParameterEquals")]
        public System.Collections.Generic.Dictionary<string, System.Object> EnableWhenReferencedParameterEquals { get; set; }
        
        /// <value>
        /// Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema
        /// specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may
        /// contain values or references to other parameters.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Parameters is required.")]
        [JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.Dictionary<string, System.Object> Parameters { get; set; }
        
    }
}
