/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.MediaservicesService.Models
{
    /// <summary>
    /// Information about the new session token.
    /// </summary>
    public class GenerateSessionTokenDetails 
    {
        
        /// <value>
        /// Token expiry time. An RFC3339 formatted datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeExpires")]
        public System.Nullable<System.DateTime> TimeExpires { get; set; }
                ///
        ///
        public enum ScopesEnum {
            [EnumMember(Value = "PLAYLIST")]
            Playlist,
            [EnumMember(Value = "EDGE")]
            Edge
        };

        /// <value>
        /// Array of scopes the token can act upon.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Scopes is required.")]
        [JsonProperty(PropertyName = "scopes", ItemConverterType = typeof(StringEnumConverter))]
        public System.Collections.Generic.List<ScopesEnum> Scopes { get; set; }
        
        /// <value>
        /// The packaging config resource identifier used to limit the scope of the token.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PackagingConfigId is required.")]
        [JsonProperty(PropertyName = "packagingConfigId")]
        public string PackagingConfigId { get; set; }
        
        /// <value>
        /// Array of asset resource IDs used to limit the scope of the token.
        /// </value>
        [JsonProperty(PropertyName = "assetIds")]
        public System.Collections.Generic.List<string> AssetIds { get; set; }
        
    }
}
