/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The SQL performance data record for a specific SQL query.
    /// </summary>
    public class MySqlDataSummary 
    {
        
        /// <value>
        /// The name of the default schema when executing the query. If a schema is not set as the default, then the value is NULL.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SchemaName is required.")]
        [JsonProperty(PropertyName = "schemaName")]
        public string SchemaName { get; set; }
        
        /// <value>
        /// The digest information of the normalized query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Digest is required.")]
        [JsonProperty(PropertyName = "digest")]
        public string Digest { get; set; }
        
        /// <value>
        /// The normalized query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DigestText is required.")]
        [JsonProperty(PropertyName = "digestText")]
        public string DigestText { get; set; }
        
        /// <value>
        /// The number Of times the query has been executed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CountStar is required.")]
        [JsonProperty(PropertyName = "countStar")]
        public System.Nullable<decimal> CountStar { get; set; }
        
        /// <value>
        /// The total amount of time that has been spent executing the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumTimerWait is required.")]
        [JsonProperty(PropertyName = "sumTimerWait")]
        public System.Nullable<decimal> SumTimerWait { get; set; }
        
        /// <value>
        /// The fastest the query has been executed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MinTimerWait is required.")]
        [JsonProperty(PropertyName = "minTimerWait")]
        public System.Nullable<decimal> MinTimerWait { get; set; }
        
        /// <value>
        /// The average execution time.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvgTimerWait is required.")]
        [JsonProperty(PropertyName = "avgTimerWait")]
        public System.Nullable<decimal> AvgTimerWait { get; set; }
        
        /// <value>
        /// The slowest the query has been executed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MaxTimerWait is required.")]
        [JsonProperty(PropertyName = "maxTimerWait")]
        public System.Nullable<decimal> MaxTimerWait { get; set; }
        
        /// <value>
        /// The maximum amount of controlled memory used by a statement during execution.
        /// </value>
        [JsonProperty(PropertyName = "maxControlledMemory")]
        public System.Nullable<long> MaxControlledMemory { get; set; }
        
        /// <value>
        /// The maximum amount of memory used by a statement during execution.
        /// </value>
        [JsonProperty(PropertyName = "maxTotalMemory")]
        public System.Nullable<long> MaxTotalMemory { get; set; }
        
        /// <value>
        /// The total amount of time spent on CPU for this statement.
        /// </value>
        [JsonProperty(PropertyName = "sumCpuTime")]
        public System.Nullable<long> SumCpuTime { get; set; }
        
        /// <value>
        /// The total amount of time that has been spent waiting for table locks.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumLockTime is required.")]
        [JsonProperty(PropertyName = "sumLockTime")]
        public System.Nullable<decimal> SumLockTime { get; set; }
        
        /// <value>
        /// The total number of errors that have been encountered executing the query. 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumErrors is required.")]
        [JsonProperty(PropertyName = "sumErrors")]
        public System.Nullable<decimal> SumErrors { get; set; }
        
        /// <value>
        /// The total number of warnings that have been encountered executing the query. 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumWarnings is required.")]
        [JsonProperty(PropertyName = "sumWarnings")]
        public System.Nullable<decimal> SumWarnings { get; set; }
        
        /// <value>
        /// The total number of rows that have been modified by the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumRowsAffected is required.")]
        [JsonProperty(PropertyName = "sumRowsAffected")]
        public System.Nullable<decimal> SumRowsAffected { get; set; }
        
        /// <value>
        /// The total number of rows that have been returned (sent) to the client.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumRowsSent is required.")]
        [JsonProperty(PropertyName = "sumRowsSent")]
        public System.Nullable<decimal> SumRowsSent { get; set; }
        
        /// <value>
        /// The total number of rows that have been examined by the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumRowsExamined is required.")]
        [JsonProperty(PropertyName = "sumRowsExamined")]
        public System.Nullable<decimal> SumRowsExamined { get; set; }
        
        /// <value>
        /// The total number of On-Disk internal temporary tables that have been created by the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumCreatedTempDiskTables is required.")]
        [JsonProperty(PropertyName = "sumCreatedTempDiskTables")]
        public System.Nullable<decimal> SumCreatedTempDiskTables { get; set; }
        
        /// <value>
        /// The total number of internal temporary tables (in memory or on disk), which have been created by the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumCreatedTempTables is required.")]
        [JsonProperty(PropertyName = "sumCreatedTempTables")]
        public System.Nullable<decimal> SumCreatedTempTables { get; set; }
        
        /// <value>
        /// The total number of joins that have performed full table scans as there was no join condition or no index for the join condition. This is the same as the select_full_join status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSelectFullJoin is required.")]
        [JsonProperty(PropertyName = "sumSelectFullJoin")]
        public System.Nullable<decimal> SumSelectFullJoin { get; set; }
        
        /// <value>
        /// The total number of joins that use a full range search. This is the same as the select_full_range_join status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSelectFullRangeJoin is required.")]
        [JsonProperty(PropertyName = "sumSelectFullRangeJoin")]
        public System.Nullable<decimal> SumSelectFullRangeJoin { get; set; }
        
        /// <value>
        /// The total number of times the query has used a range search. This is the same as the select_range status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSelectRange is required.")]
        [JsonProperty(PropertyName = "sumSelectRange")]
        public System.Nullable<decimal> SumSelectRange { get; set; }
        
        /// <value>
        /// The total number of joins by the query where the join does not have an index that checks for the index usage after each row. This is the same as the select_range_check status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSelectRangeCheck is required.")]
        [JsonProperty(PropertyName = "sumSelectRangeCheck")]
        public System.Nullable<decimal> SumSelectRangeCheck { get; set; }
        
        /// <value>
        /// The total number of times the query has performed a full table scan on the first table in the join. This is the same as the select_scan status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSelectScan is required.")]
        [JsonProperty(PropertyName = "sumSelectScan")]
        public System.Nullable<decimal> SumSelectScan { get; set; }
        
        /// <value>
        /// The total number of sort merge passes that have been done to sort the result of the query. This is the same as the sort_merge_passes status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSortMergePasses is required.")]
        [JsonProperty(PropertyName = "sumSortMergePasses")]
        public System.Nullable<decimal> SumSortMergePasses { get; set; }
        
        /// <value>
        /// The total number of times a sort was done using ranges. This is the same as the sort_range status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSortRange is required.")]
        [JsonProperty(PropertyName = "sumSortRange")]
        public System.Nullable<decimal> SumSortRange { get; set; }
        
        /// <value>
        /// The total number of rows sorted. This is the same as the sort_rowsStatus variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSortRows is required.")]
        [JsonProperty(PropertyName = "sumSortRows")]
        public System.Nullable<decimal> SumSortRows { get; set; }
        
        /// <value>
        /// The total number of times a sort was done by scanning the table. This is the same as the sort_scan status variable.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumSortScan is required.")]
        [JsonProperty(PropertyName = "sumSortScan")]
        public System.Nullable<decimal> SumSortScan { get; set; }
        
        /// <value>
        /// The total number of times no index was used to execute the query.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumNoIndexUsed is required.")]
        [JsonProperty(PropertyName = "sumNoIndexUsed")]
        public System.Nullable<decimal> SumNoIndexUsed { get; set; }
        
        /// <value>
        /// The total number of times no good index was used. This means that the extra column in The EXPLAIN output includes \u201CRange Checked For Each Record.\u201D
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SumNoGoodIndexUsed is required.")]
        [JsonProperty(PropertyName = "sumNoGoodIndexUsed")]
        public System.Nullable<decimal> SumNoGoodIndexUsed { get; set; }
        
        /// <value>
        /// The date and time the query was first seen. If the table is truncated, the first seen value is reset.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FirstSeen is required.")]
        [JsonProperty(PropertyName = "firstSeen")]
        public System.Nullable<System.DateTime> FirstSeen { get; set; }
        
        /// <value>
        /// The date and time the query was last seen.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LastSeen is required.")]
        [JsonProperty(PropertyName = "lastSeen")]
        public System.Nullable<System.DateTime> LastSeen { get; set; }
        
        /// <value>
        /// The 95th percentile of the query latency. That is, 95% of the queries complete in the time given or in less time.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Quantile95 is required.")]
        [JsonProperty(PropertyName = "quantile95")]
        public System.Nullable<decimal> Quantile95 { get; set; }
        
        /// <value>
        /// The 99th percentile of the query latency.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Quantile99 is required.")]
        [JsonProperty(PropertyName = "quantile99")]
        public System.Nullable<decimal> Quantile99 { get; set; }
        
        /// <value>
        /// The 99.9th percentile of the query latency.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Quantile999 is required.")]
        [JsonProperty(PropertyName = "quantile999")]
        public System.Nullable<decimal> Quantile999 { get; set; }
        
        /// <value>
        /// The number of query executions offloaded to HeatWave.
        /// </value>
        [JsonProperty(PropertyName = "heatWaveOffloaded")]
        public System.Nullable<decimal> HeatWaveOffloaded { get; set; }
        
        /// <value>
        /// The number of query executions with HeatWave out-of-memory errors.
        /// </value>
        [JsonProperty(PropertyName = "heatWaveOutOfMemory")]
        public System.Nullable<decimal> HeatWaveOutOfMemory { get; set; }
        
    }
}
