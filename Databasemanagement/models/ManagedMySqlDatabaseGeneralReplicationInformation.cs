/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// General information about replication of a MySQL server.
    /// </summary>
    public class ManagedMySqlDatabaseGeneralReplicationInformation 
    {
        
        /// <value>
        /// The type of the instance. Source, Replica, Primary Group Member, Secondary Group Member, and so on. If the instance is replicating from one or more sources and has one or more replicas, i.e., it belongs to a replication chain, the instance type can be Replica/Source.
        /// </value>
        [JsonProperty(PropertyName = "instanceType")]
        public string InstanceType { get; set; }
        
        /// <value>
        /// This server's host name.
        /// </value>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }
        
        /// <value>
        /// The number of the port on which the server listens for TCP/IP connections.
        /// </value>
        [JsonProperty(PropertyName = "port")]
        public System.Nullable<int> Port { get; set; }
        
        /// <value>
        /// This server's ID.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServerId is required.")]
        [JsonProperty(PropertyName = "serverId")]
        public System.Nullable<long> ServerId { get; set; }
        
        /// <value>
        /// This server's Universally Unique Identifier (UUID).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServerUuid is required.")]
        [JsonProperty(PropertyName = "serverUuid")]
        public string ServerUuid { get; set; }
        
        /// <value>
        /// The number of seconds the replica is behind the source. When multiple sources are involved, this is the maximum value across all sources.
        /// </value>
        [JsonProperty(PropertyName = "secondsBehindSourceMax")]
        public System.Nullable<long> SecondsBehindSourceMax { get; set; }
        
        /// <value>
        /// A summary of the current status of fetch operations.
        /// </value>
        [JsonProperty(PropertyName = "fetchStatusSummary")]
        public string FetchStatusSummary { get; set; }
        
        /// <value>
        /// A summary of the current status of apply operations.
        /// </value>
        [JsonProperty(PropertyName = "applyStatusSummary")]
        public string ApplyStatusSummary { get; set; }
        
        /// <value>
        /// Specifies if high availability is enabled on this server.
        /// </value>
        [JsonProperty(PropertyName = "isHighAvailabilityEnabled")]
        public System.Nullable<bool> IsHighAvailabilityEnabled { get; set; }
        
        /// <value>
        /// The state of this server as a group replication member.
        /// </value>
        [JsonProperty(PropertyName = "highAvailabilityMemberState")]
        public string HighAvailabilityMemberState { get; set; }
        
        /// <value>
        /// The number of sources this server is replicating from.
        /// </value>
        [JsonProperty(PropertyName = "inboundReplicationsCount")]
        public System.Nullable<int> InboundReplicationsCount { get; set; }
        
        /// <value>
        /// If the value is ON, the instance is configured as read_only. If the value is SUPER, the instance is configured as super_read_only. If the value is OFF, the instance is neither read_only nor super_read_only.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ReadOnly is required.")]
        [JsonProperty(PropertyName = "readOnly")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MySqlReadOnly> ReadOnly { get; set; }
        
        /// <value>
        /// Global Transaction Identifier (GTID) mode of this server.
        /// </value>
        [JsonProperty(PropertyName = "gtidMode")]
        public string GtidMode { get; set; }
        
        /// <value>
        /// The set of global transaction identifiers for transactions that have been executed on this source server.
        /// </value>
        [JsonProperty(PropertyName = "executedGtidSet")]
        public string ExecutedGtidSet { get; set; }
        
        /// <value>
        /// Status of binary logging on this server.
        /// </value>
        [JsonProperty(PropertyName = "binaryLogging")]
        public string BinaryLogging { get; set; }
        
        /// <value>
        /// The binary logging format used by this server.
        /// </value>
        [JsonProperty(PropertyName = "binaryLogFormat")]
        public string BinaryLogFormat { get; set; }
        
        /// <value>
        /// The number of replicas replicating from this server.
        /// </value>
        [JsonProperty(PropertyName = "outboundReplicationsCount")]
        public System.Nullable<int> OutboundReplicationsCount { get; set; }
        
    }
}
