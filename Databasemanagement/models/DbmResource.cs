/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The base Exadata resource.
    /// </summary>
    [JsonConverter(typeof(DbmResourceModelConverter))]
    public class DbmResource 
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The name of the Exadata resource. English letters, numbers, \"-\", \"_\" and \".\" only.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The version of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }
        
        /// <value>
        /// The internal ID of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "internalId")]
        public string InternalId { get; set; }
        
        /// <value>
        /// The status of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }
                ///
        /// <value>
        /// The current lifecycle state of the database resource.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "INACTIVE")]
            Inactive,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The current lifecycle state of the database resource.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// The timestamp of the creation of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The timestamp of the last update of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// The details of the lifecycle state of the Exadata resource.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
        
        /// <value>
        /// The additional details of the resource defined in `{\"key\": \"value\"}` format.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "additionalDetails")]
        public System.Collections.Generic.Dictionary<string, string> AdditionalDetails { get; set; }
                ///
        /// <value>
        /// The type of Exadata resource.
        /// </value>
        ///
        public enum ResourceTypeEnum {
            [EnumMember(Value = "INFRASTRUCTURE_SUMMARY")]
            InfrastructureSummary,
            [EnumMember(Value = "INFRASTRUCTURE")]
            Infrastructure,
            [EnumMember(Value = "STORAGE_SERVER_SUMMARY")]
            StorageServerSummary,
            [EnumMember(Value = "STORAGE_SERVER")]
            StorageServer,
            [EnumMember(Value = "STORAGE_GRID_SUMMARY")]
            StorageGridSummary,
            [EnumMember(Value = "STORAGE_GRID")]
            StorageGrid,
            [EnumMember(Value = "STORAGE_CONNECTOR_SUMMARY")]
            StorageConnectorSummary,
            [EnumMember(Value = "STORAGE_CONNECTOR")]
            StorageConnector,
            [EnumMember(Value = "DATABASE_SYSTEM_SUMMARY")]
            DatabaseSystemSummary,
            [EnumMember(Value = "DATABASE_SUMMARY")]
            DatabaseSummary
        };

        
    }

    public class DbmResourceModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DbmResource);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DbmResource);
            var discriminator = jsonObject["resourceType"].Value<string>();
            switch (discriminator)
            {
                case "STORAGE_CONNECTOR":
                    obj = new ExternalExadataStorageConnector();
                    break;
                case "STORAGE_GRID_SUMMARY":
                    obj = new ExternalExadataStorageGridSummary();
                    break;
                case "STORAGE_SERVER":
                    obj = new ExternalExadataStorageServer();
                    break;
                case "INFRASTRUCTURE":
                    obj = new ExternalExadataInfrastructure();
                    break;
                case "STORAGE_GRID":
                    obj = new ExternalExadataStorageGrid();
                    break;
                case "INFRASTRUCTURE_SUMMARY":
                    obj = new ExternalExadataInfrastructureSummary();
                    break;
                case "DATABASE_SYSTEM_SUMMARY":
                    obj = new ExternalExadataDatabaseSystemSummary();
                    break;
                case "STORAGE_CONNECTOR_SUMMARY":
                    obj = new ExternalExadataStorageConnectorSummary();
                    break;
                case "STORAGE_SERVER_SUMMARY":
                    obj = new ExternalExadataStorageServerSummary();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
