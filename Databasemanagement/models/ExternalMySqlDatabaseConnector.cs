/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// Details of external database connector.
    /// </summary>
    public class ExternalMySqlDatabaseConnector 
    {
        
        /// <value>
        /// External MySQL Database Connector Name.
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// OCID of compartment for the External MySQL connector.
        /// </value>
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// OCI Services associated with this connector.
        /// </value>
        [JsonProperty(PropertyName = "associatedServices")]
        public string AssociatedServices { get; set; }
        
        /// <value>
        /// OCID of MySQL Database resource
        /// </value>
        [JsonProperty(PropertyName = "externalDatabaseId")]
        public string ExternalDatabaseId { get; set; }
        
        /// <value>
        /// OCID of MySQL Database Connector.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Connector update time.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// Connector creation time.
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// Indicates lifecycle  state of the resource.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStates> LifecycleState { get; set; }
        
        /// <value>
        /// Name of MySQL Database.
        /// </value>
        [JsonProperty(PropertyName = "sourceDatabase")]
        public string SourceDatabase { get; set; }
        
        /// <value>
        /// Type of MySQL Database.
        /// </value>
        [JsonProperty(PropertyName = "sourceDatabaseType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MySqlType> SourceDatabaseType { get; set; }
        
        /// <value>
        /// Agent Id of the MACS agent.
        /// </value>
        [JsonProperty(PropertyName = "macsAgentId")]
        public string MacsAgentId { get; set; }
        
        /// <value>
        /// Connection Status
        /// </value>
        [JsonProperty(PropertyName = "connectionStatus")]
        public string ConnectionStatus { get; set; }
        
        /// <value>
        /// Time when connection status was last updated.
        /// </value>
        [JsonProperty(PropertyName = "timeConnectionStatusUpdated")]
        public System.Nullable<System.DateTime> TimeConnectionStatusUpdated { get; set; }
        
        /// <value>
        /// Host name for Connector.
        /// </value>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }
        
        /// <value>
        /// Connector port.
        /// </value>
        [JsonProperty(PropertyName = "port")]
        public System.Nullable<int> Port { get; set; }
        
        /// <value>
        /// Connector Type.
        /// </value>
        [JsonProperty(PropertyName = "connectorType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MySqlConnectorType> ConnectorType { get; set; }
        
        /// <value>
        /// Network Protocol.
        /// </value>
        [JsonProperty(PropertyName = "networkProtocol")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MySqlNetworkProtocolType> NetworkProtocol { get; set; }
        
        /// <value>
        /// Credential type used to connect to database.
        /// </value>
        [JsonProperty(PropertyName = "credentialType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<MySqlCredType> CredentialType { get; set; }
        
        /// <value>
        /// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </value>
        [JsonProperty(PropertyName = "sslSecretId")]
        public string SslSecretId { get; set; }
        
        /// <value>
        /// Name of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </value>
        [JsonProperty(PropertyName = "sslSecretName")]
        public string SslSecretName { get; set; }
        
    }
}
