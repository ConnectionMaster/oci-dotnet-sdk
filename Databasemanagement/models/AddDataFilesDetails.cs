/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details required to add data files or temp files to the tablespace.
    /// lease provide either credentialDetails or databaseCredential. It's recommended to provide databaseCredential
    /// 
    /// </summary>
    public class AddDataFilesDetails 
    {
        
        [JsonProperty(PropertyName = "credentialDetails")]
        public TablespaceAdminCredentialDetails CredentialDetails { get; set; }
        
        [JsonProperty(PropertyName = "databaseCredential")]
        public DatabaseCredentialDetails DatabaseCredential { get; set; }
                ///
        /// <value>
        /// Specifies whether the file is a data file or temp file.
        /// 
        /// </value>
        ///
        public enum FileTypeEnum {
            [EnumMember(Value = "DATAFILE")]
            Datafile,
            [EnumMember(Value = "TEMPFILE")]
            Tempfile
        };

        /// <value>
        /// Specifies whether the file is a data file or temp file.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FileType is required.")]
        [JsonProperty(PropertyName = "fileType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<FileTypeEnum> FileType { get; set; }
        
        /// <value>
        /// The list of data files or temp files added to the tablespace.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "dataFiles")]
        public System.Collections.Generic.List<string> DataFiles { get; set; }
        
        /// <value>
        /// The number of data files or temp files to be added for the tablespace. This is for Oracle Managed Files only.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "fileCount")]
        public System.Nullable<int> FileCount { get; set; }
        
        /// <value>
        /// The size of each data file or temp file.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "fileSize")]
        public TablespaceStorageSize FileSize { get; set; }
        
        /// <value>
        /// Specifies whether Oracle can reuse the data file or temp file. Reuse is only allowed when the file name is provided.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isReusable")]
        public System.Nullable<bool> IsReusable { get; set; }
        
        /// <value>
        /// Specifies whether the data file or temp file can be extended automatically.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isAutoExtensible")]
        public System.Nullable<bool> IsAutoExtensible { get; set; }
        
        /// <value>
        /// The size of the next increment of disk space to be allocated automatically when more extents are required.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "autoExtendNextSize")]
        public TablespaceStorageSize AutoExtendNextSize { get; set; }
        
        /// <value>
        /// The maximum disk space allowed for automatic extension of the data files or temp files.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "autoExtendMaxSize")]
        public TablespaceStorageSize AutoExtendMaxSize { get; set; }
        
        /// <value>
        /// Specifies whether the disk space of the data file or temp file can be limited.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMaxSizeUnlimited")]
        public System.Nullable<bool> IsMaxSizeUnlimited { get; set; }
        
    }
}
