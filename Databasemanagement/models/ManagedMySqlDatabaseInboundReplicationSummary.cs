/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// Inbound replication information of a MySQL replica.
    /// </summary>
    public class ManagedMySqlDatabaseInboundReplicationSummary 
    {
        
        /// <value>
        /// The host name or IP address of the source this replica is connected to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SourceHost is required.")]
        [JsonProperty(PropertyName = "sourceHost")]
        public string SourceHost { get; set; }
        
        /// <value>
        /// The port used to connect to the source.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SourcePort is required.")]
        [JsonProperty(PropertyName = "sourcePort")]
        public System.Nullable<int> SourcePort { get; set; }
        
        /// <value>
        /// The current status of fetch operations.
        /// </value>
        [JsonProperty(PropertyName = "fetchStatus")]
        public string FetchStatus { get; set; }
        
        /// <value>
        /// The current status of apply operations.
        /// </value>
        [JsonProperty(PropertyName = "applyStatus")]
        public string ApplyStatus { get; set; }
        
        /// <value>
        /// The desired number of seconds that the replica must lag the source.
        /// </value>
        [JsonProperty(PropertyName = "desiredDelaySeconds")]
        public System.Nullable<long> DesiredDelaySeconds { get; set; }
        
        /// <value>
        /// If the replica is waiting for the desired delay seconds to pass since the source applied an event, this field contains the number of delay seconds remaining.
        /// </value>
        [JsonProperty(PropertyName = "remainingDelaySeconds")]
        public System.Nullable<long> RemainingDelaySeconds { get; set; }
        
        /// <value>
        /// The name of the replication channel.
        /// </value>
        [JsonProperty(PropertyName = "channelName")]
        public string ChannelName { get; set; }
        
        /// <value>
        /// The Universally Unique Identifier (UUID) value from the source server.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SourceUuid is required.")]
        [JsonProperty(PropertyName = "sourceUuid")]
        public string SourceUuid { get; set; }
        
        /// <value>
        /// The server ID value from the source server.
        /// </value>
        [JsonProperty(PropertyName = "sourceServerId")]
        public System.Nullable<long> SourceServerId { get; set; }
        
        /// <value>
        /// Indicates whether the channel assigns global transaction identifiers (GTIDs) to anonymous replicated transactions. OFF means no GTIDs are assigned. LOCAL means a GTID is assigned that includes this replica's own universally unique identifier (UUID). A UUID as value indicates that a GTID is assigned, which includes that manually set UUID value.
        /// </value>
        [JsonProperty(PropertyName = "gtidAssignment")]
        public string GtidAssignment { get; set; }
        
        /// <value>
        /// A list of MySqlReplicationApplierFilter records.
        /// </value>
        [JsonProperty(PropertyName = "applierFilters")]
        public System.Collections.Generic.List<MySqlReplicationApplierFilter> ApplierFilters { get; set; }
        
        /// <value>
        /// The number of seconds the replica is behind the source server.
        /// </value>
        [JsonProperty(PropertyName = "secondsBehindSource")]
        public System.Nullable<long> SecondsBehindSource { get; set; }
        
        /// <value>
        /// The set of global transaction IDs corresponding to all transactions received by this replica from the source server. Empty if GTIDs are not in use.
        /// </value>
        [JsonProperty(PropertyName = "retrievedGtidSet")]
        public string RetrievedGtidSet { get; set; }
        
        /// <value>
        /// The total size in bytes of all the existing relay log files pertaining to this channel.
        /// </value>
        [JsonProperty(PropertyName = "relayLogStorageSpaceUsed")]
        public System.Nullable<long> RelayLogStorageSpaceUsed { get; set; }
        
        /// <value>
        /// The number of transactions received by this replica from the source server.
        /// </value>
        [JsonProperty(PropertyName = "transactionsReceived")]
        public System.Nullable<long> TransactionsReceived { get; set; }
        
        /// <value>
        /// The time in seconds that the current transaction took between being committed on the source and being applied on the replica.
        /// </value>
        [JsonProperty(PropertyName = "applyDelay")]
        public System.Double ApplyDelay { get; set; }
        
        /// <value>
        /// The number of workers currently busy applying transactions from the source server.
        /// </value>
        [JsonProperty(PropertyName = "busyWorkers")]
        public System.Nullable<int> BusyWorkers { get; set; }
        
        [JsonProperty(PropertyName = "fetchError")]
        public MySqlFetchError FetchError { get; set; }
        
        [JsonProperty(PropertyName = "applyError")]
        public MySqlApplyError ApplyError { get; set; }
        
    }
}
