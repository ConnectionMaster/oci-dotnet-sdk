/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// A recommendation for a given object in a SQL Tuning Task.
    /// 
    /// </summary>
    public class SqlTuningAdvisorTaskRecommendationSummary 
    {
        
        /// <value>
        /// The unique identifier of the task. This is not the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlTuningAdvisorTaskId is required.")]
        [JsonProperty(PropertyName = "sqlTuningAdvisorTaskId")]
        public System.Nullable<long> SqlTuningAdvisorTaskId { get; set; }
        
        /// <value>
        /// The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlTuningAdvisorTaskObjectId is required.")]
        [JsonProperty(PropertyName = "sqlTuningAdvisorTaskObjectId")]
        public System.Nullable<long> SqlTuningAdvisorTaskObjectId { get; set; }
        
        /// <value>
        /// The unique identifier of the recommendation in the scope of the task.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RecommendationKey is required.")]
        [JsonProperty(PropertyName = "recommendationKey")]
        public System.Nullable<int> RecommendationKey { get; set; }
                ///
        /// <value>
        /// Type of recommendation.
        /// </value>
        ///
        public enum RecommendationTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "STATISTICS")]
            Statistics,
            [EnumMember(Value = "INDEX")]
            Index,
            [EnumMember(Value = "SQL_PROFILE")]
            SqlProfile,
            [EnumMember(Value = "RESTRUCTURE_SQL")]
            RestructureSql,
            [EnumMember(Value = "ALTERNATIVE_PLANS")]
            AlternativePlans,
            [EnumMember(Value = "ERROR")]
            Error,
            [EnumMember(Value = "MISCELLANEOUS")]
            Miscellaneous
        };

        /// <value>
        /// Type of recommendation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RecommendationType is required.")]
        [JsonProperty(PropertyName = "recommendationType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<RecommendationTypeEnum> RecommendationType { get; set; }
        
        /// <value>
        /// Summary of the issue found in the SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "finding")]
        public string Finding { get; set; }
        
        /// <value>
        /// The recommendation for a specific finding.
        /// </value>
        [JsonProperty(PropertyName = "recommendation")]
        public string Recommendation { get; set; }
        
        /// <value>
        /// Describes the reasoning behind the recommendation and how it relates to the finding.
        /// </value>
        [JsonProperty(PropertyName = "rationale")]
        public string Rationale { get; set; }
        
        /// <value>
        /// The percentage benefit of this implementation.
        /// </value>
        [JsonProperty(PropertyName = "benefit")]
        public System.Nullable<float> Benefit { get; set; }
        
        /// <value>
        /// Action sql to be implemented based on the recommendation result.
        /// </value>
        [JsonProperty(PropertyName = "implementActionSql")]
        public string ImplementActionSql { get; set; }
        
        /// <value>
        /// Indicates whether a SQL Profile recommendation uses parallel execution.
        /// </value>
        [JsonProperty(PropertyName = "isParallelExecution")]
        public System.Nullable<bool> IsParallelExecution { get; set; }
        
    }
}
