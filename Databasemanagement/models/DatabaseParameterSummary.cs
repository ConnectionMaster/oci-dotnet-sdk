/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// A summary of the database parameter.
    /// </summary>
    public class DatabaseParameterSummary 
    {
        
        /// <value>
        /// The parameter name.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
                ///
        /// <value>
        /// The parameter type.
        /// </value>
        ///
        public enum TypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "BOOLEAN")]
            Boolean,
            [EnumMember(Value = "STRING")]
            String,
            [EnumMember(Value = "INTEGER")]
            Integer,
            [EnumMember(Value = "FILENAME")]
            Filename,
            [EnumMember(Value = "BIG_INTEGER")]
            BigInteger,
            [EnumMember(Value = "RESERVED")]
            Reserved
        };

        /// <value>
        /// The parameter type.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Type is required.")]
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// The parameter value.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Value is required.")]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        
        /// <value>
        /// The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayValue is required.")]
        [JsonProperty(PropertyName = "displayValue")]
        public string DisplayValue { get; set; }
        
        /// <value>
        /// The parameter number.
        /// </value>
        [JsonProperty(PropertyName = "number")]
        public System.Nullable<decimal> Number { get; set; }
        
        /// <value>
        /// Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isDefault")]
        public System.Nullable<bool> IsDefault { get; set; }
        
        /// <value>
        /// Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSessionModifiable")]
        public System.Nullable<bool> IsSessionModifiable { get; set; }
                ///
        /// <value>
        /// Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        /// - IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        /// - DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        /// - FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        /// 
        /// </value>
        ///
        public enum IsSystemModifiableEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "IMMEDIATE")]
            Immediate,
            [EnumMember(Value = "DEFERRED")]
            Deferred,
            [EnumMember(Value = "FALSE")]
            False
        };

        /// <value>
        /// Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        /// - IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        /// - DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        /// - FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSystemModifiable")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IsSystemModifiableEnum> IsSystemModifiable { get; set; }
        
        /// <value>
        /// Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isPdbModifiable")]
        public System.Nullable<bool> IsPdbModifiable { get; set; }
        
        /// <value>
        /// For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isInstanceModifiable")]
        public System.Nullable<bool> IsInstanceModifiable { get; set; }
                ///
        /// <value>
        /// Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        /// 
        /// </value>
        ///
        public enum IsModifiedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "MODIFIED")]
            Modified,
            [EnumMember(Value = "FALSE")]
            False
        };

        /// <value>
        /// Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isModified")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IsModifiedEnum> IsModified { get; set; }
        
        /// <value>
        /// Indicates whether Oracle adjusted the input value to a more suitable value.
        /// </value>
        [JsonProperty(PropertyName = "isAdjusted")]
        public System.Nullable<bool> IsAdjusted { get; set; }
        
        /// <value>
        /// Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        /// </value>
        [JsonProperty(PropertyName = "isDeprecated")]
        public System.Nullable<bool> IsDeprecated { get; set; }
        
        /// <value>
        /// Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        /// </value>
        [JsonProperty(PropertyName = "isBasic")]
        public System.Nullable<bool> IsBasic { get; set; }
        
        /// <value>
        /// The description of the parameter.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "ordinal")]
        public System.Nullable<decimal> Ordinal { get; set; }
        
        /// <value>
        /// The comments associated with the most recent update.
        /// </value>
        [JsonProperty(PropertyName = "updateComment")]
        public string UpdateComment { get; set; }
        
        /// <value>
        /// The ID of the database container to which the data pertains.
        /// Possible values include:
        /// - `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
        /// - `1`: This value is used for data that pertain to only the root container.
        /// - `n`: Where n is the applicable container ID for the data.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "containerId")]
        public System.Nullable<decimal> ContainerId { get; set; }
        
        /// <value>
        /// The parameter category.
        /// </value>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
                ///
        /// <value>
        /// Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases.
        /// A `UNIQUE` parameter is one which is unique to each Oracle Real Application
        /// Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER`
        /// must have different values in each instance. An `IDENTICAL` parameter must
        /// have the same value for every instance. For example, the parameter
        /// `DB_BLOCK_SIZE` must have the same value in all instances.
        /// 
        /// </value>
        ///
        public enum ConstraintEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "UNIQUE")]
            Unique,
            [EnumMember(Value = "IDENTICAL")]
            Identical,
            [EnumMember(Value = "NONE")]
            None
        };

        /// <value>
        /// Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases.
        /// A `UNIQUE` parameter is one which is unique to each Oracle Real Application
        /// Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER`
        /// must have different values in each instance. An `IDENTICAL` parameter must
        /// have the same value for every instance. For example, the parameter
        /// `DB_BLOCK_SIZE` must have the same value in all instances.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "constraint")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ConstraintEnum> Constraint { get; set; }
        
        /// <value>
        /// The database instance SID for which the parameter is defined.
        /// </value>
        [JsonProperty(PropertyName = "sid")]
        public string Sid { get; set; }
        
        /// <value>
        /// Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSpecified")]
        public System.Nullable<bool> IsSpecified { get; set; }
        
        /// <value>
        /// A list of allowed values for this parameter.
        /// </value>
        [JsonProperty(PropertyName = "allowedValues")]
        public System.Collections.Generic.List<AllowedParameterValue> AllowedValues { get; set; }
        
    }
}
