/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The summary of a specific user resource.
    /// </summary>
    public class User 
    {
        
        /// <value>
        /// The name of the User.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
                ///
        /// <value>
        /// The status of the user account.
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "OPEN")]
            Open,
            [EnumMember(Value = "EXPIRED")]
            Expired,
            [EnumMember(Value = "EXPIRED_GRACE")]
            ExpiredGrace,
            [EnumMember(Value = "LOCKED")]
            Locked,
            [EnumMember(Value = "LOCKED_TIMED")]
            LockedTimed,
            [EnumMember(Value = "EXPIRED_AND_LOCKED")]
            ExpiredAndLocked,
            [EnumMember(Value = "EXPIRED_GRACE_AND_LOCKED")]
            ExpiredGraceAndLocked,
            [EnumMember(Value = "EXPIRED_AND_LOCKED_TIMED")]
            ExpiredAndLockedTimed,
            [EnumMember(Value = "EXPIRED_GRACE_AND_LOCKED_TIMED")]
            ExpiredGraceAndLockedTimed,
            [EnumMember(Value = "OPEN_AND_IN_ROLLOVER")]
            OpenAndInRollover,
            [EnumMember(Value = "EXPIRED_AND_IN_ROLLOVER")]
            ExpiredAndInRollover,
            [EnumMember(Value = "LOCKED_AND_IN_ROLLOVER")]
            LockedAndInRollover,
            [EnumMember(Value = "EXPIRED_AND_LOCKED_AND_IN_ROLLOVER")]
            ExpiredAndLockedAndInRollover,
            [EnumMember(Value = "LOCKED_TIMED_AND_IN_ROLLOVER")]
            LockedTimedAndInRollover,
            [EnumMember(Value = "EXPIRED_AND_LOCKED_TIMED_AND_IN_ROL")]
            ExpiredAndLockedTimedAndInRol
        };

        /// <value>
        /// The status of the user account.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// The date the account was locked, if the status of the account is LOCKED.
        /// </value>
        [JsonProperty(PropertyName = "timeLocked")]
        public System.Nullable<System.DateTime> TimeLocked { get; set; }
        
        /// <value>
        /// The date and time of the expiration of the user account.
        /// </value>
        [JsonProperty(PropertyName = "timeExpiring")]
        public System.Nullable<System.DateTime> TimeExpiring { get; set; }
        
        /// <value>
        /// The default tablespace for data.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DefaultTablespace is required.")]
        [JsonProperty(PropertyName = "defaultTablespace")]
        public string DefaultTablespace { get; set; }
        
        /// <value>
        /// The name of the default tablespace for temporary tables or the name of a tablespace group.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TempTablespace is required.")]
        [JsonProperty(PropertyName = "tempTablespace")]
        public string TempTablespace { get; set; }
        
        /// <value>
        /// The default local temporary tablespace for the user.
        /// </value>
        [JsonProperty(PropertyName = "localTempTablespace")]
        public string LocalTempTablespace { get; set; }
        
        /// <value>
        /// The date and time the user was created.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The profile name of the user.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Profile is required.")]
        [JsonProperty(PropertyName = "profile")]
        public string Profile { get; set; }
        
        /// <value>
        /// The initial resource consumer group for the User.
        /// </value>
        [JsonProperty(PropertyName = "consumerGroup")]
        public string ConsumerGroup { get; set; }
        
        /// <value>
        /// The external name of the user.
        /// </value>
        [JsonProperty(PropertyName = "externalName")]
        public string ExternalName { get; set; }
        
        /// <value>
        /// The list of existing versions of the password hashes (also known as \"verifiers\") for the account.
        /// </value>
        [JsonProperty(PropertyName = "passwordVersions")]
        public string PasswordVersions { get; set; }
                ///
        /// <value>
        /// Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
        /// </value>
        ///
        public enum EditionsEnabledEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
        /// </value>
        [JsonProperty(PropertyName = "editionsEnabled")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<EditionsEnabledEnum> EditionsEnabled { get; set; }
                ///
        /// <value>
        /// The authentication mechanism for the user.
        /// </value>
        ///
        public enum AuthenticationEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "EXTERNAL")]
            External,
            [EnumMember(Value = "GLOBAL")]
            Global,
            [EnumMember(Value = "PASSWORD")]
            Password
        };

        /// <value>
        /// The authentication mechanism for the user.
        /// </value>
        [JsonProperty(PropertyName = "authentication")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AuthenticationEnum> Authentication { get; set; }
                ///
        /// <value>
        /// Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges
        /// for this account (that is, by users who have been granted the \"connect through\" privilege for this account).
        /// 
        /// </value>
        ///
        public enum ProxyConnectEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges
        /// for this account (that is, by users who have been granted the \"connect through\" privilege for this account).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "proxyConnect")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ProxyConnectEnum> ProxyConnect { get; set; }
                ///
        /// <value>
        /// Indicates whether a given user is common(Y) or local(N).
        /// </value>
        ///
        public enum CommonEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether a given user is common(Y) or local(N).
        /// </value>
        [JsonProperty(PropertyName = "common")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<CommonEnum> Common { get; set; }
        
        /// <value>
        /// The date and time of the last user login.
        /// This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeLastLogin")]
        public System.Nullable<System.DateTime> TimeLastLogin { get; set; }
                ///
        /// <value>
        /// Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
        /// </value>
        ///
        public enum OracleMaintainedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
        /// </value>
        [JsonProperty(PropertyName = "oracleMaintained")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<OracleMaintainedEnum> OracleMaintained { get; set; }
                ///
        /// <value>
        /// Indicates whether the user definition is inherited from another container (YES) or not (NO).
        /// </value>
        ///
        public enum InheritedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the user definition is inherited from another container (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "inherited")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<InheritedEnum> Inherited { get; set; }
        
        /// <value>
        /// The default collation for the user schema.
        /// </value>
        [JsonProperty(PropertyName = "defaultCollation")]
        public string DefaultCollation { get; set; }
                ///
        /// <value>
        /// Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
        /// </value>
        ///
        public enum ImplicitEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "implicit")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ImplicitEnum> Implicit { get; set; }
                ///
        /// <value>
        /// In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
        /// </value>
        ///
        public enum AllSharedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "allShared")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AllSharedEnum> AllShared { get; set; }
                ///
        /// <value>
        /// In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
        /// </value>
        ///
        public enum ExternalSharedEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "externalShared")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ExternalSharedEnum> ExternalShared { get; set; }
        
        /// <value>
        /// The date and time when the user password was last set.
        /// This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timePasswordChanged")]
        public System.Nullable<System.DateTime> TimePasswordChanged { get; set; }
        
    }
}
