/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details required to fetch the Sql tuning set details.
    /// It takes either credentialDetails or databaseCredential. It's recommended to provide databaseCredential
    /// 
    /// </summary>
    public class FetchSqlTuningSetDetails 
    {
        
        [JsonProperty(PropertyName = "credentialDetails")]
        public SqlTuningSetAdminCredentialDetails CredentialDetails { get; set; }
        
        [JsonProperty(PropertyName = "databaseCredential")]
        public DatabaseCredentialDetails DatabaseCredential { get; set; }
        
        /// <value>
        /// The owner of the Sql tuning set.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Owner is required.")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }
        
        /// <value>
        /// The name of the Sql tuning set.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Specifies the Sql predicate to filter the Sql from the Sql tuning set defined on attributes of the SQLSET_ROW.
        /// User could use any combination of the following columns with appropriate values as Sql predicate
        /// Refer to the documentation https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_SQLTUNE.html#GUID-1F4AFB03-7B29-46FC-B3F2-CB01EC36326C
        /// 
        /// </value>
        [JsonProperty(PropertyName = "basicFilter")]
        public string BasicFilter { get; set; }
                ///
        /// <value>
        /// Specifies that the filter must include recursive Sql in the Sql tuning set.
        /// </value>
        ///
        public enum RecursiveSqlEnum {
            [EnumMember(Value = "HAS_RECURSIVE_SQL")]
            HasRecursiveSql,
            [EnumMember(Value = "NO_RECURSIVE_SQL")]
            NoRecursiveSql
        };

        /// <value>
        /// Specifies that the filter must include recursive Sql in the Sql tuning set.
        /// </value>
        [JsonProperty(PropertyName = "recursiveSql")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<RecursiveSqlEnum> RecursiveSql { get; set; }
        
        /// <value>
        /// Specifies a filter that picks the top n% according to the supplied ranking measure.
        /// Note that this parameter applies only if one ranking measure is supplied.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resultPercentage")]
        public System.Double ResultPercentage { get; set; }
        
        /// <value>
        /// The top limit Sql from the filtered source, ranked by the ranking measure.
        /// </value>
        [JsonProperty(PropertyName = "resultLimit")]
        public System.Nullable<int> ResultLimit { get; set; }
        
        /// <value>
        /// Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "rankingMeasure1")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<RankingMeasure> RankingMeasure1 { get; set; }
        
        /// <value>
        /// Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "rankingMeasure2")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<RankingMeasure> RankingMeasure2 { get; set; }
        
        /// <value>
        /// Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "rankingMeasure3")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<RankingMeasure> RankingMeasure3 { get; set; }
        
    }
}
