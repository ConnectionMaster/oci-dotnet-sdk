/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The list of aggregated metrics for a HeatWave cluster in the fleet.
    /// </summary>
    public class HeatWaveClusterUsageMetrics 
    {
        
        /// <value>
        /// The status of the HeatWave cluster. Indicates whether the status of the cluster is UP, DOWN, or UNKNOWN at the current time.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<HeatWaveClusterStatus> Status { get; set; }
        
        /// <value>
        /// The OCID of the MySQL Database System associated with the HeatWave cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DbSystemId is required.")]
        [JsonProperty(PropertyName = "dbSystemId")]
        public string DbSystemId { get; set; }
        
        /// <value>
        /// The name of the MySQL Database System associated with the HeatWave cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DbSystemName is required.")]
        [JsonProperty(PropertyName = "dbSystemName")]
        public string DbSystemName { get; set; }
        
        /// <value>
        /// The name of the HeatWave cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "HeatWaveClusterDisplayName is required.")]
        [JsonProperty(PropertyName = "heatWaveClusterDisplayName")]
        public string HeatWaveClusterDisplayName { get; set; }
        
        /// <value>
        /// The number of nodes in the HeatWave cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NodeCount is required.")]
        [JsonProperty(PropertyName = "nodeCount")]
        public System.Nullable<int> NodeCount { get; set; }
        
        /// <value>
        /// Indicates whether Lakehouse is enabled for the HeatWave cluster or not.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsLakehouseEnabled is required.")]
        [JsonProperty(PropertyName = "isLakehouseEnabled")]
        public System.Nullable<bool> IsLakehouseEnabled { get; set; }
        
        /// <value>
        /// The shape of the nodes in the HeatWave cluster.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "HeatWaveNodeShape is required.")]
        [JsonProperty(PropertyName = "heatWaveNodeShape")]
        public string HeatWaveNodeShape { get; set; }
        
        /// <value>
        /// The total memory belonging to the HeatWave cluster in GBs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "MemorySize is required.")]
        [JsonProperty(PropertyName = "memorySize")]
        public System.Nullable<int> MemorySize { get; set; }
        
        /// <value>
        /// A list of the HeatWave cluster health metrics like CPU and Memory.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Metrics is required.")]
        [JsonProperty(PropertyName = "metrics")]
        public System.Collections.Generic.List<HeatWaveFleetMetricDefinition> Metrics { get; set; }
        
    }
}
