/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The summary of the Optimizer Statistics Collection tasks, which includes details of the Managed Database and the execution.
    /// </summary>
    public class OptimizerStatisticsCollectionOperation 
    {
        
        [JsonProperty(PropertyName = "database")]
        public OptimizerDatabase Database { get; set; }
        
        /// <value>
        /// An array of Optimizer Statistics Collection task details.
        /// </value>
        [JsonProperty(PropertyName = "tasks")]
        public System.Collections.Generic.List<OptimizerStatisticsOperationTask> Tasks { get; set; }
        
        /// <value>
        /// The ID of the operation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public System.Nullable<int> Id { get; set; }
        
        /// <value>
        /// The name of the operation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "OperationName is required.")]
        [JsonProperty(PropertyName = "operationName")]
        public string OperationName { get; set; }
        
        /// <value>
        /// The target object type such as Table, Index, and Partition.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Target is required.")]
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }
        
        /// <value>
        /// The name of the job.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "JobName is required.")]
        [JsonProperty(PropertyName = "jobName")]
        public string JobName { get; set; }
                ///
        /// <value>
        /// The status of the operation such as Completed, and Failed.
        /// </value>
        ///
        public enum StatusEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "IN_PROGRESS")]
            InProgress,
            [EnumMember(Value = "COMPLETED")]
            Completed,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "TIMED_OUT")]
            TimedOut,
            [EnumMember(Value = "UNKNOWN")]
            Unknown
        };

        /// <value>
        /// The status of the operation such as Completed, and Failed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Status is required.")]
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// The start time of the operation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "StartTime is required.")]
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }
        
        /// <value>
        /// The end time of the operation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EndTime is required.")]
        [JsonProperty(PropertyName = "endTime")]
        public string EndTime { get; set; }
        
        /// <value>
        /// The time it takes to complete the operation (in seconds).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DurationInSeconds is required.")]
        [JsonProperty(PropertyName = "durationInSeconds")]
        public System.Nullable<decimal> DurationInSeconds { get; set; }
        
        /// <value>
        /// The number of objects for which statistics collection is completed.
        /// </value>
        [JsonProperty(PropertyName = "completedCount")]
        public System.Nullable<int> CompletedCount { get; set; }
        
        /// <value>
        /// The number of objects for which statistics collection is in progress.
        /// </value>
        [JsonProperty(PropertyName = "inProgressCount")]
        public System.Nullable<int> InProgressCount { get; set; }
        
        /// <value>
        /// The number of objects for which statistics collection failed.
        /// </value>
        [JsonProperty(PropertyName = "failedCount")]
        public System.Nullable<int> FailedCount { get; set; }
        
        /// <value>
        /// The number of objects for which statistics collection timed out.
        /// </value>
        [JsonProperty(PropertyName = "timedOutCount")]
        public System.Nullable<int> TimedOutCount { get; set; }
        
        /// <value>
        /// The total number of objects for which statistics is collected. This number is the sum of all the objects
        /// with various statuses: completed, inProgress, failed, and timedOut.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "totalObjectsCount")]
        public System.Nullable<int> TotalObjectsCount { get; set; }
        
    }
}
