/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details of SQL statements and plans to be loaded from cursor cache. You can specify
    /// the plans to load using SQL ID, plan identifier, or filterName and filterValue pair.
    /// You can also control the SQL plan baseline into which the plans are loaded using either
    /// SQL text or SQL handle.
    /// 
    /// </summary>
    public class LoadSqlPlanBaselinesFromCursorCacheDetails 
    {
        
        /// <value>
        /// The name of the database job used for loading SQL plan baselines.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "JobName is required.")]
        [JsonProperty(PropertyName = "jobName")]
        public string JobName { get; set; }
        
        /// <value>
        /// The description of the job.
        /// </value>
        [JsonProperty(PropertyName = "jobDescription")]
        public string JobDescription { get; set; }
        
        /// <value>
        /// The SQL statement identifier. Identifies a SQL statement in the cursor cache.
        /// </value>
        [JsonProperty(PropertyName = "sqlId")]
        public string SqlId { get; set; }
        
        /// <value>
        /// The plan identifier. By default, all plans present in the cursor cache
        /// for the SQL statement identified by `sqlId` are captured.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "planHash")]
        public System.Nullable<decimal> PlanHash { get; set; }
        
        /// <value>
        /// The SQL text to use in identifying the SQL plan baseline into which the plans
        /// are loaded. If the SQL plan baseline does not exist, it is created.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sqlText")]
        public string SqlText { get; set; }
        
        /// <value>
        /// The SQL handle to use in identifying the SQL plan baseline into which
        /// the plans are loaded.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sqlHandle")]
        public string SqlHandle { get; set; }
                ///
        /// <value>
        /// The name of the filter.
        /// <br/>
        /// - SQL_TEXT: Search pattern to apply to SQL text.
        /// - PARSING_SCHEMA_NAME: Name of the parsing schema.
        /// - MODULE: Name of the module.
        /// - ACTION: Name of the action.
        /// 
        /// </value>
        ///
        public enum FilterNameEnum {
            [EnumMember(Value = "SQL_TEXT")]
            SqlText,
            [EnumMember(Value = "PARSING_SCHEMA_NAME")]
            ParsingSchemaName,
            [EnumMember(Value = "MODULE")]
            Module,
            [EnumMember(Value = "ACTION")]
            Action
        };

        /// <value>
        /// The name of the filter.
        /// <br/>
        /// - SQL_TEXT: Search pattern to apply to SQL text.
        /// - PARSING_SCHEMA_NAME: Name of the parsing schema.
        /// - MODULE: Name of the module.
        /// - ACTION: Name of the action.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "filterName")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<FilterNameEnum> FilterName { get; set; }
        
        /// <value>
        /// The filter value. It is upper-cased except when it is enclosed in
        /// double quotes or filter name is `SQL_TEXT`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "filterValue")]
        public string FilterValue { get; set; }
        
        /// <value>
        /// Indicates whether the plans are loaded as fixed plans (`true`) or non-fixed plans (`false`).
        /// By default, they are loaded as non-fixed plans.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isFixed")]
        public System.Nullable<bool> IsFixed { get; set; }
        
        /// <value>
        /// Indicates whether the loaded plans are enabled (`true`) or not (`false`).
        /// By default, they are enabled.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Credentials is required.")]
        [JsonProperty(PropertyName = "credentials")]
        public ManagedDatabaseCredential Credentials { get; set; }
        
    }
}
