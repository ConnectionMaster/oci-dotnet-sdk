/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details of a cloud DB system component.
    /// </summary>
    [JsonConverter(typeof(DiscoveredCloudDbSystemComponentModelConverter))]
    public class DiscoveredCloudDbSystemComponent 
    {
        
        /// <value>
        /// The identifier of the discovered DB system component.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ComponentId is required.")]
        [JsonProperty(PropertyName = "componentId")]
        public string ComponentId { get; set; }
        
        /// <value>
        /// The user-friendly name for the discovered DB system component. The name does not have to be unique.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The name of the discovered DB system component.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ComponentName is required.")]
        [JsonProperty(PropertyName = "componentName")]
        public string ComponentName { get; set; }
        
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the existing OCI resource matching the discovered DB system component.
        /// </value>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the existing Dbaas OCI resource matching the discovered DB system component.
        /// </value>
        [JsonProperty(PropertyName = "dbaasId")]
        public string DbaasId { get; set; }
        
        /// <value>
        /// Indicates whether the DB system component should be provisioned as an OCI resource or not.
        /// </value>
        [JsonProperty(PropertyName = "isSelectedForMonitoring")]
        public System.Nullable<bool> IsSelectedForMonitoring { get; set; }
                ///
        /// <value>
        /// The state of the discovered DB system component.
        /// </value>
        ///
        public enum StatusEnum {
            [EnumMember(Value = "NEW")]
            New,
            [EnumMember(Value = "EXISTING")]
            Existing,
            [EnumMember(Value = "EXISTING_BASIC")]
            ExistingBasic,
            [EnumMember(Value = "EXISTING_PE")]
            ExistingPe,
            [EnumMember(Value = "EXISTING_BASIC_PE")]
            ExistingBasicPe,
            [EnumMember(Value = "MARKED_FOR_UPGRADE")]
            MarkedForUpgrade,
            [EnumMember(Value = "MARKED_FOR_MIGRATION")]
            MarkedForMigration,
            [EnumMember(Value = "MARKED_FOR_UPGRADE_MIGRATION")]
            MarkedForUpgradeMigration,
            [EnumMember(Value = "MARKED_FOR_DELETION")]
            MarkedForDeletion,
            [EnumMember(Value = "UNKNOWN")]
            Unknown
        };

        /// <value>
        /// The state of the discovered DB system component.
        /// </value>
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// The list of associated components.
        /// </value>
        [JsonProperty(PropertyName = "associatedComponents")]
        public System.Collections.Generic.List<AssociatedCloudComponent> AssociatedComponents { get; set; }
        
    }

    public class DiscoveredCloudDbSystemComponentModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DiscoveredCloudDbSystemComponent);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DiscoveredCloudDbSystemComponent);
            var discriminator = jsonObject["componentType"].Value<string>();
            switch (discriminator)
            {
                case "CLUSTER_INSTANCE":
                    obj = new DiscoveredCloudClusterInstance();
                    break;
                case "PLUGGABLE_DATABASE":
                    obj = new DiscoveredCloudPluggableDatabase();
                    break;
                case "CLUSTER":
                    obj = new DiscoveredCloudCluster();
                    break;
                case "ASM":
                    obj = new DiscoveredCloudAsm();
                    break;
                case "LISTENER":
                    obj = new DiscoveredCloudListener();
                    break;
                case "DATABASE_INSTANCE":
                    obj = new DiscoveredCloudDbInstance();
                    break;
                case "DATABASE":
                    obj = new DiscoveredCloudDatabase();
                    break;
                case "DATABASE_HOME":
                    obj = new DiscoveredCloudDbHome();
                    break;
                case "DATABASE_NODE":
                    obj = new DiscoveredCloudDbNode();
                    break;
                case "ASM_INSTANCE":
                    obj = new DiscoveredCloudAsmInstance();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under DiscoveredCloudDbSystemComponent! Returning null value.");
            }
            return obj;
        }
    }
}
