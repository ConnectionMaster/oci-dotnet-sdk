/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// The details of an external database feature configuration.
    /// </summary>
    [JsonConverter(typeof(DatabaseFeatureConfigurationModelConverter))]
    public class DatabaseFeatureConfiguration 
    {
        
                ///
        /// <value>
        /// The list of statuses for Database Management features.
        /// 
        /// </value>
        ///
        public enum FeatureStatusEnum {
            [EnumMember(Value = "ENABLED")]
            Enabled,
            [EnumMember(Value = "NOT_ENABLED")]
            NotEnabled,
            [EnumMember(Value = "UNSUPPORTED")]
            Unsupported,
            [EnumMember(Value = "FAILED_ENABLING")]
            FailedEnabling,
            [EnumMember(Value = "FAILED_DISABLING")]
            FailedDisabling,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "ENABLED_WITH_WARNINGS")]
            EnabledWithWarnings,
            [EnumMember(Value = "PENDING_DISABLE")]
            PendingDisable,
            [EnumMember(Value = "ENABLING")]
            Enabling,
            [EnumMember(Value = "DISABLING")]
            Disabling
        };

        /// <value>
        /// The list of statuses for Database Management features.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FeatureStatus is required.")]
        [JsonProperty(PropertyName = "featureStatus")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<FeatureStatusEnum> FeatureStatus { get; set; }
        
        [JsonProperty(PropertyName = "connectorDetails")]
        public ConnectorDetails ConnectorDetails { get; set; }
        
        [JsonProperty(PropertyName = "databaseConnectionDetails")]
        public DatabaseConnectionDetails DatabaseConnectionDetails { get; set; }
        
    }

    public class DatabaseFeatureConfigurationModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DatabaseFeatureConfiguration);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DatabaseFeatureConfiguration);
            var discriminator = jsonObject["feature"].Value<string>();
            switch (discriminator)
            {
                case "DIAGNOSTICS_AND_MANAGEMENT":
                    obj = new DatabaseDiagnosticsAndManagementFeatureConfiguration();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
