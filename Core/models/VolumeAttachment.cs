/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CoreService.Models
{
    /// <summary>
    /// A base object for all types of attachments between a storage volume and an instance.
    /// For specific details about iSCSI attachments, see
    /// {@link IScsiVolumeAttachment}.
    /// <br/>
    /// For general information about volume attachments, see
    /// [Overview of Block Volume Storage](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/overview.htm).
    /// <br/>
    /// **Warning:** Oracle recommends that you avoid using any confidential information when you
    /// supply string values using the API.
    /// 
    /// </summary>
    [JsonConverter(typeof(VolumeAttachmentModelConverter))]
    public class VolumeAttachment 
    {
        
        
        /// <value>
        /// The availability domain of an instance.
        /// <br/>
        /// Example: Uocm:PHX-AD-1
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvailabilityDomain is required.")]
        [JsonProperty(PropertyName = "availabilityDomain")]
        public string AvailabilityDomain { get; set; }
        
        /// <value>
        /// The OCID of the compartment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The device name.
        /// </value>
        [JsonProperty(PropertyName = "device")]
        public string Device { get; set; }
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The OCID of the volume attachment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The OCID of the instance the volume is attached to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceId is required.")]
        [JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }
        
        /// <value>
        /// Whether the attachment was created in read-only mode.
        /// </value>
        [JsonProperty(PropertyName = "isReadOnly")]
        public System.Nullable<bool> IsReadOnly { get; set; }
        
        /// <value>
        /// Whether the attachment should be created in shareable mode. If an attachment
        /// is created in shareable mode, then other instances can attach the same volume, provided
        /// that they also create their attachments in shareable mode. Only certain volume types can
        /// be attached in shareable mode. Defaults to false if not specified.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isShareable")]
        public System.Nullable<bool> IsShareable { get; set; }
                ///
        /// <value>
        /// The current state of the volume attachment.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "ATTACHING")]
            Attaching,
            [EnumMember(Value = "ATTACHED")]
            Attached,
            [EnumMember(Value = "DETACHING")]
            Detaching,
            [EnumMember(Value = "DETACHED")]
            Detached
        };

        /// <value>
        /// The current state of the volume attachment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The OCID of the volume.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VolumeId is required.")]
        [JsonProperty(PropertyName = "volumeId")]
        public string VolumeId { get; set; }
        
        /// <value>
        /// Whether in-transit encryption for the data volume's paravirtualized attachment is enabled or not.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isPvEncryptionInTransitEnabled")]
        public System.Nullable<bool> IsPvEncryptionInTransitEnabled { get; set; }
        
        /// <value>
        /// Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
        /// </value>
        [JsonProperty(PropertyName = "isMultipath")]
        public System.Nullable<bool> IsMultipath { get; set; }
                ///
        /// <value>
        /// The iscsi login state of the volume attachment. For a Iscsi volume attachment,
        /// all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
        /// 
        /// </value>
        ///
        public enum IscsiLoginStateEnum {
            [EnumMember(Value = "UNKNOWN")]
            Unknown,
            [EnumMember(Value = "LOGGING_IN")]
            LoggingIn,
            [EnumMember(Value = "LOGIN_SUCCEEDED")]
            LoginSucceeded,
            [EnumMember(Value = "LOGIN_FAILED")]
            LoginFailed,
            [EnumMember(Value = "LOGGING_OUT")]
            LoggingOut,
            [EnumMember(Value = "LOGOUT_SUCCEEDED")]
            LogoutSucceeded,
            [EnumMember(Value = "LOGOUT_FAILED")]
            LogoutFailed
        };

        /// <value>
        /// The iscsi login state of the volume attachment. For a Iscsi volume attachment,
        /// all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "iscsiLoginState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<IscsiLoginStateEnum> IscsiLoginState { get; set; }
        
        /// <value>
        /// Flag indicating if this volume was created for the customer as part of a simplified launch.
        /// Used to determine whether the volume requires deletion on instance termination.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isVolumeCreatedDuringLaunch")]
        public System.Nullable<bool> IsVolumeCreatedDuringLaunch { get; set; }
        
    }

    public class VolumeAttachmentModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(VolumeAttachment);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(VolumeAttachment);
            var discriminator = jsonObject["attachmentType"].Value<string>();
            switch (discriminator)
            {
                case "iscsi":
                    obj = new IScsiVolumeAttachment();
                    break;
                case "emulated":
                    obj = new EmulatedVolumeAttachment();
                    break;
                case "paravirtualized":
                    obj = new ParavirtualizedVolumeAttachment();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under VolumeAttachment! Returning null value.");
            }
            return obj;
        }
    }
}
