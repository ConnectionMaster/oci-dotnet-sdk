/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.CoreService.Models
{
    /// <summary>
    /// The status of the cross-connect.
    /// </summary>
    public class CrossConnectStatus 
    {
        
        /// <value>
        /// The OCID of the cross-connect.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CrossConnectId is required.")]
        [JsonProperty(PropertyName = "crossConnectId")]
        public string CrossConnectId { get; set; }
                ///
        /// <value>
        /// Whether Oracle's side of the interface is up or down.
        /// </value>
        ///
        public enum InterfaceStateEnum {
            [EnumMember(Value = "UP")]
            Up,
            [EnumMember(Value = "DOWN")]
            Down
        };

        /// <value>
        /// Whether Oracle's side of the interface is up or down.
        /// </value>
        [JsonProperty(PropertyName = "interfaceState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<InterfaceStateEnum> InterfaceState { get; set; }
        
        /// <value>
        /// The light level of the cross-connect (in dBm).
        /// <br/>
        /// Example: 14.0
        /// </value>
        [JsonProperty(PropertyName = "lightLevelIndBm")]
        public System.Nullable<float> LightLevelIndBm { get; set; }
                ///
        /// <value>
        /// Status indicator corresponding to the light level.
        /// <br/>
        ///   * **NO_LIGHT:** No measurable light
        /// <br/>
        ///   * **LOW_WARN:** There's measurable light but it's too low
        /// <br/>
        ///   * **HIGH_WARN:** Light level is too high
        /// <br/>
        ///   * **BAD:** There's measurable light but the signal-to-noise ratio is bad
        /// <br/>
        ///   * **GOOD:** Good light level
        /// 
        /// </value>
        ///
        public enum LightLevelIndicatorEnum {
            [EnumMember(Value = "NO_LIGHT")]
            NoLight,
            [EnumMember(Value = "LOW_WARN")]
            LowWarn,
            [EnumMember(Value = "HIGH_WARN")]
            HighWarn,
            [EnumMember(Value = "BAD")]
            Bad,
            [EnumMember(Value = "GOOD")]
            Good
        };

        /// <value>
        /// Status indicator corresponding to the light level.
        /// <br/>
        ///   * **NO_LIGHT:** No measurable light
        /// <br/>
        ///   * **LOW_WARN:** There's measurable light but it's too low
        /// <br/>
        ///   * **HIGH_WARN:** Light level is too high
        /// <br/>
        ///   * **BAD:** There's measurable light but the signal-to-noise ratio is bad
        /// <br/>
        ///   * **GOOD:** Good light level
        /// 
        /// </value>
        [JsonProperty(PropertyName = "lightLevelIndicator")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LightLevelIndicatorEnum> LightLevelIndicator { get; set; }
        
    }
}
