/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CoreService.Models
{
    /// <summary>
    /// The platform configuration requested for the instance.
    /// <br/>
    /// If you provide the parameter, the instance is created with the platform configuration that you specify.
    /// For any values that you omit, the instance uses the default configuration values for the `shape` that you
    /// specify. If you don't provide the parameter, the default values for the `shape` are used.
    /// <br/>
    /// Each shape only supports certain configurable values. If the values that you provide are not valid for the
    /// specified `shape`, an error is returned.
    /// <br/>
    /// For more information about shielded instances, see
    /// [Shielded Instances](https://docs.cloud.oracle.com/iaas/Content/Compute/References/shielded-instances.htm).
    /// <br/>
    /// For more information about BIOS settings for bare metal instances, see
    /// [BIOS Settings for Bare Metal Instances](https://docs.cloud.oracle.com/iaas/Content/Compute/References/bios-settings.htm).
    /// 
    /// </summary>
    [JsonConverter(typeof(LaunchInstancePlatformConfigModelConverter))]
    public class LaunchInstancePlatformConfig 
    {
                ///
        /// <value>
        /// The type of platform being configured.
        /// 
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "AMD_MILAN_BM")]
            AmdMilanBm,
            [EnumMember(Value = "AMD_MILAN_BM_GPU")]
            AmdMilanBmGpu,
            [EnumMember(Value = "AMD_ROME_BM")]
            AmdRomeBm,
            [EnumMember(Value = "AMD_ROME_BM_GPU")]
            AmdRomeBmGpu,
            [EnumMember(Value = "GENERIC_BM")]
            GenericBm,
            [EnumMember(Value = "INTEL_ICELAKE_BM")]
            IntelIcelakeBm,
            [EnumMember(Value = "INTEL_SKYLAKE_BM")]
            IntelSkylakeBm,
            [EnumMember(Value = "AMD_VM")]
            AmdVm,
            [EnumMember(Value = "INTEL_VM")]
            IntelVm
        };

        
        /// <value>
        /// Whether Secure Boot is enabled on the instance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSecureBootEnabled")]
        public System.Nullable<bool> IsSecureBootEnabled { get; set; }
        
        /// <value>
        /// Whether the Trusted Platform Module (TPM) is enabled on the instance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isTrustedPlatformModuleEnabled")]
        public System.Nullable<bool> IsTrustedPlatformModuleEnabled { get; set; }
        
        /// <value>
        /// Whether the Measured Boot feature is enabled on the instance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMeasuredBootEnabled")]
        public System.Nullable<bool> IsMeasuredBootEnabled { get; set; }
        
        /// <value>
        /// Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMemoryEncryptionEnabled")]
        public System.Nullable<bool> IsMemoryEncryptionEnabled { get; set; }
        
    }

    public class LaunchInstancePlatformConfigModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(LaunchInstancePlatformConfig);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(LaunchInstancePlatformConfig);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "AMD_ROME_BM_GPU":
                    obj = new AmdRomeBmGpuLaunchInstancePlatformConfig();
                    break;
                case "AMD_ROME_BM":
                    obj = new AmdRomeBmLaunchInstancePlatformConfig();
                    break;
                case "INTEL_ICELAKE_BM":
                    obj = new IntelIcelakeBmLaunchInstancePlatformConfig();
                    break;
                case "AMD_VM":
                    obj = new AmdVmLaunchInstancePlatformConfig();
                    break;
                case "INTEL_VM":
                    obj = new IntelVmLaunchInstancePlatformConfig();
                    break;
                case "INTEL_SKYLAKE_BM":
                    obj = new IntelSkylakeBmLaunchInstancePlatformConfig();
                    break;
                case "AMD_MILAN_BM":
                    obj = new AmdMilanBmLaunchInstancePlatformConfig();
                    break;
                case "GENERIC_BM":
                    obj = new GenericBmLaunchInstancePlatformConfig();
                    break;
                case "AMD_MILAN_BM_GPU":
                    obj = new AmdMilanBmGpuLaunchInstancePlatformConfig();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
