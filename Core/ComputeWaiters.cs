/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.CoreService.Models;
using Oci.CoreService.Requests;
using Oci.CoreService.Responses;

namespace Oci.CoreService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Compute.
    /// </summary>
    public class ComputeWaiters
    {
        private readonly ComputeClient client;
        private readonly Oci.WorkrequestsService.WorkRequestClient workRequestClient;

        public  ComputeWaiters(ComputeClient client, Oci.WorkrequestsService.WorkRequestClient workRequestClient)
        {
            this.client = client;
            this.workRequestClient = workRequestClient;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeComputeCapacityReservationCompartmentRequest, ChangeComputeCapacityReservationCompartmentResponse> ForChangeComputeCapacityReservationCompartment(ChangeComputeCapacityReservationCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeComputeCapacityReservationCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeComputeCapacityReservationCompartmentRequest, ChangeComputeCapacityReservationCompartmentResponse> ForChangeComputeCapacityReservationCompartment(ChangeComputeCapacityReservationCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeComputeCapacityReservationCompartmentRequest, ChangeComputeCapacityReservationCompartmentResponse>(() =>
            {
                var response = client.ChangeComputeCapacityReservationCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeComputeCapacityTopologyCompartmentRequest, ChangeComputeCapacityTopologyCompartmentResponse> ForChangeComputeCapacityTopologyCompartment(ChangeComputeCapacityTopologyCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeComputeCapacityTopologyCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeComputeCapacityTopologyCompartmentRequest, ChangeComputeCapacityTopologyCompartmentResponse> ForChangeComputeCapacityTopologyCompartment(ChangeComputeCapacityTopologyCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeComputeCapacityTopologyCompartmentRequest, ChangeComputeCapacityTopologyCompartmentResponse>(() =>
            {
                var response = client.ChangeComputeCapacityTopologyCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDedicatedVmHostCompartmentRequest, ChangeDedicatedVmHostCompartmentResponse> ForChangeDedicatedVmHostCompartment(ChangeDedicatedVmHostCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDedicatedVmHostCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDedicatedVmHostCompartmentRequest, ChangeDedicatedVmHostCompartmentResponse> ForChangeDedicatedVmHostCompartment(ChangeDedicatedVmHostCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDedicatedVmHostCompartmentRequest, ChangeDedicatedVmHostCompartmentResponse>(() =>
            {
                var response = client.ChangeDedicatedVmHostCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeInstanceCompartmentRequest, ChangeInstanceCompartmentResponse> ForChangeInstanceCompartment(ChangeInstanceCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeInstanceCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeInstanceCompartmentRequest, ChangeInstanceCompartmentResponse> ForChangeInstanceCompartment(ChangeInstanceCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeInstanceCompartmentRequest, ChangeInstanceCompartmentResponse>(() =>
            {
                var response = client.ChangeInstanceCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateComputeCapacityReservationRequest, CreateComputeCapacityReservationResponse> ForCreateComputeCapacityReservation(CreateComputeCapacityReservationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateComputeCapacityReservation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateComputeCapacityReservationRequest, CreateComputeCapacityReservationResponse> ForCreateComputeCapacityReservation(CreateComputeCapacityReservationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateComputeCapacityReservationRequest, CreateComputeCapacityReservationResponse>(() =>
            {
                var response = client.CreateComputeCapacityReservation(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateComputeCapacityTopologyRequest, CreateComputeCapacityTopologyResponse> ForCreateComputeCapacityTopology(CreateComputeCapacityTopologyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateComputeCapacityTopology(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateComputeCapacityTopologyRequest, CreateComputeCapacityTopologyResponse> ForCreateComputeCapacityTopology(CreateComputeCapacityTopologyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateComputeCapacityTopologyRequest, CreateComputeCapacityTopologyResponse>(() =>
            {
                var response = client.CreateComputeCapacityTopology(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDedicatedVmHostRequest, CreateDedicatedVmHostResponse> ForCreateDedicatedVmHost(CreateDedicatedVmHostRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateDedicatedVmHost(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateDedicatedVmHostRequest, CreateDedicatedVmHostResponse> ForCreateDedicatedVmHost(CreateDedicatedVmHostRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateDedicatedVmHostRequest, CreateDedicatedVmHostResponse>(() =>
            {
                var response = client.CreateDedicatedVmHost(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateImageRequest, CreateImageResponse> ForCreateImage(CreateImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateImageRequest, CreateImageResponse> ForCreateImage(CreateImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateImageRequest, CreateImageResponse>(() =>
            {
                var response = client.CreateImage(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteComputeCapacityReservationRequest, DeleteComputeCapacityReservationResponse> ForDeleteComputeCapacityReservation(DeleteComputeCapacityReservationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteComputeCapacityReservation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteComputeCapacityReservationRequest, DeleteComputeCapacityReservationResponse> ForDeleteComputeCapacityReservation(DeleteComputeCapacityReservationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteComputeCapacityReservationRequest, DeleteComputeCapacityReservationResponse>(() =>
            {
                var response = client.DeleteComputeCapacityReservation(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteComputeCapacityTopologyRequest, DeleteComputeCapacityTopologyResponse> ForDeleteComputeCapacityTopology(DeleteComputeCapacityTopologyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteComputeCapacityTopology(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteComputeCapacityTopologyRequest, DeleteComputeCapacityTopologyResponse> ForDeleteComputeCapacityTopology(DeleteComputeCapacityTopologyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteComputeCapacityTopologyRequest, DeleteComputeCapacityTopologyResponse>(() =>
            {
                var response = client.DeleteComputeCapacityTopology(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDedicatedVmHostRequest, DeleteDedicatedVmHostResponse> ForDeleteDedicatedVmHost(DeleteDedicatedVmHostRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteDedicatedVmHost(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteDedicatedVmHostRequest, DeleteDedicatedVmHostResponse> ForDeleteDedicatedVmHost(DeleteDedicatedVmHostRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteDedicatedVmHostRequest, DeleteDedicatedVmHostResponse>(() =>
            {
                var response = client.DeleteDedicatedVmHost(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ExportImageRequest, ExportImageResponse> ForExportImage(ExportImageRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForExportImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ExportImageRequest, ExportImageResponse> ForExportImage(ExportImageRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ExportImageRequest, ExportImageResponse>(() =>
            {
                var response = client.ExportImage(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBootVolumeAttachmentRequest, GetBootVolumeAttachmentResponse> ForBootVolumeAttachment(GetBootVolumeAttachmentRequest request, params BootVolumeAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForBootVolumeAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBootVolumeAttachmentRequest, GetBootVolumeAttachmentResponse> ForBootVolumeAttachment(GetBootVolumeAttachmentRequest request, WaiterConfiguration config, params BootVolumeAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBootVolumeAttachmentRequest, GetBootVolumeAttachmentResponse>(
                request,
                request => client.GetBootVolumeAttachment(request),
                response => targetStates.Contains(response.BootVolumeAttachment.LifecycleState.Value)
            );
            return new Waiter<GetBootVolumeAttachmentRequest, GetBootVolumeAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeCapacityReservationRequest, GetComputeCapacityReservationResponse> ForComputeCapacityReservation(GetComputeCapacityReservationRequest request, params ComputeCapacityReservation.LifecycleStateEnum[] targetStates)
        {
            return this.ForComputeCapacityReservation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeCapacityReservationRequest, GetComputeCapacityReservationResponse> ForComputeCapacityReservation(GetComputeCapacityReservationRequest request, WaiterConfiguration config, params ComputeCapacityReservation.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetComputeCapacityReservationRequest, GetComputeCapacityReservationResponse>(
                request,
                request => client.GetComputeCapacityReservation(request),
                response => targetStates.Contains(response.ComputeCapacityReservation.LifecycleState.Value),
                targetStates.Contains(ComputeCapacityReservation.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetComputeCapacityReservationRequest, GetComputeCapacityReservationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeCapacityTopologyRequest, GetComputeCapacityTopologyResponse> ForComputeCapacityTopology(GetComputeCapacityTopologyRequest request, params ComputeCapacityTopology.LifecycleStateEnum[] targetStates)
        {
            return this.ForComputeCapacityTopology(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeCapacityTopologyRequest, GetComputeCapacityTopologyResponse> ForComputeCapacityTopology(GetComputeCapacityTopologyRequest request, WaiterConfiguration config, params ComputeCapacityTopology.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetComputeCapacityTopologyRequest, GetComputeCapacityTopologyResponse>(
                request,
                request => client.GetComputeCapacityTopology(request),
                response => targetStates.Contains(response.ComputeCapacityTopology.LifecycleState.Value),
                targetStates.Contains(ComputeCapacityTopology.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetComputeCapacityTopologyRequest, GetComputeCapacityTopologyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeClusterRequest, GetComputeClusterResponse> ForComputeCluster(GetComputeClusterRequest request, params ComputeCluster.LifecycleStateEnum[] targetStates)
        {
            return this.ForComputeCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetComputeClusterRequest, GetComputeClusterResponse> ForComputeCluster(GetComputeClusterRequest request, WaiterConfiguration config, params ComputeCluster.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetComputeClusterRequest, GetComputeClusterResponse>(
                request,
                request => client.GetComputeCluster(request),
                response => targetStates.Contains(response.ComputeCluster.LifecycleState.Value),
                targetStates.Contains(ComputeCluster.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetComputeClusterRequest, GetComputeClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse> ForConsoleHistory(GetConsoleHistoryRequest request, params ConsoleHistory.LifecycleStateEnum[] targetStates)
        {
            return this.ForConsoleHistory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse> ForConsoleHistory(GetConsoleHistoryRequest request, WaiterConfiguration config, params ConsoleHistory.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetConsoleHistoryRequest, GetConsoleHistoryResponse>(
                request,
                request => client.GetConsoleHistory(request),
                response => targetStates.Contains(response.ConsoleHistory.LifecycleState.Value)
            );
            return new Waiter<GetConsoleHistoryRequest, GetConsoleHistoryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDedicatedVmHostRequest, GetDedicatedVmHostResponse> ForDedicatedVmHost(GetDedicatedVmHostRequest request, params DedicatedVmHost.LifecycleStateEnum[] targetStates)
        {
            return this.ForDedicatedVmHost(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDedicatedVmHostRequest, GetDedicatedVmHostResponse> ForDedicatedVmHost(GetDedicatedVmHostRequest request, WaiterConfiguration config, params DedicatedVmHost.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDedicatedVmHostRequest, GetDedicatedVmHostResponse>(
                request,
                request => client.GetDedicatedVmHost(request),
                response => targetStates.Contains(response.DedicatedVmHost.LifecycleState.Value),
                targetStates.Contains(DedicatedVmHost.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDedicatedVmHostRequest, GetDedicatedVmHostResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetImageRequest, GetImageResponse> ForImage(GetImageRequest request, params Image.LifecycleStateEnum[] targetStates)
        {
            return this.ForImage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetImageRequest, GetImageResponse> ForImage(GetImageRequest request, WaiterConfiguration config, params Image.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetImageRequest, GetImageResponse>(
                request,
                request => client.GetImage(request),
                response => targetStates.Contains(response.Image.LifecycleState.Value),
                targetStates.Contains(Image.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetImageRequest, GetImageResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInstanceRequest, GetInstanceResponse> ForInstance(GetInstanceRequest request, params Instance.LifecycleStateEnum[] targetStates)
        {
            return this.ForInstance(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInstanceRequest, GetInstanceResponse> ForInstance(GetInstanceRequest request, WaiterConfiguration config, params Instance.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetInstanceRequest, GetInstanceResponse>(
                request,
                request => client.GetInstance(request),
                response => targetStates.Contains(response.Instance.LifecycleState.Value),
                targetStates.Contains(Instance.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetInstanceRequest, GetInstanceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInstanceConsoleConnectionRequest, GetInstanceConsoleConnectionResponse> ForInstanceConsoleConnection(GetInstanceConsoleConnectionRequest request, params InstanceConsoleConnection.LifecycleStateEnum[] targetStates)
        {
            return this.ForInstanceConsoleConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInstanceConsoleConnectionRequest, GetInstanceConsoleConnectionResponse> ForInstanceConsoleConnection(GetInstanceConsoleConnectionRequest request, WaiterConfiguration config, params InstanceConsoleConnection.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetInstanceConsoleConnectionRequest, GetInstanceConsoleConnectionResponse>(
                request,
                request => client.GetInstanceConsoleConnection(request),
                response => targetStates.Contains(response.InstanceConsoleConnection.LifecycleState.Value),
                targetStates.Contains(InstanceConsoleConnection.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetInstanceConsoleConnectionRequest, GetInstanceConsoleConnectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVnicAttachmentRequest, GetVnicAttachmentResponse> ForVnicAttachment(GetVnicAttachmentRequest request, params VnicAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForVnicAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVnicAttachmentRequest, GetVnicAttachmentResponse> ForVnicAttachment(GetVnicAttachmentRequest request, WaiterConfiguration config, params VnicAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVnicAttachmentRequest, GetVnicAttachmentResponse>(
                request,
                request => client.GetVnicAttachment(request),
                response => targetStates.Contains(response.VnicAttachment.LifecycleState.Value)
            );
            return new Waiter<GetVnicAttachmentRequest, GetVnicAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVolumeAttachmentRequest, GetVolumeAttachmentResponse> ForVolumeAttachment(GetVolumeAttachmentRequest request, params VolumeAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForVolumeAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVolumeAttachmentRequest, GetVolumeAttachmentResponse> ForVolumeAttachment(GetVolumeAttachmentRequest request, WaiterConfiguration config, params VolumeAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVolumeAttachmentRequest, GetVolumeAttachmentResponse>(
                request,
                request => client.GetVolumeAttachment(request),
                response => targetStates.Contains(response.VolumeAttachment.LifecycleState.Value)
            );
            return new Waiter<GetVolumeAttachmentRequest, GetVolumeAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchInstanceRequest, LaunchInstanceResponse> ForLaunchInstance(LaunchInstanceRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForLaunchInstance(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<LaunchInstanceRequest, LaunchInstanceResponse> ForLaunchInstance(LaunchInstanceRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<LaunchInstanceRequest, LaunchInstanceResponse>(() =>
            {
                var response = client.LaunchInstance(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateComputeCapacityReservationRequest, UpdateComputeCapacityReservationResponse> ForUpdateComputeCapacityReservation(UpdateComputeCapacityReservationRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateComputeCapacityReservation(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateComputeCapacityReservationRequest, UpdateComputeCapacityReservationResponse> ForUpdateComputeCapacityReservation(UpdateComputeCapacityReservationRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateComputeCapacityReservationRequest, UpdateComputeCapacityReservationResponse>(() =>
            {
                var response = client.UpdateComputeCapacityReservation(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateComputeCapacityTopologyRequest, UpdateComputeCapacityTopologyResponse> ForUpdateComputeCapacityTopology(UpdateComputeCapacityTopologyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateComputeCapacityTopology(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateComputeCapacityTopologyRequest, UpdateComputeCapacityTopologyResponse> ForUpdateComputeCapacityTopology(UpdateComputeCapacityTopologyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateComputeCapacityTopologyRequest, UpdateComputeCapacityTopologyResponse>(() =>
            {
                var response = client.UpdateComputeCapacityTopology(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateInstanceRequest, UpdateInstanceResponse> ForUpdateInstance(UpdateInstanceRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateInstance(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateInstanceRequest, UpdateInstanceResponse> ForUpdateInstance(UpdateInstanceRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateInstanceRequest, UpdateInstanceResponse>(() =>
            {
                var response = client.UpdateInstance(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
    }
}
