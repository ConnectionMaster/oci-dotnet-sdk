/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GoldengateService.Models
{
    /// <summary>
    /// Represents the metadata of a Java Message Service Connection.
    /// 
    /// </summary>
    public class JavaMessageServiceConnection : Connection
    {
                ///
        /// <value>
        /// The Java Message Service technology type.
        /// 
        /// </value>
        ///
        public enum TechnologyTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "ORACLE_WEBLOGIC_JMS")]
            OracleWeblogicJms
        };

        /// <value>
        /// The Java Message Service technology type.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TechnologyType is required.")]
        [JsonProperty(PropertyName = "technologyType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TechnologyTypeEnum> TechnologyType { get; set; }
        
        /// <value>
        /// If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShouldUseJndi is required.")]
        [JsonProperty(PropertyName = "shouldUseJndi")]
        public System.Nullable<bool> ShouldUseJndi { get; set; }
        
        /// <value>
        /// The Connection Factory can be looked up using this name.
        /// e.g.: 'ConnectionFactory'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "jndiConnectionFactory")]
        public string JndiConnectionFactory { get; set; }
        
        /// <value>
        /// The URL that Java Message Service will use to contact the JNDI provider.
        /// e.g.: 'tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "jndiProviderUrl")]
        public string JndiProviderUrl { get; set; }
        
        /// <value>
        /// The implementation of javax.naming.spi.InitialContextFactory interface
        /// that the client uses to obtain initial naming context.
        /// e.g.: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "jndiInitialContextFactory")]
        public string JndiInitialContextFactory { get; set; }
        
        /// <value>
        /// Specifies the identity of the principal (user) to be authenticated.
        /// e.g.: 'admin2'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "jndiSecurityPrincipal")]
        public string JndiSecurityPrincipal { get; set; }
        
        /// <value>
        /// Connectin URL of the Java Message Service, specifying the protocol, host, and port.
        /// e.g.: 'mq://myjms.host.domain:7676'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "connectionUrl")]
        public string ConnectionUrl { get; set; }
        
        /// <value>
        /// The of Java class implementing javax.jms.ConnectionFactory interface
        /// supplied by the Java Message Service provider.
        /// e.g.: 'com.stc.jmsjca.core.JConnectionFactoryXA'
        /// 
        /// </value>
        [JsonProperty(PropertyName = "connectionFactory")]
        public string ConnectionFactory { get; set; }
                ///
        /// <value>
        /// Security protocol for Java Message Service. If not provided, default is PLAIN.
        /// Optional until 2024-06-27, in the release after it will be made required.
        /// 
        /// </value>
        ///
        public enum SecurityProtocolEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "PLAIN")]
            Plain,
            [EnumMember(Value = "TLS")]
            Tls,
            [EnumMember(Value = "MTLS")]
            Mtls
        };

        /// <value>
        /// Security protocol for Java Message Service. If not provided, default is PLAIN.
        /// Optional until 2024-06-27, in the release after it will be made required.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "securityProtocol")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SecurityProtocolEnum> SecurityProtocol { get; set; }
                ///
        /// <value>
        /// Authentication type for Java Message Service.  If not provided, default is NONE.
        /// Optional until 2024-06-27, in the release after it will be made required.
        /// 
        /// </value>
        ///
        public enum AuthenticationTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "BASIC")]
            Basic
        };

        /// <value>
        /// Authentication type for Java Message Service.  If not provided, default is NONE.
        /// Optional until 2024-06-27, in the release after it will be made required.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "authenticationType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<AuthenticationTypeEnum> AuthenticationType { get; set; }
        
        /// <value>
        /// The username Oracle GoldenGate uses to connect to the Java Message Service.
        /// This username must already exist and be available by the Java Message Service to be connected to.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }
        
        /// <value>
        /// Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host 
        /// field, or make sure the host name is resolvable in the target VCN.
        /// <br/>
        /// The private IP address of the connection's endpoint in the customer's VCN, typically a
        /// database endpoint or a big data endpoint (e.g. Kafka bootstrap server).
        /// In case the privateIp is provided, the subnetId must also be provided.
        /// In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible.
        /// In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "privateIp")]
        public string PrivateIp { get; set; }
        
        [JsonProperty(PropertyName = "connectionType")]
        private readonly string connectionType = "JAVA_MESSAGE_SERVICE";
    }
}
