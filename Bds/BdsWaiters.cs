/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.BdsService.Models;
using Oci.BdsService.Requests;
using Oci.BdsService.Responses;

namespace Oci.BdsService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Bds.
    /// </summary>
    public class BdsWaiters
    {
        private readonly BdsClient client;

        public  BdsWaiters(BdsClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutoScalingConfigurationRequest, GetAutoScalingConfigurationResponse> ForAutoScalingConfiguration(GetAutoScalingConfigurationRequest request, params AutoScalingConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForAutoScalingConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAutoScalingConfigurationRequest, GetAutoScalingConfigurationResponse> ForAutoScalingConfiguration(GetAutoScalingConfigurationRequest request, WaiterConfiguration config, params AutoScalingConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAutoScalingConfigurationRequest, GetAutoScalingConfigurationResponse>(
                request,
                request => client.GetAutoScalingConfiguration(request),
                response => targetStates.Contains(response.AutoScalingConfiguration.LifecycleState.Value),
                targetStates.Contains(AutoScalingConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAutoScalingConfigurationRequest, GetAutoScalingConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsApiKeyRequest, GetBdsApiKeyResponse> ForBdsApiKey(GetBdsApiKeyRequest request, params BdsApiKey.LifecycleStateEnum[] targetStates)
        {
            return this.ForBdsApiKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsApiKeyRequest, GetBdsApiKeyResponse> ForBdsApiKey(GetBdsApiKeyRequest request, WaiterConfiguration config, params BdsApiKey.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBdsApiKeyRequest, GetBdsApiKeyResponse>(
                request,
                request => client.GetBdsApiKey(request),
                response => targetStates.Contains(response.BdsApiKey.LifecycleState.Value),
                targetStates.Contains(BdsApiKey.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBdsApiKeyRequest, GetBdsApiKeyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsInstanceRequest, GetBdsInstanceResponse> ForBdsInstance(GetBdsInstanceRequest request, params BdsInstance.LifecycleStateEnum[] targetStates)
        {
            return this.ForBdsInstance(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsInstanceRequest, GetBdsInstanceResponse> ForBdsInstance(GetBdsInstanceRequest request, WaiterConfiguration config, params BdsInstance.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBdsInstanceRequest, GetBdsInstanceResponse>(
                request,
                request => client.GetBdsInstance(request),
                response => targetStates.Contains(response.BdsInstance.LifecycleState.Value),
                targetStates.Contains(BdsInstance.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBdsInstanceRequest, GetBdsInstanceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsMetastoreConfigurationRequest, GetBdsMetastoreConfigurationResponse> ForBdsMetastoreConfiguration(GetBdsMetastoreConfigurationRequest request, params BdsMetastoreConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForBdsMetastoreConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBdsMetastoreConfigurationRequest, GetBdsMetastoreConfigurationResponse> ForBdsMetastoreConfiguration(GetBdsMetastoreConfigurationRequest request, WaiterConfiguration config, params BdsMetastoreConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBdsMetastoreConfigurationRequest, GetBdsMetastoreConfigurationResponse>(
                request,
                request => client.GetBdsMetastoreConfiguration(request),
                response => targetStates.Contains(response.BdsMetastoreConfiguration.LifecycleState.Value),
                targetStates.Contains(BdsMetastoreConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBdsMetastoreConfigurationRequest, GetBdsMetastoreConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIdentityConfigurationRequest, GetIdentityConfigurationResponse> ForIdentityConfiguration(GetIdentityConfigurationRequest request, params IdentityConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForIdentityConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIdentityConfigurationRequest, GetIdentityConfigurationResponse> ForIdentityConfiguration(GetIdentityConfigurationRequest request, WaiterConfiguration config, params IdentityConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIdentityConfigurationRequest, GetIdentityConfigurationResponse>(
                request,
                request => client.GetIdentityConfiguration(request),
                response => targetStates.Contains(response.IdentityConfiguration.LifecycleState.Value),
                targetStates.Contains(IdentityConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetIdentityConfigurationRequest, GetIdentityConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeBackupRequest, GetNodeBackupResponse> ForNodeBackup(GetNodeBackupRequest request, params NodeBackup.LifecycleStateEnum[] targetStates)
        {
            return this.ForNodeBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeBackupRequest, GetNodeBackupResponse> ForNodeBackup(GetNodeBackupRequest request, WaiterConfiguration config, params NodeBackup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetNodeBackupRequest, GetNodeBackupResponse>(
                request,
                request => client.GetNodeBackup(request),
                response => targetStates.Contains(response.NodeBackup.LifecycleState.Value),
                targetStates.Contains(NodeBackup.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetNodeBackupRequest, GetNodeBackupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeBackupConfigurationRequest, GetNodeBackupConfigurationResponse> ForNodeBackupConfiguration(GetNodeBackupConfigurationRequest request, params NodeBackupConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForNodeBackupConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeBackupConfigurationRequest, GetNodeBackupConfigurationResponse> ForNodeBackupConfiguration(GetNodeBackupConfigurationRequest request, WaiterConfiguration config, params NodeBackupConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetNodeBackupConfigurationRequest, GetNodeBackupConfigurationResponse>(
                request,
                request => client.GetNodeBackupConfiguration(request),
                response => targetStates.Contains(response.NodeBackupConfiguration.LifecycleState.Value),
                targetStates.Contains(NodeBackupConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetNodeBackupConfigurationRequest, GetNodeBackupConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeReplaceConfigurationRequest, GetNodeReplaceConfigurationResponse> ForNodeReplaceConfiguration(GetNodeReplaceConfigurationRequest request, params NodeReplaceConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForNodeReplaceConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodeReplaceConfigurationRequest, GetNodeReplaceConfigurationResponse> ForNodeReplaceConfiguration(GetNodeReplaceConfigurationRequest request, WaiterConfiguration config, params NodeReplaceConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetNodeReplaceConfigurationRequest, GetNodeReplaceConfigurationResponse>(
                request,
                request => client.GetNodeReplaceConfiguration(request),
                response => targetStates.Contains(response.NodeReplaceConfiguration.LifecycleState.Value),
                targetStates.Contains(NodeReplaceConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetNodeReplaceConfigurationRequest, GetNodeReplaceConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResourcePrincipalConfigurationRequest, GetResourcePrincipalConfigurationResponse> ForResourcePrincipalConfiguration(GetResourcePrincipalConfigurationRequest request, params ResourcePrincipalConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForResourcePrincipalConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResourcePrincipalConfigurationRequest, GetResourcePrincipalConfigurationResponse> ForResourcePrincipalConfiguration(GetResourcePrincipalConfigurationRequest request, WaiterConfiguration config, params ResourcePrincipalConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetResourcePrincipalConfigurationRequest, GetResourcePrincipalConfigurationResponse>(
                request,
                request => client.GetResourcePrincipalConfiguration(request),
                response => targetStates.Contains(response.ResourcePrincipalConfiguration.LifecycleState.Value),
                targetStates.Contains(ResourcePrincipalConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetResourcePrincipalConfigurationRequest, GetResourcePrincipalConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
