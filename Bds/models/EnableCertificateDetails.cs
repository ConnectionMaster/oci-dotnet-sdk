/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.BdsService.Models
{
    /// <summary>
    /// The request body info about configure certificate service list.
    /// </summary>
    public class EnableCertificateDetails 
    {
        
        /// <value>
        /// Base-64 encoded password for the cluster admin user.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ClusterAdminPassword is required.")]
        [JsonProperty(PropertyName = "clusterAdminPassword")]
        public string ClusterAdminPassword { get; set; }
        
        /// <value>
        /// List of services for which certificate needs to be enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Services is required.")]
        [JsonProperty(PropertyName = "services")]
        public System.Collections.Generic.List<Service> Services { get; set; }
        
        /// <value>
        /// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
        /// </value>
        [JsonProperty(PropertyName = "rootCertificate")]
        public string RootCertificate { get; set; }
        
        /// <value>
        /// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
        /// </value>
        [JsonProperty(PropertyName = "hostCertDetails")]
        public System.Collections.Generic.List<HostCertDetails> HostCertDetails { get; set; }
        
        /// <value>
        /// Base-64 encoded password for CA certificate's private key. This value can be empty.
        /// </value>
        [JsonProperty(PropertyName = "serverKeyPassword")]
        public string ServerKeyPassword { get; set; }
        
    }
}
