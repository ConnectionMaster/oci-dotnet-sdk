/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DevopsService.Models
{
    /// <summary>
    /// Build source required for the Build stage.
    /// </summary>
    [JsonConverter(typeof(BuildSourceModelConverter))]
    public class BuildSource 
    {
        
        /// <value>
        /// Name of the build source. This must be unique within a build source collection. The name can be used by customers to locate the working directory pertinent to this repository.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
                ///
        /// <value>
        /// The type of source provider.
        /// </value>
        ///
        public enum ConnectionTypeEnum {
            [EnumMember(Value = "GITHUB")]
            Github,
            [EnumMember(Value = "GITLAB")]
            Gitlab,
            [EnumMember(Value = "GITLAB_SERVER")]
            GitlabServer,
            [EnumMember(Value = "BITBUCKET_CLOUD")]
            BitbucketCloud,
            [EnumMember(Value = "BITBUCKET_SERVER")]
            BitbucketServer,
            [EnumMember(Value = "DEVOPS_CODE_REPOSITORY")]
            DevopsCodeRepository,
            [EnumMember(Value = "VBS")]
            Vbs
        };

        
        /// <value>
        /// URL for the repository.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RepositoryUrl is required.")]
        [JsonProperty(PropertyName = "repositoryUrl")]
        public string RepositoryUrl { get; set; }
        
        /// <value>
        /// Branch name.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Branch is required.")]
        [JsonProperty(PropertyName = "branch")]
        public string Branch { get; set; }
        
    }

    public class BuildSourceModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(BuildSource);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(BuildSource);
            var discriminator = jsonObject["connectionType"].Value<string>();
            switch (discriminator)
            {
                case "VBS":
                    obj = new VbsBuildSource();
                    break;
                case "BITBUCKET_SERVER":
                    obj = new BitbucketServerBuildSource();
                    break;
                case "GITHUB":
                    obj = new GithubBuildSource();
                    break;
                case "BITBUCKET_CLOUD":
                    obj = new BitbucketCloudBuildSource();
                    break;
                case "GITLAB_SERVER":
                    obj = new GitlabServerBuildSource();
                    break;
                case "DEVOPS_CODE_REPOSITORY":
                    obj = new DevopsCodeRepositoryBuildSource();
                    break;
                case "GITLAB":
                    obj = new GitlabBuildSource();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under BuildSource! Returning null value.");
            }
            return obj;
        }
    }
}
