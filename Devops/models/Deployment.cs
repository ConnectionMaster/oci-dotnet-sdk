/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DevopsService.Models
{
    /// <summary>
    /// A single execution or run of a pipeline.
    /// </summary>
    [JsonConverter(typeof(DeploymentModelConverter))]
    public class Deployment 
    {
        
        [JsonProperty(PropertyName = "deployPipelineArtifacts")]
        public DeployPipelineArtifactCollection DeployPipelineArtifacts { get; set; }
        
        [JsonProperty(PropertyName = "deployPipelineEnvironments")]
        public DeployPipelineEnvironmentCollection DeployPipelineEnvironments { get; set; }
                ///
        /// <value>
        /// Specifies type of deployment.
        /// </value>
        ///
        public enum DeploymentTypeEnum {
            [EnumMember(Value = "PIPELINE_DEPLOYMENT")]
            PipelineDeployment,
            [EnumMember(Value = "PIPELINE_REDEPLOYMENT")]
            PipelineRedeployment,
            [EnumMember(Value = "SINGLE_STAGE_DEPLOYMENT")]
            SingleStageDeployment,
            [EnumMember(Value = "SINGLE_STAGE_REDEPLOYMENT")]
            SingleStageRedeployment
        };

        
        /// <value>
        /// Unique identifier that is immutable on creation.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The OCID of a project.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ProjectId is required.")]
        [JsonProperty(PropertyName = "projectId")]
        public string ProjectId { get; set; }
        
        /// <value>
        /// The OCID of a pipeline.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DeployPipelineId is required.")]
        [JsonProperty(PropertyName = "deployPipelineId")]
        public string DeployPipelineId { get; set; }
        
        /// <value>
        /// The OCID of a compartment.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
                ///
        /// <value>
        /// The current state of the deployment.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "ACCEPTED")]
            Accepted,
            [EnumMember(Value = "IN_PROGRESS")]
            InProgress,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "SUCCEEDED")]
            Succeeded,
            [EnumMember(Value = "CANCELING")]
            Canceling,
            [EnumMember(Value = "CANCELED")]
            Canceled
        };

        /// <value>
        /// The current state of the deployment.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
        
        [JsonProperty(PropertyName = "deploymentArguments")]
        public DeploymentArgumentCollection DeploymentArguments { get; set; }
        
        [JsonProperty(PropertyName = "deployStageOverrideArguments")]
        public DeployStageOverrideArgumentCollection DeployStageOverrideArguments { get; set; }
        
        [JsonProperty(PropertyName = "deployArtifactOverrideArguments")]
        public DeployArtifactOverrideArgumentCollection DeployArtifactOverrideArguments { get; set; }
        
        [JsonProperty(PropertyName = "deploymentExecutionProgress")]
        public DeploymentExecutionProgress DeploymentExecutionProgress { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
    }

    public class DeploymentModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(Deployment);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(Deployment);
            var discriminator = jsonObject["deploymentType"].Value<string>();
            switch (discriminator)
            {
                case "SINGLE_STAGE_REDEPLOYMENT":
                    obj = new SingleDeployStageRedeployment();
                    break;
                case "PIPELINE_DEPLOYMENT":
                    obj = new DeployPipelineDeployment();
                    break;
                case "PIPELINE_REDEPLOYMENT":
                    obj = new DeployPipelineRedeployment();
                    break;
                case "SINGLE_STAGE_DEPLOYMENT":
                    obj = new SingleDeployStageDeployment();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under Deployment! Returning null value.");
            }
            return obj;
        }
    }
}
