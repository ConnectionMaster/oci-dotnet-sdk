/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DevopsService.Models
{
    /// <summary>
    /// Details of the user configured settings for viewing the metrics at repository level.
    /// </summary>
    public class SummarizeRepositoryAnalyticsDetails 
    {
        
        /// <value>
        /// Email address of the author.
        /// </value>
        [JsonProperty(PropertyName = "authorEmail")]
        public string AuthorEmail { get; set; }
        
        /// <value>
        /// The name of the metric to be filtered.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "RepositoryMetrics is required.")]
        [JsonProperty(PropertyName = "repositoryMetrics", ItemConverterType = typeof(StringEnumConverter))]
        public System.Collections.Generic.List<MetricName> RepositoryMetrics { get; set; }
                ///
        /// <value>
        /// Metrics aggregated for the defined period.
        /// </value>
        ///
        public enum AggregationDurationEnum {
            [EnumMember(Value = "DAILY")]
            Daily,
            [EnumMember(Value = "WEEKLY")]
            Weekly,
            [EnumMember(Value = "MONTHLY")]
            Monthly,
            [EnumMember(Value = "YEARLY")]
            Yearly
        };

        /// <value>
        /// Metrics aggregated for the defined period.
        /// </value>
        [JsonProperty(PropertyName = "aggregationDuration")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<AggregationDurationEnum> AggregationDuration { get; set; }
        
        /// <value>
        /// The beginning of the metric data query time range.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "StartTime is required.")]
        [JsonProperty(PropertyName = "startTime")]
        public System.Nullable<System.DateTime> StartTime { get; set; }
        
        /// <value>
        /// The end of the metric data query time range.
        /// </value>
        [JsonProperty(PropertyName = "endTime")]
        public System.Nullable<System.DateTime> EndTime { get; set; }
                ///
        /// <value>
        /// Attribute by which metric data has to be grouped
        /// </value>
        ///
        public enum GroupByEnum {
            [EnumMember(Value = "AUTHOR")]
            Author
        };

        /// <value>
        /// Attribute by which metric data has to be grouped
        /// </value>
        [JsonProperty(PropertyName = "groupBy")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<GroupByEnum> GroupBy { get; set; }
        
    }
}
