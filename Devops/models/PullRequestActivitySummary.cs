/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DevopsService.Models
{
    /// <summary>
    /// Summary of an activity record in a pull request
    /// </summary>
    [JsonConverter(typeof(PullRequestActivitySummaryModelConverter))]
    public class PullRequestActivitySummary 
    {
        
        /// <value>
        /// activity identifier
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Principal is required.")]
        [JsonProperty(PropertyName = "principal")]
        public PrincipalDetails Principal { get; set; }
        
        /// <value>
        /// pullRequest OCID
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PullRequestId is required.")]
        [JsonProperty(PropertyName = "pullRequestId")]
        public string PullRequestId { get; set; }
        
        /// <value>
        /// The time the action was performed. An RFC3339 formatted datetime string
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeOccurred is required.")]
        [JsonProperty(PropertyName = "timeOccurred")]
        public System.Nullable<System.DateTime> TimeOccurred { get; set; }
                ///
        /// <value>
        /// The type of activity performed
        /// </value>
        ///
        public enum ActivityTypeEnum {
            [EnumMember(Value = "LIFECYCLE")]
            Lifecycle,
            [EnumMember(Value = "APPROVAL")]
            Approval,
            [EnumMember(Value = "COMMIT")]
            Commit,
            [EnumMember(Value = "REVIEWER")]
            Reviewer,
            [EnumMember(Value = "COMMENT")]
            Comment
        };

        
    }

    public class PullRequestActivitySummaryModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(PullRequestActivitySummary);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(PullRequestActivitySummary);
            var discriminator = jsonObject["activityType"].Value<string>();
            switch (discriminator)
            {
                case "COMMIT":
                    obj = new CommitActivitySummary();
                    break;
                case "COMMENT":
                    obj = new CommentActivitySummary();
                    break;
                case "APPROVAL":
                    obj = new ApprovalActivitySummary();
                    break;
                case "REVIEWER":
                    obj = new ReviewerActivitySummary();
                    break;
                case "LIFECYCLE":
                    obj = new PullRequestLifecycleActivitySummary();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under PullRequestActivitySummary! Returning null value.");
            }
            return obj;
        }
    }
}
