/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.MarketplaceService.Models
{
    /// <summary>
    /// A base object for all types of listing packages.
    /// </summary>
    [JsonConverter(typeof(ListingPackageModelConverter))]
    public class ListingPackage 
    {
        
        /// <value>
        /// Description of this package.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The ID of the listing this package belongs to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ListingId is required.")]
        [JsonProperty(PropertyName = "listingId")]
        public string ListingId { get; set; }
        
        /// <value>
        /// The package version.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Version is required.")]
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }
        
        
        [JsonProperty(PropertyName = "pricing")]
        public PricingModel Pricing { get; set; }
        
        /// <value>
        /// The unique identifier for the package resource.
        /// </value>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }
        
        /// <value>
        /// The date and time this listing package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)
        /// timestamp format.
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        [JsonProperty(PropertyName = "operatingSystem")]
        public OperatingSystem OperatingSystem { get; set; }
        
        /// <value>
        /// The regions where you can deploy the listing package. (Some packages have restrictions that limit their deployment to United States regions only.)
        /// 
        /// </value>
        [JsonProperty(PropertyName = "regions")]
        public System.Collections.Generic.List<Region> Regions { get; set; }
        
    }

    public class ListingPackageModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(ListingPackage);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(ListingPackage);
            var discriminator = jsonObject["packageType"].Value<string>();
            switch (discriminator)
            {
                case "ORCHESTRATION":
                    obj = new OrchestrationListingPackage();
                    break;
                case "IMAGE":
                    obj = new ImageListingPackage();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under ListingPackage! Returning null value.");
            }
            return obj;
        }
    }
}
