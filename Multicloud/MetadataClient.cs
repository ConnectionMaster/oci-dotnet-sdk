/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System;
using System.Diagnostics;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Oci.Common;
using Oci.Common.DeveloperToolConfigurations;
using Oci.Common.Model;
using Oci.Common.Auth;
using Oci.Common.Retry;
using Oci.MulticloudService.Requests;
using Oci.MulticloudService.Responses;

namespace Oci.MulticloudService
{
    /// <summary>Service client instance for Metadata.</summary>
    public class MetadataClient : RegionalClientBase
    {
        private readonly RetryConfiguration retryConfiguration;
        private const string basePathWithoutHost = "/20180828";

        public MetadataPaginators Paginators { get; }

        /// <summary>
        /// Creates a new service instance using the given authentication provider and/or client configuration and/or endpoint.
        /// A client configuration can also be provided optionally to adjust REST client behaviors.
        /// </summary>
        /// <param name="authenticationDetailsProvider">The authentication details provider. Required.</param>
        /// <param name="clientConfiguration">The client configuration that contains settings to adjust REST client behaviors. Optional.</param>
        /// <param name="endpoint">The endpoint of the service. If not provided and the client is a regional client, the endpoint will be constructed based on region information. Optional.</param>
        public MetadataClient(IBasicAuthenticationDetailsProvider authenticationDetailsProvider, ClientConfiguration clientConfiguration = null, string endpoint = null)
            : base(authenticationDetailsProvider, clientConfiguration)
        {
            if (!DeveloperToolConfiguration.IsServiceEnabled("multicloud"))
            {
                throw new ArgumentException("The DeveloperToolConfiguration disabled this service, this behavior is controlled by DeveloperToolConfiguration.OciEnabledServiceSet variable. Please check if your local DeveloperToolConfiguration file has configured the service you're targeting or contact the cloud provider on the availability of this service");
            }
            service = new Service
            {
                ServiceName = "METADATA",
                ServiceEndpointPrefix = "",
                ServiceEndpointTemplate = "https://multicloud.{region}.oci.{secondLevelDomain}"
            };

            ClientConfiguration clientConfigurationToUse = clientConfiguration ?? new ClientConfiguration();

            if (authenticationDetailsProvider is IRegionProvider)
            {
                // Use region from Authentication details provider.
                SetRegion(((IRegionProvider)authenticationDetailsProvider).Region);
            }

            if (endpoint != null)
            {
                logger.Info($"Using endpoint specified \"{endpoint}\".");
                SetEndpoint(endpoint);
            }

            this.retryConfiguration = clientConfigurationToUse.RetryConfiguration;
            Paginators = new MetadataPaginators(this);
        }

        /// <summary>
        /// List externalLocationDetail metadata from OCI to Cloud  Service Provider for regions, Availability Zones, and Cluster Placement Group ID.
        /// examples:
        ///   application-json: |
        ///     [
        ///       {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az1-xyz\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;,
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az1\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-1 or aws-account-id-1, gcp-project-id-1\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad1-xyb\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad2\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-1\&quot;
        ///       },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az2-abc\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;,
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az2\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-2 or aws-account-id-2, gcp-project-id-2\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad2-xby\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-2\&quot;
        ///         },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az3-abz\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;, 
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az3\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad3-cde\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad3\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-3\&quot;
        ///         },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US 2\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az1-def\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;,
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az1\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-4 or aws-account-id-4, gcp-project-id-4\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad1-bce\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad2\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-4\&quot;
        ///         },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US 2\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az2-uvw\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;,
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az2\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad2-ftc\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-5\&quot;
        ///         },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US 2\&quot;,
        ///             \&quot;cspPhysicalAz\&quot;: \&quot;az3-uvw\&quot;,
        ///             \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 2\&quot;,
        ///             \&quot;cspLogicalAz\&quot;: \&quot;az3\&quot;,
        ///             \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;,
        ///             \&quot;cspZoneKeyReferenceId\&quot;: {
        ///               \&quot;keyName\&quot;: \&quot;AzureSubscriptionId or AwsAccountId, GcpProjectName\&quot;,
        ///               \&quot;keyValue\&quot;: \&quot;azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\&quot;
        ///             }
        ///           },
        ///           \&quot;ociPhysicalAd\&quot;: \&quot;ad3-stc\&quot;,
        ///           \&quot;ociLogicalAd\&quot;: \&quot;ad3\&quot;,
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;,
        ///           \&quot;cpgId\&quot;: \&quot;cpg-6\&quot;
        ///         }
        ///       ]
        /// 
        /// </summary>
        /// <param name="request">The request object containing the details to send. Required.</param>
        /// <param name="retryConfiguration">The retry configuration that will be used by to send this request. Optional.</param>
        /// <param name="cancellationToken">The cancellation token to cancel this operation. Optional.</param>
        /// <param name="completionOption">The completion option for this operation. Optional.</param>
        /// <returns>A response object containing details about the completed operation</returns>
        /// <example>Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/multicloud/ListExternalLocationDetailsMetadata.cs.html">here</a> to see an example of how to use ListExternalLocationDetailsMetadata API.</example>
        public async Task<ListExternalLocationDetailsMetadataResponse> ListExternalLocationDetailsMetadata(ListExternalLocationDetailsMetadataRequest request, RetryConfiguration retryConfiguration = null, CancellationToken cancellationToken = default, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            logger.Trace("Called listExternalLocationDetailsMetadata");
            Uri uri = new Uri(this.restClient.GetEndpoint(), System.IO.Path.Combine(basePathWithoutHost, "/externalLocationsMetadata".Trim('/')));
            HttpMethod method = new HttpMethod("GET");
            HttpRequestMessage requestMessage = Converter.ToHttpRequestMessage(uri, method, request);
            requestMessage.Headers.Add("Accept", "application/json");
            GenericRetrier retryingClient = Retrier.GetPreferredRetrier(retryConfiguration, this.retryConfiguration);
            HttpResponseMessage responseMessage;

            try
            {
                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();
                if (retryingClient != null)
                {
                    responseMessage = await retryingClient.MakeRetryingCall(this.restClient.HttpSend, requestMessage, completionOption, cancellationToken).ConfigureAwait(false);
                }
                else
                {
                    responseMessage = await this.restClient.HttpSend(requestMessage, completionOption: completionOption).ConfigureAwait(false);
                }
                stopWatch.Stop();
                ApiDetails apiDetails = new ApiDetails
                {
                    ServiceName = "Metadata",
                    OperationName = "ListExternalLocationDetailsMetadata",
                    RequestEndpoint = $"{method.Method} {requestMessage.RequestUri}",
                    ApiReferenceLink = "",
                    UserAgent = this.GetUserAgent()
                };
                this.restClient.CheckHttpResponseMessage(requestMessage, responseMessage, apiDetails);
                logger.Debug($"Total Latency for this API call is: {stopWatch.ElapsedMilliseconds} ms");
                return Converter.FromHttpResponseMessage<ListExternalLocationDetailsMetadataResponse>(responseMessage);
            }
            catch (OciException e)
            {
                logger.Error(e);
                throw;
            }
            catch (Exception e)
            {
                logger.Error($"ListExternalLocationDetailsMetadata failed with error: {e.Message}");
                throw;
            }
        }

        /// <summary>
        /// List externalLocation metadata from OCI to the Cloud Service Provider for regions, Physical Availability Zones.
        /// examples:
        ///   application-json: |
        ///     [
        ///       {
        ///         \&quot;externalLocation\&quot;: {
        ///           \&quot;cspRegion\&quot;: \&quot;eastus\&quot;,
        ///           \&quot;cspPhysicalAz\&quot;: \&quot;eastus-az1\&quot;,
        ///           \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 1\&quot;,
        ///           \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;
        ///         },
        ///         \&quot;ociPhysicalAd\&quot;: \&quot;iad-ad-1\&quot;,
        ///         \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///         \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///     },
        ///       {
        ///         \&quot;externalLocation\&quot;: {
        ///           \&quot;cspRegion\&quot;: \&quot;eastus\&quot;,
        ///           \&quot;cspPhysicalAz\&quot;: \&quot;eastus-az1\&quot;,
        ///           \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 1\&quot;,
        ///           \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;
        ///         },
        ///         \&quot;ociPhysicalAd\&quot;: \&quot;iad-ad-1\&quot;,
        ///         \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///         \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///       },
        ///       {
        ///         \&quot;externalLocation\&quot;: {
        ///           \&quot;cspRegion\&quot;: \&quot;eastus2\&quot;,
        ///           \&quot;cspPhysicalAz\&quot;: \&quot;eastus2-az3\&quot;,
        ///           \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 1\&quot;,
        ///           \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;
        ///         },
        ///         \&quot;ociPhysicalAd\&quot;: \&quot;iad-ad-2\&quot;,
        ///         \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///         \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///       },
        ///       {
        ///         \&quot;externalLocation\&quot;: {
        ///           \&quot;cspRegion\&quot;: \&quot;eastus\&quot;,
        ///           \&quot;cspPhysicalAz\&quot;: \&quot;eastus-az3\&quot;
        ///           \&quot;cspPhysicalAzDisplayName\&quot;: \&quot;(US) East US 1\&quot;,
        ///           \&quot;serviceName\&quot;: \&quot;ORACLEDBATAZURE\&quot;
        ///         },
        ///         \&quot;ociPhysicalAd\&quot;: \&quot;iad-ad-333\&quot;,
        ///         \&quot;ociLogicalAd\&quot;: \&quot;ad1\&quot;,
        ///         \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///       }
        ///     ]
        /// 
        /// </summary>
        /// <param name="request">The request object containing the details to send. Required.</param>
        /// <param name="retryConfiguration">The retry configuration that will be used by to send this request. Optional.</param>
        /// <param name="cancellationToken">The cancellation token to cancel this operation. Optional.</param>
        /// <param name="completionOption">The completion option for this operation. Optional.</param>
        /// <returns>A response object containing details about the completed operation</returns>
        /// <example>Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/multicloud/ListExternalLocationMappingMetadata.cs.html">here</a> to see an example of how to use ListExternalLocationMappingMetadata API.</example>
        public async Task<ListExternalLocationMappingMetadataResponse> ListExternalLocationMappingMetadata(ListExternalLocationMappingMetadataRequest request, RetryConfiguration retryConfiguration = null, CancellationToken cancellationToken = default, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            logger.Trace("Called listExternalLocationMappingMetadata");
            Uri uri = new Uri(this.restClient.GetEndpoint(), System.IO.Path.Combine(basePathWithoutHost, "/externalLocationMappingMetadata".Trim('/')));
            HttpMethod method = new HttpMethod("GET");
            HttpRequestMessage requestMessage = Converter.ToHttpRequestMessage(uri, method, request);
            requestMessage.Headers.Add("Accept", "application/json");
            GenericRetrier retryingClient = Retrier.GetPreferredRetrier(retryConfiguration, this.retryConfiguration);
            HttpResponseMessage responseMessage;

            try
            {
                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();
                if (retryingClient != null)
                {
                    responseMessage = await retryingClient.MakeRetryingCall(this.restClient.HttpSend, requestMessage, completionOption, cancellationToken).ConfigureAwait(false);
                }
                else
                {
                    responseMessage = await this.restClient.HttpSend(requestMessage, completionOption: completionOption).ConfigureAwait(false);
                }
                stopWatch.Stop();
                ApiDetails apiDetails = new ApiDetails
                {
                    ServiceName = "Metadata",
                    OperationName = "ListExternalLocationMappingMetadata",
                    RequestEndpoint = $"{method.Method} {requestMessage.RequestUri}",
                    ApiReferenceLink = "",
                    UserAgent = this.GetUserAgent()
                };
                this.restClient.CheckHttpResponseMessage(requestMessage, responseMessage, apiDetails);
                logger.Debug($"Total Latency for this API call is: {stopWatch.ElapsedMilliseconds} ms");
                return Converter.FromHttpResponseMessage<ListExternalLocationMappingMetadataResponse>(responseMessage);
            }
            catch (OciException e)
            {
                logger.Error(e);
                throw;
            }
            catch (Exception e)
            {
                logger.Error($"ListExternalLocationMappingMetadata failed with error: {e.Message}");
                throw;
            }
        }

        /// <summary>
        /// List externalLocationSummary metadata from OCI Region to the Cloud Service Provider region across all regions.
        /// examples:
        ///   application-json: |
        ///     [
        ///       {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US\&quot;
        ///           },
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///       },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;East US 2\&quot;
        ///           },
        ///           \&quot;ociRegion\&quot;: \&quot;us-ashburn-1\&quot;
        ///         },
        ///         {
        ///           \&quot;externalLocation\&quot;: {
        ///             \&quot;cspRegion\&quot;: \&quot;Germany West Central\&quot;
        ///           },
        ///           \&quot;ociRegion\&quot;: \&quot;eu-frankfurt-1\&quot;,
        ///         }
        ///       ]
        /// 
        /// </summary>
        /// <param name="request">The request object containing the details to send. Required.</param>
        /// <param name="retryConfiguration">The retry configuration that will be used by to send this request. Optional.</param>
        /// <param name="cancellationToken">The cancellation token to cancel this operation. Optional.</param>
        /// <param name="completionOption">The completion option for this operation. Optional.</param>
        /// <returns>A response object containing details about the completed operation</returns>
        /// <example>Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/multicloud/ListExternalLocationSummariesMetadata.cs.html">here</a> to see an example of how to use ListExternalLocationSummariesMetadata API.</example>
        public async Task<ListExternalLocationSummariesMetadataResponse> ListExternalLocationSummariesMetadata(ListExternalLocationSummariesMetadataRequest request, RetryConfiguration retryConfiguration = null, CancellationToken cancellationToken = default, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            logger.Trace("Called listExternalLocationSummariesMetadata");
            Uri uri = new Uri(this.restClient.GetEndpoint(), System.IO.Path.Combine(basePathWithoutHost, "/externalLocationSummariesMetadata".Trim('/')));
            HttpMethod method = new HttpMethod("GET");
            HttpRequestMessage requestMessage = Converter.ToHttpRequestMessage(uri, method, request);
            requestMessage.Headers.Add("Accept", "application/json");
            GenericRetrier retryingClient = Retrier.GetPreferredRetrier(retryConfiguration, this.retryConfiguration);
            HttpResponseMessage responseMessage;

            try
            {
                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();
                if (retryingClient != null)
                {
                    responseMessage = await retryingClient.MakeRetryingCall(this.restClient.HttpSend, requestMessage, completionOption, cancellationToken).ConfigureAwait(false);
                }
                else
                {
                    responseMessage = await this.restClient.HttpSend(requestMessage, completionOption: completionOption).ConfigureAwait(false);
                }
                stopWatch.Stop();
                ApiDetails apiDetails = new ApiDetails
                {
                    ServiceName = "Metadata",
                    OperationName = "ListExternalLocationSummariesMetadata",
                    RequestEndpoint = $"{method.Method} {requestMessage.RequestUri}",
                    ApiReferenceLink = "",
                    UserAgent = this.GetUserAgent()
                };
                this.restClient.CheckHttpResponseMessage(requestMessage, responseMessage, apiDetails);
                logger.Debug($"Total Latency for this API call is: {stopWatch.ElapsedMilliseconds} ms");
                return Converter.FromHttpResponseMessage<ListExternalLocationSummariesMetadataResponse>(responseMessage);
            }
            catch (OciException e)
            {
                logger.Error(e);
                throw;
            }
            catch (Exception e)
            {
                logger.Error($"ListExternalLocationSummariesMetadata failed with error: {e.Message}");
                throw;
            }
        }

    }
}
