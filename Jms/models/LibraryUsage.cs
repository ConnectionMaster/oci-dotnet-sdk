/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.JmsService.Models
{
    /// <summary>
    /// Library usage during a specified time period.
    /// 
    /// </summary>
    public class LibraryUsage 
    {
        
        /// <value>
        /// The internal identifier of the library.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LibraryKey is required.")]
        [JsonProperty(PropertyName = "libraryKey")]
        public string LibraryKey { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the related fleet.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FleetId is required.")]
        [JsonProperty(PropertyName = "fleetId")]
        public string FleetId { get; set; }
        
        /// <value>
        /// The name of the library.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LibraryName is required.")]
        [JsonProperty(PropertyName = "libraryName")]
        public string LibraryName { get; set; }
        
        /// <value>
        /// The version of the library.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "libraryVersion")]
        public string LibraryVersion { get; set; }
        
        /// <value>
        /// Deprecated, use `vulnerabilities` instead.
        /// The Common Vulnerabilities and Exposures (CVE) ID.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "cveId")]
        public string CveId { get; set; }
        
        /// <value>
        /// Deprecated, use `highestVulnerabilityScore` instead.
        /// The Common Vulnerability Scoring System (CVSS) score. If `cvssScore` is not available, it will be set to -1.0. It is set to 0.0 when `cveId` is null.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "cvssScore")]
        public System.Nullable<float> CvssScore { get; set; }
        
        /// <value>
        /// Indicates whether the library was dynamically detected.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsDynamicallyDetected is required.")]
        [JsonProperty(PropertyName = "isDynamicallyDetected")]
        public System.Nullable<bool> IsDynamicallyDetected { get; set; }
        
        /// <value>
        /// Highest CVSS score among the all vulnerabilities. If highest CVSS score is not available, it will be set to -1.0. It is set to 0.0 when there is no associated vulnerabilities.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "highestVulnerabilityScore")]
        public System.Nullable<float> HighestVulnerabilityScore { get; set; }
        
        /// <value>
        /// The list of library vulnerabilities.
        /// </value>
        [JsonProperty(PropertyName = "vulnerabilities")]
        public System.Collections.Generic.List<LibraryVulnerability> Vulnerabilities { get; set; }
        
        /// <value>
        /// Confidence level of the assessed library's vulnerabilities.
        /// </value>
        [JsonProperty(PropertyName = "confidenceLevel")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ConfidenceLevel> ConfidenceLevel { get; set; }
        
        /// <value>
        /// The approximate count of applications using the library.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "approximateApplicationCount")]
        public System.Nullable<int> ApproximateApplicationCount { get; set; }
        
        /// <value>
        /// The approximate count of Java Server instances using the library.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "approximateJavaServerInstanceCount")]
        public System.Nullable<int> ApproximateJavaServerInstanceCount { get; set; }
        
        /// <value>
        /// The approximate count of deployed applications using the library.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "approximateDeployedApplicationCount")]
        public System.Nullable<int> ApproximateDeployedApplicationCount { get; set; }
        
        /// <value>
        /// The approximate count of managed instances using the library.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "approximateManagedInstanceCount")]
        public System.Nullable<int> ApproximateManagedInstanceCount { get; set; }
        
        /// <value>
        /// Lower bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
        /// </value>
        [JsonProperty(PropertyName = "timeStart")]
        public System.Nullable<System.DateTime> TimeStart { get; set; }
        
        /// <value>
        /// Upper bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
        /// </value>
        [JsonProperty(PropertyName = "timeEnd")]
        public System.Nullable<System.DateTime> TimeEnd { get; set; }
        
        /// <value>
        /// The date and time the resource was _first_ reported to JMS.
        /// This is potentially _before_ the specified time period provided by the filters.
        /// For example, a resource can be first reported to JMS before the start of a specified time period,
        /// if it is also reported during the time period.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeFirstSeen")]
        public System.Nullable<System.DateTime> TimeFirstSeen { get; set; }
        
        /// <value>
        /// The date and time the resource was _last_ reported to JMS.
        /// This is potentially _after_ the specified time period provided by the filters.
        /// For example, a resource can be last reported to JMS before the start of a specified time period,
        /// if it is also reported during the time period.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeLastSeen")]
        public System.Nullable<System.DateTime> TimeLastSeen { get; set; }
        
        /// <value>
        /// Deprecated.
        /// The date and time of the last CVEs refresh was completed.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeLastCveRefreshed")]
        public System.Nullable<System.DateTime> TimeLastCveRefreshed { get; set; }
        
    }
}
