/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.MarketplacepublisherService.Models;
using Oci.MarketplacepublisherService.Requests;
using Oci.MarketplacepublisherService.Responses;

namespace Oci.MarketplacepublisherService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of MarketplacePublisher.
    /// </summary>
    public class MarketplacePublisherWaiters
    {
        private readonly MarketplacePublisherClient client;

        public  MarketplacePublisherWaiters(MarketplacePublisherClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetArtifactRequest, GetArtifactResponse> ForArtifact(GetArtifactRequest request, params Artifact.LifecycleStateEnum[] targetStates)
        {
            return this.ForArtifact(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetArtifactRequest, GetArtifactResponse> ForArtifact(GetArtifactRequest request, WaiterConfiguration config, params Artifact.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetArtifactRequest, GetArtifactResponse>(
                request,
                request => client.GetArtifact(request),
                response => targetStates.Contains(response.Artifact.LifecycleState.Value),
                targetStates.Contains(Artifact.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetArtifactRequest, GetArtifactResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCategoryRequest, GetCategoryResponse> ForCategory(GetCategoryRequest request, params Category.LifecycleStateEnum[] targetStates)
        {
            return this.ForCategory(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCategoryRequest, GetCategoryResponse> ForCategory(GetCategoryRequest request, WaiterConfiguration config, params Category.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCategoryRequest, GetCategoryResponse>(
                request,
                request => client.GetCategory(request),
                response => targetStates.Contains(response.Category.LifecycleState.Value)
            );
            return new Waiter<GetCategoryRequest, GetCategoryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRequest, GetListingResponse> ForListing(GetListingRequest request, params Listing.LifecycleStateEnum[] targetStates)
        {
            return this.ForListing(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRequest, GetListingResponse> ForListing(GetListingRequest request, WaiterConfiguration config, params Listing.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetListingRequest, GetListingResponse>(
                request,
                request => client.GetListing(request),
                response => targetStates.Contains(response.Listing.LifecycleState.Value),
                targetStates.Contains(Listing.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetListingRequest, GetListingResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionRequest, GetListingRevisionResponse> ForListingRevision(GetListingRevisionRequest request, params ListingRevision.LifecycleStateEnum[] targetStates)
        {
            return this.ForListingRevision(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionRequest, GetListingRevisionResponse> ForListingRevision(GetListingRevisionRequest request, WaiterConfiguration config, params ListingRevision.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetListingRevisionRequest, GetListingRevisionResponse>(
                request,
                request => client.GetListingRevision(request),
                response => targetStates.Contains(response.ListingRevision.LifecycleState.Value),
                targetStates.Contains(ListingRevision.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetListingRevisionRequest, GetListingRevisionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionAttachmentRequest, GetListingRevisionAttachmentResponse> ForListingRevisionAttachment(GetListingRevisionAttachmentRequest request, params ListingRevisionAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForListingRevisionAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionAttachmentRequest, GetListingRevisionAttachmentResponse> ForListingRevisionAttachment(GetListingRevisionAttachmentRequest request, WaiterConfiguration config, params ListingRevisionAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetListingRevisionAttachmentRequest, GetListingRevisionAttachmentResponse>(
                request,
                request => client.GetListingRevisionAttachment(request),
                response => targetStates.Contains(response.ListingRevisionAttachment.LifecycleState.Value),
                targetStates.Contains(ListingRevisionAttachment.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetListingRevisionAttachmentRequest, GetListingRevisionAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionNoteRequest, GetListingRevisionNoteResponse> ForListingRevisionNote(GetListingRevisionNoteRequest request, params ListingRevisionNote.LifecycleStateEnum[] targetStates)
        {
            return this.ForListingRevisionNote(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionNoteRequest, GetListingRevisionNoteResponse> ForListingRevisionNote(GetListingRevisionNoteRequest request, WaiterConfiguration config, params ListingRevisionNote.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetListingRevisionNoteRequest, GetListingRevisionNoteResponse>(
                request,
                request => client.GetListingRevisionNote(request),
                response => targetStates.Contains(response.ListingRevisionNote.LifecycleState.Value),
                targetStates.Contains(ListingRevisionNote.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetListingRevisionNoteRequest, GetListingRevisionNoteResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionPackageRequest, GetListingRevisionPackageResponse> ForListingRevisionPackage(GetListingRevisionPackageRequest request, params ListingRevisionPackage.LifecycleStateEnum[] targetStates)
        {
            return this.ForListingRevisionPackage(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetListingRevisionPackageRequest, GetListingRevisionPackageResponse> ForListingRevisionPackage(GetListingRevisionPackageRequest request, WaiterConfiguration config, params ListingRevisionPackage.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetListingRevisionPackageRequest, GetListingRevisionPackageResponse>(
                request,
                request => client.GetListingRevisionPackage(request),
                response => targetStates.Contains(response.ListingRevisionPackage.LifecycleState.Value),
                targetStates.Contains(ListingRevisionPackage.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetListingRevisionPackageRequest, GetListingRevisionPackageResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMarketRequest, GetMarketResponse> ForMarket(GetMarketRequest request, params Market.LifecycleStateEnum[] targetStates)
        {
            return this.ForMarket(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMarketRequest, GetMarketResponse> ForMarket(GetMarketRequest request, WaiterConfiguration config, params Market.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMarketRequest, GetMarketResponse>(
                request,
                request => client.GetMarket(request),
                response => targetStates.Contains(response.Market.LifecycleState.Value)
            );
            return new Waiter<GetMarketRequest, GetMarketResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetProductRequest, GetProductResponse> ForProduct(GetProductRequest request, params Product.LifecycleStateEnum[] targetStates)
        {
            return this.ForProduct(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetProductRequest, GetProductResponse> ForProduct(GetProductRequest request, WaiterConfiguration config, params Product.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetProductRequest, GetProductResponse>(
                request,
                request => client.GetProduct(request),
                response => targetStates.Contains(response.Product.LifecycleState.Value)
            );
            return new Waiter<GetProductRequest, GetProductResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTermRequest, GetTermResponse> ForTerm(GetTermRequest request, params Term.LifecycleStateEnum[] targetStates)
        {
            return this.ForTerm(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTermRequest, GetTermResponse> ForTerm(GetTermRequest request, WaiterConfiguration config, params Term.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetTermRequest, GetTermResponse>(
                request,
                request => client.GetTerm(request),
                response => targetStates.Contains(response.Term.LifecycleState.Value)
            );
            return new Waiter<GetTermRequest, GetTermResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTermVersionRequest, GetTermVersionResponse> ForTermVersion(GetTermVersionRequest request, params TermVersion.LifecycleStateEnum[] targetStates)
        {
            return this.ForTermVersion(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTermVersionRequest, GetTermVersionResponse> ForTermVersion(GetTermVersionRequest request, WaiterConfiguration config, params TermVersion.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetTermVersionRequest, GetTermVersionResponse>(
                request,
                request => client.GetTermVersion(request),
                response => targetStates.Contains(response.TermVersion.LifecycleState.Value)
            );
            return new Waiter<GetTermVersionRequest, GetTermVersionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
