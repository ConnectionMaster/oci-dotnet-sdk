/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DnsService.Models
{
    /// <summary>
    /// The body for defining a new zone.
    /// <br/>
    /// **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
    /// 
    /// </summary>
    public class CreateZoneDetails : CreateZoneBaseDetails
    {
                ///
        /// <value>
        /// The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL
        /// zones.
        /// 
        /// </value>
        ///
        public enum ZoneTypeEnum {
            [EnumMember(Value = "PRIMARY")]
            Primary,
            [EnumMember(Value = "SECONDARY")]
            Secondary
        };

        /// <value>
        /// The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL
        /// zones.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "zoneType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ZoneTypeEnum> ZoneType { get; set; }
        
        /// <value>
        /// This value will be null for zones in the global DNS.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "viewId")]
        public string ViewId { get; set; }
        
        /// <value>
        /// The scope of the zone.
        /// </value>
        [JsonProperty(PropertyName = "scope")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<Scope> Scope { get; set; }
        
        /// <value>
        /// External master servers for the zone. `externalMasters` becomes a
        /// required parameter when the `zoneType` value is `SECONDARY`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "externalMasters")]
        public System.Collections.Generic.List<ExternalMaster> ExternalMasters { get; set; }
        
        /// <value>
        /// External secondary servers for the zone.
        /// This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "externalDownstreams")]
        public System.Collections.Generic.List<ExternalDownstream> ExternalDownstreams { get; set; }
        
        /// <value>
        /// The state of DNSSEC on the zone.
        /// <br/>
        /// For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent
        /// trust anchor) must also have DNSSEC correctly set up.
        /// After enabling DNSSEC, you must add a DS record to the zone's parent zone containing the
        /// `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`.
        /// Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
        /// <br/>
        /// New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`'s expiration.
        /// To rollover a `KskDnssecKeyVersion`, you must replace the parent zone's DS record containing the old
        /// `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
        /// <br/>
        /// To remove the old DS record without causing service disruption, wait until the old DS record's TTL has
        /// expired, and the new DS record has propagated. After the DS replacement has been completed, then the
        /// `PromoteZoneDnssecKeyVersion` operation must be called.
        /// <br/>
        /// Metrics are emitted in the `oci_dns` namespace daily for each `KskDnssecKeyVersion` indicating how many
        /// days are left until expiration.
        /// We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the
        /// necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
        /// <br/>
        /// Enabling DNSSEC results in additional records in DNS responses which increases their size and can
        /// cause higher response latency.
        /// <br/>
        /// For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "dnssecState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ZoneDnssecState> DnssecState { get; set; }
        
        [JsonProperty(PropertyName = "migrationSource")]
        private readonly string migrationSource = "NONE";
    }
}
