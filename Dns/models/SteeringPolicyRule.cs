/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DnsService.Models
{
    /// <summary>
    /// The configuration of the sorting and filtering behaviors in a steering policy. Rules can
    /// filter and sort answers based on weight, priority, endpoint health, and other data.
    /// <br/>
    /// 
    /// A rule may optionally include a sequence of cases, each with an optional `caseCondition`
    /// expression. Cases allow a sequence of conditions to be defined that will apply different
    /// parameters to the rule when the conditions are met. For more information about cases,
    /// see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
    /// <br/>
    /// 
    /// **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
    /// 
    /// </summary>
    [JsonConverter(typeof(SteeringPolicyRuleModelConverter))]
    public class SteeringPolicyRule 
    {
        
        /// <value>
        /// A user-defined description of the rule's purpose or behavior.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
                ///
        /// <value>
        /// The type of a rule determines its sorting/filtering behavior.
        /// * `FILTER` - Filters the list of answers based on their defined boolean data. Answers remain
        ///   only if their `shouldKeep` value is `true`.
        /// <br/>
        /// 
        /// * `HEALTH` - Removes answers from the list if their `rdata` matches a target in the
        ///   health check monitor referenced by the steering policy and the target is reported down.
        /// <br/>
        /// 
        /// * `WEIGHTED` - Uses a number between 0 and 255 to determine how often an answer will be served
        ///   in relation to other answers. Anwers with a higher weight will be served more frequently.
        /// <br/>
        /// 
        /// * `PRIORITY` - Uses a defined rank value of answers to determine which answer to serve,
        ///   moving those with the lowest values to the beginning of the list without changing the
        ///   relative order of those with the same value. Answers can be given a value between `0` and `255`.
        /// <br/>
        /// 
        /// * `LIMIT` - Filters answers that are too far down the list. Parameter `defaultCount`
        ///   specifies how many answers to keep. **Example: ** If defaultCount has a value of 2 and  there are five answers left, when the LIMIT rule is processed, only the first two answers  will remain in the list.
        /// </value>
        ///
        public enum RuleTypeEnum {
            [EnumMember(Value = "FILTER")]
            Filter,
            [EnumMember(Value = "HEALTH")]
            Health,
            [EnumMember(Value = "WEIGHTED")]
            Weighted,
            [EnumMember(Value = "PRIORITY")]
            Priority,
            [EnumMember(Value = "LIMIT")]
            Limit
        };

        
    }

    public class SteeringPolicyRuleModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(SteeringPolicyRule);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(SteeringPolicyRule);
            var discriminator = jsonObject["ruleType"].Value<string>();
            switch (discriminator)
            {
                case "FILTER":
                    obj = new SteeringPolicyFilterRule();
                    break;
                case "WEIGHTED":
                    obj = new SteeringPolicyWeightedRule();
                    break;
                case "LIMIT":
                    obj = new SteeringPolicyLimitRule();
                    break;
                case "HEALTH":
                    obj = new SteeringPolicyHealthRule();
                    break;
                case "PRIORITY":
                    obj = new SteeringPolicyPriorityRule();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
