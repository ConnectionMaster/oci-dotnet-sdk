/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.DnsService.Models;
using Oci.DnsService.Requests;
using Oci.DnsService.Responses;

namespace Oci.DnsService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Dns.
    /// </summary>
    public class DnsWaiters
    {
        private readonly DnsClient client;
        private readonly Oci.WorkrequestsService.WorkRequestClient workRequestClient;

        public  DnsWaiters(DnsClient client, Oci.WorkrequestsService.WorkRequestClient workRequestClient)
        {
            this.client = client;
            this.workRequestClient = workRequestClient;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeResolverCompartmentRequest, ChangeResolverCompartmentResponse> ForChangeResolverCompartment(ChangeResolverCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeResolverCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeResolverCompartmentRequest, ChangeResolverCompartmentResponse> ForChangeResolverCompartment(ChangeResolverCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeResolverCompartmentRequest, ChangeResolverCompartmentResponse>(() =>
            {
                var response = client.ChangeResolverCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSteeringPolicyCompartmentRequest, ChangeSteeringPolicyCompartmentResponse> ForChangeSteeringPolicyCompartment(ChangeSteeringPolicyCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeSteeringPolicyCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSteeringPolicyCompartmentRequest, ChangeSteeringPolicyCompartmentResponse> ForChangeSteeringPolicyCompartment(ChangeSteeringPolicyCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeSteeringPolicyCompartmentRequest, ChangeSteeringPolicyCompartmentResponse>(() =>
            {
                var response = client.ChangeSteeringPolicyCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeViewCompartmentRequest, ChangeViewCompartmentResponse> ForChangeViewCompartment(ChangeViewCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeViewCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeViewCompartmentRequest, ChangeViewCompartmentResponse> ForChangeViewCompartment(ChangeViewCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeViewCompartmentRequest, ChangeViewCompartmentResponse>(() =>
            {
                var response = client.ChangeViewCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeZoneCompartmentRequest, ChangeZoneCompartmentResponse> ForChangeZoneCompartment(ChangeZoneCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeZoneCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeZoneCompartmentRequest, ChangeZoneCompartmentResponse> ForChangeZoneCompartment(ChangeZoneCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeZoneCompartmentRequest, ChangeZoneCompartmentResponse>(() =>
            {
                var response = client.ChangeZoneCompartment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateResolverEndpointRequest, CreateResolverEndpointResponse> ForCreateResolverEndpoint(CreateResolverEndpointRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateResolverEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateResolverEndpointRequest, CreateResolverEndpointResponse> ForCreateResolverEndpoint(CreateResolverEndpointRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateResolverEndpointRequest, CreateResolverEndpointResponse>(() =>
            {
                var response = client.CreateResolverEndpoint(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSteeringPolicyRequest, CreateSteeringPolicyResponse> ForCreateSteeringPolicy(CreateSteeringPolicyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateSteeringPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSteeringPolicyRequest, CreateSteeringPolicyResponse> ForCreateSteeringPolicy(CreateSteeringPolicyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateSteeringPolicyRequest, CreateSteeringPolicyResponse>(() =>
            {
                var response = client.CreateSteeringPolicy(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSteeringPolicyAttachmentRequest, CreateSteeringPolicyAttachmentResponse> ForCreateSteeringPolicyAttachment(CreateSteeringPolicyAttachmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateSteeringPolicyAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateSteeringPolicyAttachmentRequest, CreateSteeringPolicyAttachmentResponse> ForCreateSteeringPolicyAttachment(CreateSteeringPolicyAttachmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateSteeringPolicyAttachmentRequest, CreateSteeringPolicyAttachmentResponse>(() =>
            {
                var response = client.CreateSteeringPolicyAttachment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateTsigKeyRequest, CreateTsigKeyResponse> ForCreateTsigKey(CreateTsigKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateTsigKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateTsigKeyRequest, CreateTsigKeyResponse> ForCreateTsigKey(CreateTsigKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateTsigKeyRequest, CreateTsigKeyResponse>(() =>
            {
                var response = client.CreateTsigKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateViewRequest, CreateViewResponse> ForCreateView(CreateViewRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateView(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateViewRequest, CreateViewResponse> ForCreateView(CreateViewRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateViewRequest, CreateViewResponse>(() =>
            {
                var response = client.CreateView(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateZoneRequest, CreateZoneResponse> ForCreateZone(CreateZoneRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateZone(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateZoneRequest, CreateZoneResponse> ForCreateZone(CreateZoneRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateZoneRequest, CreateZoneResponse>(() =>
            {
                var response = client.CreateZone(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateZoneFromZoneFileRequest, CreateZoneFromZoneFileResponse> ForCreateZoneFromZoneFile(CreateZoneFromZoneFileRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForCreateZoneFromZoneFile(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<CreateZoneFromZoneFileRequest, CreateZoneFromZoneFileResponse> ForCreateZoneFromZoneFile(CreateZoneFromZoneFileRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<CreateZoneFromZoneFileRequest, CreateZoneFromZoneFileResponse>(() =>
            {
                var response = client.CreateZoneFromZoneFile(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteResolverEndpointRequest, DeleteResolverEndpointResponse> ForDeleteResolverEndpoint(DeleteResolverEndpointRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteResolverEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteResolverEndpointRequest, DeleteResolverEndpointResponse> ForDeleteResolverEndpoint(DeleteResolverEndpointRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteResolverEndpointRequest, DeleteResolverEndpointResponse>(() =>
            {
                var response = client.DeleteResolverEndpoint(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSteeringPolicyRequest, DeleteSteeringPolicyResponse> ForDeleteSteeringPolicy(DeleteSteeringPolicyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteSteeringPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSteeringPolicyRequest, DeleteSteeringPolicyResponse> ForDeleteSteeringPolicy(DeleteSteeringPolicyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteSteeringPolicyRequest, DeleteSteeringPolicyResponse>(() =>
            {
                var response = client.DeleteSteeringPolicy(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSteeringPolicyAttachmentRequest, DeleteSteeringPolicyAttachmentResponse> ForDeleteSteeringPolicyAttachment(DeleteSteeringPolicyAttachmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteSteeringPolicyAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteSteeringPolicyAttachmentRequest, DeleteSteeringPolicyAttachmentResponse> ForDeleteSteeringPolicyAttachment(DeleteSteeringPolicyAttachmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteSteeringPolicyAttachmentRequest, DeleteSteeringPolicyAttachmentResponse>(() =>
            {
                var response = client.DeleteSteeringPolicyAttachment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteTsigKeyRequest, DeleteTsigKeyResponse> ForDeleteTsigKey(DeleteTsigKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteTsigKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteTsigKeyRequest, DeleteTsigKeyResponse> ForDeleteTsigKey(DeleteTsigKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteTsigKeyRequest, DeleteTsigKeyResponse>(() =>
            {
                var response = client.DeleteTsigKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteViewRequest, DeleteViewResponse> ForDeleteView(DeleteViewRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteView(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteViewRequest, DeleteViewResponse> ForDeleteView(DeleteViewRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteViewRequest, DeleteViewResponse>(() =>
            {
                var response = client.DeleteView(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteZoneRequest, DeleteZoneResponse> ForDeleteZone(DeleteZoneRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteZone(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteZoneRequest, DeleteZoneResponse> ForDeleteZone(DeleteZoneRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteZoneRequest, DeleteZoneResponse>(() =>
            {
                var response = client.DeleteZone(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResolverRequest, GetResolverResponse> ForResolver(GetResolverRequest request, params Resolver.LifecycleStateEnum[] targetStates)
        {
            return this.ForResolver(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResolverRequest, GetResolverResponse> ForResolver(GetResolverRequest request, WaiterConfiguration config, params Resolver.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetResolverRequest, GetResolverResponse>(
                request,
                request => client.GetResolver(request),
                response => targetStates.Contains(response.Resolver.LifecycleState.Value),
                targetStates.Contains(Resolver.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetResolverRequest, GetResolverResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResolverEndpointRequest, GetResolverEndpointResponse> ForResolverEndpoint(GetResolverEndpointRequest request, params ResolverEndpoint.LifecycleStateEnum[] targetStates)
        {
            return this.ForResolverEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetResolverEndpointRequest, GetResolverEndpointResponse> ForResolverEndpoint(GetResolverEndpointRequest request, WaiterConfiguration config, params ResolverEndpoint.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetResolverEndpointRequest, GetResolverEndpointResponse>(
                request,
                request => client.GetResolverEndpoint(request),
                response => targetStates.Contains(response.ResolverEndpoint.LifecycleState.Value),
                targetStates.Contains(ResolverEndpoint.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetResolverEndpointRequest, GetResolverEndpointResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSteeringPolicyRequest, GetSteeringPolicyResponse> ForSteeringPolicy(GetSteeringPolicyRequest request, params SteeringPolicy.LifecycleStateEnum[] targetStates)
        {
            return this.ForSteeringPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSteeringPolicyRequest, GetSteeringPolicyResponse> ForSteeringPolicy(GetSteeringPolicyRequest request, WaiterConfiguration config, params SteeringPolicy.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSteeringPolicyRequest, GetSteeringPolicyResponse>(
                request,
                request => client.GetSteeringPolicy(request),
                response => targetStates.Contains(response.SteeringPolicy.LifecycleState.Value),
                targetStates.Contains(SteeringPolicy.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetSteeringPolicyRequest, GetSteeringPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSteeringPolicyAttachmentRequest, GetSteeringPolicyAttachmentResponse> ForSteeringPolicyAttachment(GetSteeringPolicyAttachmentRequest request, params SteeringPolicyAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForSteeringPolicyAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSteeringPolicyAttachmentRequest, GetSteeringPolicyAttachmentResponse> ForSteeringPolicyAttachment(GetSteeringPolicyAttachmentRequest request, WaiterConfiguration config, params SteeringPolicyAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSteeringPolicyAttachmentRequest, GetSteeringPolicyAttachmentResponse>(
                request,
                request => client.GetSteeringPolicyAttachment(request),
                response => targetStates.Contains(response.SteeringPolicyAttachment.LifecycleState.Value)
            );
            return new Waiter<GetSteeringPolicyAttachmentRequest, GetSteeringPolicyAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTsigKeyRequest, GetTsigKeyResponse> ForTsigKey(GetTsigKeyRequest request, params TsigKey.LifecycleStateEnum[] targetStates)
        {
            return this.ForTsigKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTsigKeyRequest, GetTsigKeyResponse> ForTsigKey(GetTsigKeyRequest request, WaiterConfiguration config, params TsigKey.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetTsigKeyRequest, GetTsigKeyResponse>(
                request,
                request => client.GetTsigKey(request),
                response => targetStates.Contains(response.TsigKey.LifecycleState.Value),
                targetStates.Contains(TsigKey.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetTsigKeyRequest, GetTsigKeyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetViewRequest, GetViewResponse> ForView(GetViewRequest request, params View.LifecycleStateEnum[] targetStates)
        {
            return this.ForView(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetViewRequest, GetViewResponse> ForView(GetViewRequest request, WaiterConfiguration config, params View.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetViewRequest, GetViewResponse>(
                request,
                request => client.GetView(request),
                response => targetStates.Contains(response.View.LifecycleState.Value),
                targetStates.Contains(View.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetViewRequest, GetViewResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetZoneRequest, GetZoneResponse> ForZone(GetZoneRequest request, params Zone.LifecycleStateEnum[] targetStates)
        {
            return this.ForZone(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetZoneRequest, GetZoneResponse> ForZone(GetZoneRequest request, WaiterConfiguration config, params Zone.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetZoneRequest, GetZoneResponse>(
                request,
                request => client.GetZone(request),
                response => targetStates.Contains(response.Zone.LifecycleState.Value),
                targetStates.Contains(Zone.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetZoneRequest, GetZoneResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<PromoteZoneDnssecKeyVersionRequest, PromoteZoneDnssecKeyVersionResponse> ForPromoteZoneDnssecKeyVersion(PromoteZoneDnssecKeyVersionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForPromoteZoneDnssecKeyVersion(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<PromoteZoneDnssecKeyVersionRequest, PromoteZoneDnssecKeyVersionResponse> ForPromoteZoneDnssecKeyVersion(PromoteZoneDnssecKeyVersionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<PromoteZoneDnssecKeyVersionRequest, PromoteZoneDnssecKeyVersionResponse>(() =>
            {
                var response = client.PromoteZoneDnssecKeyVersion(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StageZoneDnssecKeyVersionRequest, StageZoneDnssecKeyVersionResponse> ForStageZoneDnssecKeyVersion(StageZoneDnssecKeyVersionRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForStageZoneDnssecKeyVersion(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<StageZoneDnssecKeyVersionRequest, StageZoneDnssecKeyVersionResponse> ForStageZoneDnssecKeyVersion(StageZoneDnssecKeyVersionRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<StageZoneDnssecKeyVersionRequest, StageZoneDnssecKeyVersionResponse>(() =>
            {
                var response = client.StageZoneDnssecKeyVersion(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateResolverRequest, UpdateResolverResponse> ForUpdateResolver(UpdateResolverRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateResolver(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateResolverRequest, UpdateResolverResponse> ForUpdateResolver(UpdateResolverRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateResolverRequest, UpdateResolverResponse>(() =>
            {
                var response = client.UpdateResolver(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateResolverEndpointRequest, UpdateResolverEndpointResponse> ForUpdateResolverEndpoint(UpdateResolverEndpointRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateResolverEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateResolverEndpointRequest, UpdateResolverEndpointResponse> ForUpdateResolverEndpoint(UpdateResolverEndpointRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateResolverEndpointRequest, UpdateResolverEndpointResponse>(() =>
            {
                var response = client.UpdateResolverEndpoint(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSteeringPolicyRequest, UpdateSteeringPolicyResponse> ForUpdateSteeringPolicy(UpdateSteeringPolicyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateSteeringPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSteeringPolicyRequest, UpdateSteeringPolicyResponse> ForUpdateSteeringPolicy(UpdateSteeringPolicyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateSteeringPolicyRequest, UpdateSteeringPolicyResponse>(() =>
            {
                var response = client.UpdateSteeringPolicy(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSteeringPolicyAttachmentRequest, UpdateSteeringPolicyAttachmentResponse> ForUpdateSteeringPolicyAttachment(UpdateSteeringPolicyAttachmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateSteeringPolicyAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateSteeringPolicyAttachmentRequest, UpdateSteeringPolicyAttachmentResponse> ForUpdateSteeringPolicyAttachment(UpdateSteeringPolicyAttachmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateSteeringPolicyAttachmentRequest, UpdateSteeringPolicyAttachmentResponse>(() =>
            {
                var response = client.UpdateSteeringPolicyAttachment(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateTsigKeyRequest, UpdateTsigKeyResponse> ForUpdateTsigKey(UpdateTsigKeyRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateTsigKey(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateTsigKeyRequest, UpdateTsigKeyResponse> ForUpdateTsigKey(UpdateTsigKeyRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateTsigKeyRequest, UpdateTsigKeyResponse>(() =>
            {
                var response = client.UpdateTsigKey(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateViewRequest, UpdateViewResponse> ForUpdateView(UpdateViewRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateView(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateViewRequest, UpdateViewResponse> ForUpdateView(UpdateViewRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateViewRequest, UpdateViewResponse>(() =>
            {
                var response = client.UpdateView(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateZoneRequest, UpdateZoneResponse> ForUpdateZone(UpdateZoneRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForUpdateZone(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<UpdateZoneRequest, UpdateZoneResponse> ForUpdateZone(UpdateZoneRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<UpdateZoneRequest, UpdateZoneResponse>(() =>
            {
                var response = client.UpdateZone(request).Result;
                if (response.OpcWorkRequestId == null)
                {
                    return response;
                }
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
    }
}
