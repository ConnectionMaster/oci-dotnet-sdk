/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiinferenceService.Models
{
    /// <summary>
    /// Details required for a rerank request.
    /// </summary>
    public class RerankTextDetails 
    {
        
        /// <value>
        /// Input query for search in the documents.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Input is required.")]
        [JsonProperty(PropertyName = "input")]
        public string Input { get; set; }
        
        /// <value>
        /// The OCID of the compartment to call into the Generative AI service LLMs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServingMode is required.")]
        [JsonProperty(PropertyName = "servingMode")]
        public ServingMode ServingMode { get; set; }
        
        /// <value>
        /// A list of document strings to rerank based on the query asked.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Documents is required.")]
        [JsonProperty(PropertyName = "documents")]
        public System.Collections.Generic.List<string> Documents { get; set; }
        
        /// <value>
        /// The number of most relevant documents or indices to return. Defaults to the length of the documents.
        /// </value>
        [JsonProperty(PropertyName = "topN")]
        public System.Nullable<int> TopN { get; set; }
        
        /// <value>
        /// Whether or not to return the documents in the response.
        /// </value>
        [JsonProperty(PropertyName = "isEcho")]
        public System.Nullable<bool> IsEcho { get; set; }
        
        /// <value>
        /// The maximum number of chunks to produce internally from a document.
        /// </value>
        [JsonProperty(PropertyName = "maxChunksPerDocument")]
        public System.Nullable<int> MaxChunksPerDocument { get; set; }
        
    }
}
