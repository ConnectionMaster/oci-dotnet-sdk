/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiinferenceService.Models
{
    /// <summary>
    /// Details for the request to summarize text.
    /// </summary>
    public class SummarizeTextDetails 
    {
        
        /// <value>
        /// The input string to be summarized.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Input is required.")]
        [JsonProperty(PropertyName = "input")]
        public string Input { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServingMode is required.")]
        [JsonProperty(PropertyName = "servingMode")]
        public ServingMode ServingMode { get; set; }
        
        /// <value>
        /// The OCID of compartment in which to call the Generative AI service to summarize text.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Whether or not to include the original inputs in the response.
        /// </value>
        [JsonProperty(PropertyName = "isEcho")]
        public System.Nullable<bool> IsEcho { get; set; }
        
        /// <value>
        /// A number that sets the randomness of the generated output. Lower temperatures mean less random generations.
        /// <br/>
        /// Use lower numbers for tasks with a correct answer such as question answering or summarizing. High temperatures can generate hallucinations or factually incorrect information. Start with temperatures lower than 1.0, and increase the temperature for more creative outputs, as you regenerate the prompts to refine the outputs.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "temperature")]
        public System.Double Temperature { get; set; }
        
        /// <value>
        /// A free-form instruction for modifying how the summaries get generated. Should complete the sentence \"Generate a summary _\". For example, \"focusing on the next steps\" or \"written by Yoda\".
        /// </value>
        [JsonProperty(PropertyName = "additionalCommand")]
        public string AdditionalCommand { get; set; }
                ///
        /// <value>
        /// Indicates the approximate length of the summary. If \"AUTO\" is selected, the best option will be picked based on the input text.
        /// </value>
        ///
        public enum LengthEnum {
            [EnumMember(Value = "SHORT")]
            Short,
            [EnumMember(Value = "MEDIUM")]
            Medium,
            [EnumMember(Value = "LONG")]
            Long,
            [EnumMember(Value = "AUTO")]
            Auto
        };

        /// <value>
        /// Indicates the approximate length of the summary. If \"AUTO\" is selected, the best option will be picked based on the input text.
        /// </value>
        [JsonProperty(PropertyName = "length")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LengthEnum> Length { get; set; }
                ///
        /// <value>
        /// Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If \"AUTO\" is selected, the best option will be picked based on the input text.
        /// </value>
        ///
        public enum FormatEnum {
            [EnumMember(Value = "PARAGRAPH")]
            Paragraph,
            [EnumMember(Value = "BULLETS")]
            Bullets,
            [EnumMember(Value = "AUTO")]
            Auto
        };

        /// <value>
        /// Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If \"AUTO\" is selected, the best option will be picked based on the input text.
        /// </value>
        [JsonProperty(PropertyName = "format")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<FormatEnum> Format { get; set; }
                ///
        /// <value>
        /// Controls how close to the original text the summary is. High extractiveness summaries will lean towards reusing sentences verbatim, while low extractiveness summaries will tend to paraphrase more.
        /// </value>
        ///
        public enum ExtractivenessEnum {
            [EnumMember(Value = "LOW")]
            Low,
            [EnumMember(Value = "MEDIUM")]
            Medium,
            [EnumMember(Value = "HIGH")]
            High,
            [EnumMember(Value = "AUTO")]
            Auto
        };

        /// <value>
        /// Controls how close to the original text the summary is. High extractiveness summaries will lean towards reusing sentences verbatim, while low extractiveness summaries will tend to paraphrase more.
        /// </value>
        [JsonProperty(PropertyName = "extractiveness")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ExtractivenessEnum> Extractiveness { get; set; }
        
    }
}
