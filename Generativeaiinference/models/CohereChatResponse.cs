/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiinferenceService.Models
{
    /// <summary>
    /// The response to the chat conversation.
    /// </summary>
    public class CohereChatResponse : BaseChatResponse
    {
        
        /// <value>
        /// Contents of the response that the model generates.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Text is required.")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }
        
        /// <value>
        /// The list of previous messages between the user and the model. The chat history gives the model context for responding to the user's inputs.
        /// </value>
        [JsonProperty(PropertyName = "chatHistory")]
        public System.Collections.Generic.List<CohereMessage> ChatHistory { get; set; }
        
        /// <value>
        /// Inline citations for the generated response.
        /// </value>
        [JsonProperty(PropertyName = "citations")]
        public System.Collections.Generic.List<Citation> Citations { get; set; }
        
        /// <value>
        /// If set to true, a search for documents is required.
        /// </value>
        [JsonProperty(PropertyName = "isSearchRequired")]
        public System.Nullable<bool> IsSearchRequired { get; set; }
                ///
        /// <value>
        /// Why the generation stopped.
        /// </value>
        ///
        public enum FinishReasonEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "COMPLETE")]
            Complete,
            [EnumMember(Value = "ERROR_TOXIC")]
            ErrorToxic,
            [EnumMember(Value = "ERROR_LIMIT")]
            ErrorLimit,
            [EnumMember(Value = "ERROR")]
            Error,
            [EnumMember(Value = "USER_CANCEL")]
            UserCancel,
            [EnumMember(Value = "MAX_TOKENS")]
            MaxTokens
        };

        /// <value>
        /// Why the generation stopped.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FinishReason is required.")]
        [JsonProperty(PropertyName = "finishReason")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<FinishReasonEnum> FinishReason { get; set; }
        
        /// <value>
        /// If there is an error during the streaming scenario, then the `errorMessage` parameter contains details for the error.
        /// </value>
        [JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage { get; set; }
        
        /// <value>
        /// The generated search queries.
        /// </value>
        [JsonProperty(PropertyName = "searchQueries")]
        public System.Collections.Generic.List<SearchQuery> SearchQueries { get; set; }
        
        /// <value>
        /// The documents that the model can refer to when generating a response. Each document is a JSON string that represents the field and values of the document.
        /// <br/>
        /// Example: '[  {    &quot;id&quot;: &quot;doc_0&quot;,    &quot;snippet&quot;: &quot;Emperor penguins are the tallest.&quot;,    &quot;title&quot;: &quot;Tall penguins&quot;  },  {    &quot;id&quot;: &quot;doc_1&quot;,    &quot;snippet&quot;: &quot;Emperor penguins only live in Antarctica.&quot;,    &quot;title&quot;: &quot;Penguin habitats&quot;  }]'
        /// </value>
        [JsonProperty(PropertyName = "documents")]
        public System.Collections.Generic.List<System.Object> Documents { get; set; }
        
        /// <value>
        /// A list of tool calls generated by the model.
        /// </value>
        [JsonProperty(PropertyName = "toolCalls")]
        public System.Collections.Generic.List<CohereToolCall> ToolCalls { get; set; }
        
        /// <value>
        /// The full prompt that was sent to the model if isEcho is true when request.
        /// </value>
        [JsonProperty(PropertyName = "prompt")]
        public string Prompt { get; set; }
        
        [JsonProperty(PropertyName = "apiFormat")]
        private readonly string apiFormat = "COHERE";
    }
}
