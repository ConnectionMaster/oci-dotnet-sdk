/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.GenerativeaiinferenceService.Models
{
    /// <summary>
    /// Details for the request to embed texts.
    /// </summary>
    public class EmbedTextDetails 
    {
        
        /// <value>
        /// Provide a list of strings. Each string can be words, a phrase, or a paragraph. The maximum length of each string entry in the list is 512 tokens.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Inputs is required.")]
        [JsonProperty(PropertyName = "inputs")]
        public System.Collections.Generic.List<string> Inputs { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServingMode is required.")]
        [JsonProperty(PropertyName = "servingMode")]
        public ServingMode ServingMode { get; set; }
        
        /// <value>
        /// The OCID of compartment in which to call the Generative AI service to create text embeddings.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Whether or not to include the original inputs in the response. Results are index-based.
        /// </value>
        [JsonProperty(PropertyName = "isEcho")]
        public System.Nullable<bool> IsEcho { get; set; }
                ///
        /// <value>
        /// For an input that's longer than the maximum token length, specifies which part of the input text will be truncated.
        /// </value>
        ///
        public enum TruncateEnum {
            [EnumMember(Value = "NONE")]
            None,
            [EnumMember(Value = "START")]
            Start,
            [EnumMember(Value = "END")]
            End
        };

        /// <value>
        /// For an input that's longer than the maximum token length, specifies which part of the input text will be truncated.
        /// </value>
        [JsonProperty(PropertyName = "truncate")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<TruncateEnum> Truncate { get; set; }
                ///
        /// <value>
        /// Specifies the input type.
        /// </value>
        ///
        public enum InputTypeEnum {
            [EnumMember(Value = "SEARCH_DOCUMENT")]
            SearchDocument,
            [EnumMember(Value = "SEARCH_QUERY")]
            SearchQuery,
            [EnumMember(Value = "CLASSIFICATION")]
            Classification,
            [EnumMember(Value = "CLUSTERING")]
            Clustering
        };

        /// <value>
        /// Specifies the input type.
        /// </value>
        [JsonProperty(PropertyName = "inputType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<InputTypeEnum> InputType { get; set; }
        
    }
}
