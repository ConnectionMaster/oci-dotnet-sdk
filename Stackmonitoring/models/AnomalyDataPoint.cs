/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.StackmonitoringService.Models
{
    /// <summary>
    /// anomaly evaluation result fo the data point
    /// </summary>
    public class AnomalyDataPoint 
    {
        
        /// <value>
        /// if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Anomaly is required.")]
        [JsonProperty(PropertyName = "anomaly")]
        public System.Double Anomaly { get; set; }
        
        /// <value>
        /// lower threshold for the metric value
        /// </value>
        [JsonProperty(PropertyName = "low")]
        public System.Double Low { get; set; }
        
        /// <value>
        /// upper threshold for the metric value
        /// </value>
        [JsonProperty(PropertyName = "high")]
        public System.Double High { get; set; }
        
        /// <value>
        /// timestamp of when the metric was collected
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Timestamp is required.")]
        [JsonProperty(PropertyName = "timestamp")]
        public System.Nullable<System.DateTime> Timestamp { get; set; }
        
        /// <value>
        /// value for the metric data point
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Value is required.")]
        [JsonProperty(PropertyName = "value")]
        public System.Double Value { get; set; }
        
    }
}
