/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.StackmonitoringService.Models
{
    /// <summary>
    /// The information required to search monitored resource associations.
    /// </summary>
    public class SearchMonitoredResourceAssociationsDetails 
    {
        
        /// <value>
        /// Compartment Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Source Monitored Resource Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId { get; set; }
        
        /// <value>
        /// Source Monitored Resource Name.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sourceResourceName")]
        public string SourceResourceName { get; set; }
        
        /// <value>
        /// Source Monitored Resource Type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sourceResourceType")]
        public string SourceResourceType { get; set; }
        
        /// <value>
        /// Destination Monitored Resource Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "destinationResourceId")]
        public string DestinationResourceId { get; set; }
        
        /// <value>
        /// Source Monitored Resource Name.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "destinationResourceName")]
        public string DestinationResourceName { get; set; }
        
        /// <value>
        /// Source Monitored Resource Type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "destinationResourceType")]
        public string DestinationResourceType { get; set; }
        
        /// <value>
        /// Association type filter to search associated resources.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "associationType")]
        public string AssociationType { get; set; }
                ///
        /// <value>
        /// The field to sort by. Only one sort order may be provided.
        /// Default order for timeCreated is descending. Default order for assocType is descending.
        /// 
        /// </value>
        ///
        public enum SortByEnum {
            [EnumMember(Value = "TIME_CREATED")]
            TimeCreated,
            [EnumMember(Value = "ASSOC_TYPE")]
            AssocType
        };

        /// <value>
        /// The field to sort by. Only one sort order may be provided.
        /// Default order for timeCreated is descending. Default order for assocType is descending.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sortBy")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<SortByEnum> SortBy { get; set; }
        
        /// <value>
        /// The sort order to use, either 'ASC' or 'DESC'.
        /// </value>
        [JsonProperty(PropertyName = "sortOrder")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<SortOrder> SortOrder { get; set; }
        
    }
}
