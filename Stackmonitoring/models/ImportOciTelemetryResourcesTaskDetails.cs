/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.StackmonitoringService.Models
{
    /// <summary>
    /// Request details for importing resources from Telemetry like resources from OCI Native Services and prometheus.
    /// 
    /// </summary>
    public class ImportOciTelemetryResourcesTaskDetails : MonitoredResourceTaskDetails
    {
                ///
        /// <value>
        /// Source from where the metrics pushed to telemetry.
        /// Possible values:
        ///   * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from OCI Native Services.
        ///   * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
        ///   * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
        ///   * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
        /// 
        /// </value>
        ///
        public enum SourceEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "OCI_TELEMETRY_NATIVE")]
            OciTelemetryNative,
            [EnumMember(Value = "OCI_TELEMETRY_PROMETHEUS")]
            OciTelemetryPrometheus,
            [EnumMember(Value = "OCI_TELEMETRY_TELEGRAF")]
            OciTelemetryTelegraf,
            [EnumMember(Value = "OCI_TELEMETRY_COLLECTD")]
            OciTelemetryCollectd
        };

        /// <value>
        /// Source from where the metrics pushed to telemetry.
        /// Possible values:
        ///   * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from OCI Native Services.
        ///   * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
        ///   * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
        ///   * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Source is required.")]
        [JsonProperty(PropertyName = "source")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<SourceEnum> Source { get; set; }
        
        /// <value>
        /// Name space to be used for OCI Native service resources discovery.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Namespace is required.")]
        [JsonProperty(PropertyName = "namespace")]
        public string Namespace { get; set; }
        
        /// <value>
        /// The resource group to use while fetching metrics from telemetry.
        /// If not specified, resource group will be skipped in the list metrics request.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup { get; set; }
        
        /// <value>
        /// Flag to indicate whether status is calculated using metrics or 
        /// LifeCycleState attribute of the resource in OCI service.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "shouldUseMetricsFlowForStatus")]
        public System.Nullable<bool> ShouldUseMetricsFlowForStatus { get; set; }
        
        /// <value>
        /// The base URL of the OCI service to which the resource belongs to.
        /// Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "serviceBaseUrl")]
        public string ServiceBaseUrl { get; set; }
        
        /// <value>
        /// The console path prefix to use for providing service home url page navigation. 
        /// For example if the prefix provided is 'security/bastion/bastions', the URL used for navigation will be
        /// https://<cloudhostname>/security/bastion/bastions/<resourceOcid>. If not provided, service home page link 
        /// will not be shown in the stack monitoring home page.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "consolePathPrefix")]
        public string ConsolePathPrefix { get; set; }
        
        /// <value>
        /// Lifecycle states of the external resource which reflects the status of the resource being up.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "lifecycleStatusMappingsForUpStatus")]
        public System.Collections.Generic.List<string> LifecycleStatusMappingsForUpStatus { get; set; }
        
        /// <value>
        /// The resource name property in the metric dimensions. 
        /// Resources imported will be using this property value for resource name.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resourceNameMapping")]
        public string ResourceNameMapping { get; set; }
        
        /// <value>
        /// The external resource identifier property in the metric dimensions. 
        /// Resources imported will be using this property value for external id.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "externalIdMapping")]
        public string ExternalIdMapping { get; set; }
        
        /// <value>
        /// The resource type property in the metric dimensions. 
        /// Resources imported will be using this property value for resource type.
        /// If not specified, namespace will be used for resource type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resourceTypeMapping")]
        public string ResourceTypeMapping { get; set; }
        
        /// <value>
        /// The resource name filter. Resources matching with the resource name filter will be imported.
        /// Regular expressions will be accepted.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resourceNameFilter")]
        public string ResourceNameFilter { get; set; }
        
        /// <value>
        /// The resource type filter. Resources matching with the resource type filter will be imported.
        /// Regular expressions will be accepted.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "resourceTypeFilter")]
        public string ResourceTypeFilter { get; set; }
        
        /// <value>
        /// List of metrics to be used to calculate the availability of the resource.
        /// Resource is considered to be up if at least one of the specified metrics is available for 
        /// the resource during the specified interval using the property 
        /// 'availabilityProxyMetricCollectionInterval'.
        /// If no metrics are specified, availability will not be calculated for the resource.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "availabilityProxyMetrics")]
        public System.Collections.Generic.List<string> AvailabilityProxyMetrics { get; set; }
        
        /// <value>
        /// Metrics collection interval in seconds used when calculating the availability of the 
        /// resource based on metrics specified using the property 'availabilityProxyMetrics'.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "availabilityProxyMetricCollectionInterval")]
        public System.Nullable<int> AvailabilityProxyMetricCollectionInterval { get; set; }
        
        [JsonProperty(PropertyName = "type")]
        private readonly string type = "IMPORT_OCI_TELEMETRY_RESOURCES";
    }
}
