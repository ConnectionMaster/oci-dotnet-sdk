/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.StackmonitoringService.Models
{
    /// <summary>
    /// Monitored Resource Credential Details.
    /// 
    /// </summary>
    [JsonConverter(typeof(MonitoredResourceCredentialModelConverter))]
    public class MonitoredResourceCredential 
    {
        
        /// <value>
        /// The source type and source name combination, delimited with (.) separator.
        /// {source type}.{source name} and source type max char limit is 63.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }
        
        /// <value>
        /// The name of the credential, within the context of the source.
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The type of the credential ( ex. JMXCreds,DBCreds).
        /// </value>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }
        
        /// <value>
        /// The user-specified textual description of the credential.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
                ///
        /// <value>
        /// Type of credentials specified in the credentials element.
        /// Three possible values - EXISTING, PLAINTEXT and ENCRYPTED.
        /// * EXISTING  - Credential is already stored in agent and only credential name need
        ///         to be passed for existing credential.
        /// * PLAINTEXT - The credential properties will have credentials in plain text format.
        /// * ENCRYPTED - The credential properties will have credentials stored in vault in
        ///         encrypted format using KMS client which uses master key for encryption.
        ///         The same master key will be used to decrypt the credentials before passing
        ///         on to the management agent.
        /// 
        /// </value>
        ///
        public enum CredentialTypeEnum {
            [EnumMember(Value = "EXISTING")]
            Existing,
            [EnumMember(Value = "PLAINTEXT")]
            Plaintext,
            [EnumMember(Value = "ENCRYPTED")]
            Encrypted
        };

        
    }

    public class MonitoredResourceCredentialModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(MonitoredResourceCredential);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(MonitoredResourceCredential);
            var discriminator = jsonObject["credentialType"].Value<string>();
            switch (discriminator)
            {
                case "EXISTING":
                    obj = new PreExistingCredentials();
                    break;
                case "ENCRYPTED":
                    obj = new EncryptedCredentials();
                    break;
                case "PLAINTEXT":
                    obj = new PlainTextCredentials();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under MonitoredResourceCredential! Returning null value.");
            }
            return obj;
        }
    }
}
