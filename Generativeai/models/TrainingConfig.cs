/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.GenerativeaiService.Models
{
    /// <summary>
    /// The fine-tuning method and hyperparameters used for fine-tuning a custom model.
    /// </summary>
    [JsonConverter(typeof(TrainingConfigModelConverter))]
    public class TrainingConfig 
    {
                ///
        /// <value>
        /// The fine-tuning method for training a custom model.
        /// </value>
        ///
        public enum TrainingConfigTypeEnum {
            [EnumMember(Value = "TFEW_TRAINING_CONFIG")]
            TfewTrainingConfig,
            [EnumMember(Value = "VANILLA_TRAINING_CONFIG")]
            VanillaTrainingConfig,
            [EnumMember(Value = "LORA_TRAINING_CONFIG")]
            LoraTrainingConfig
        };

        
        /// <value>
        /// The maximum number of training epochs to run for.
        /// </value>
        [JsonProperty(PropertyName = "totalTrainingEpochs")]
        public System.Nullable<int> TotalTrainingEpochs { get; set; }
        
        /// <value>
        /// The initial learning rate to be used during training
        /// </value>
        [JsonProperty(PropertyName = "learningRate")]
        public System.Double LearningRate { get; set; }
        
        /// <value>
        /// The batch size used during training.
        /// </value>
        [JsonProperty(PropertyName = "trainingBatchSize")]
        public System.Nullable<int> TrainingBatchSize { get; set; }
        
        /// <value>
        /// Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "earlyStoppingPatience")]
        public System.Nullable<int> EarlyStoppingPatience { get; set; }
        
        /// <value>
        /// How much the loss must improve to prevent early stopping.
        /// </value>
        [JsonProperty(PropertyName = "earlyStoppingThreshold")]
        public System.Double EarlyStoppingThreshold { get; set; }
        
        /// <value>
        /// Determines how frequently to log model metrics. 
        /// <br/>
        /// Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "logModelMetricsIntervalInSteps")]
        public System.Nullable<int> LogModelMetricsIntervalInSteps { get; set; }
        
    }

    public class TrainingConfigModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(TrainingConfig);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(TrainingConfig);
            var discriminator = jsonObject["trainingConfigType"].Value<string>();
            switch (discriminator)
            {
                case "LORA_TRAINING_CONFIG":
                    obj = new LoraTrainingConfig();
                    break;
                case "VANILLA_TRAINING_CONFIG":
                    obj = new VanillaTrainingConfig();
                    break;
                case "TFEW_TRAINING_CONFIG":
                    obj = new TFewTrainingConfig();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under TrainingConfig! Returning null value.");
            }
            return obj;
        }
    }
}
