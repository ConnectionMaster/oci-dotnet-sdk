/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ContainerengineService.Models
{
    /// <summary>
    /// The properties that configure OIDC token authentication in kube-apiserver.
    /// For more information, see [Configuring the API Server](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#using-flags).
    /// 
    /// </summary>
    public class OpenIdConnectTokenAuthenticationConfig 
    {
        
        /// <value>
        /// URL of the provider that allows the API server to discover public signing keys. 
        /// Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL, 
        /// changed to have an empty path.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "issuerUrl")]
        public string IssuerUrl { get; set; }
        
        /// <value>
        /// A client id that all tokens must be issued for.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }
        
        /// <value>
        /// JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end 
        /// user. Admins can choose other claims, such as email or name, depending on their provider. However, claims 
        /// other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "usernameClaim")]
        public string UsernameClaim { get; set; }
        
        /// <value>
        /// Prefix prepended to username claims to prevent clashes with existing names (such as system:users). 
        /// For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and 
        /// --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where 
        /// ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "usernamePrefix")]
        public string UsernamePrefix { get; set; }
        
        /// <value>
        /// JWT claim to use as the user's group. If the claim is present it must be an array of strings.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "groupsClaim")]
        public string GroupsClaim { get; set; }
        
        /// <value>
        /// Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "groupsPrefix")]
        public string GroupsPrefix { get; set; }
        
        /// <value>
        /// A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present 
        /// in the ID Token with a matching value. Repeat this flag to specify multiple claims.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "requiredClaims")]
        public System.Collections.Generic.List<KeyValue> RequiredClaims { get; set; }
        
        /// <value>
        /// A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider's web certificate.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "caCertificate")]
        public string CaCertificate { get; set; }
        
        /// <value>
        /// The signing algorithms accepted. Default is [\"RS256\"].
        /// 
        /// </value>
        [JsonProperty(PropertyName = "signingAlgorithms")]
        public System.Collections.Generic.List<string> SigningAlgorithms { get; set; }
        
        /// <value>
        /// Whether the cluster has OIDC Auth Config enabled. Defaults to false.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsOpenIdConnectAuthEnabled is required.")]
        [JsonProperty(PropertyName = "isOpenIdConnectAuthEnabled")]
        public System.Nullable<bool> IsOpenIdConnectAuthEnabled { get; set; }
        
    }
}
