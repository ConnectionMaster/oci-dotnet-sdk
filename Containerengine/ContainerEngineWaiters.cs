/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.ContainerengineService.Models;
using Oci.ContainerengineService.Requests;
using Oci.ContainerengineService.Responses;

namespace Oci.ContainerengineService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of ContainerEngine.
    /// </summary>
    public class ContainerEngineWaiters
    {
        private readonly ContainerEngineClient client;

        public  ContainerEngineWaiters(ContainerEngineClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAddonRequest, GetAddonResponse> ForAddon(GetAddonRequest request, params AddonLifecycleState[] targetStates)
        {
            return this.ForAddon(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAddonRequest, GetAddonResponse> ForAddon(GetAddonRequest request, WaiterConfiguration config, params AddonLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetAddonRequest, GetAddonResponse>(
                request,
                request => client.GetAddon(request),
                response => targetStates.Contains(response.Addon.LifecycleState.Value),
                targetStates.Contains(AddonLifecycleState.Deleted)
            );
            return new Waiter<GetAddonRequest, GetAddonResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetClusterRequest, GetClusterResponse> ForCluster(GetClusterRequest request, params ClusterLifecycleState[] targetStates)
        {
            return this.ForCluster(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetClusterRequest, GetClusterResponse> ForCluster(GetClusterRequest request, WaiterConfiguration config, params ClusterLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetClusterRequest, GetClusterResponse>(
                request,
                request => client.GetCluster(request),
                response => targetStates.Contains(response.Cluster.LifecycleState.Value),
                targetStates.Contains(ClusterLifecycleState.Deleted)
            );
            return new Waiter<GetClusterRequest, GetClusterResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodePoolRequest, GetNodePoolResponse> ForNodePool(GetNodePoolRequest request, params NodePoolLifecycleState[] targetStates)
        {
            return this.ForNodePool(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNodePoolRequest, GetNodePoolResponse> ForNodePool(GetNodePoolRequest request, WaiterConfiguration config, params NodePoolLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetNodePoolRequest, GetNodePoolResponse>(
                request,
                request => client.GetNodePool(request),
                response => targetStates.Contains(response.NodePool.LifecycleState.Value),
                targetStates.Contains(NodePoolLifecycleState.Deleted)
            );
            return new Waiter<GetNodePoolRequest, GetNodePoolResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualNodeRequest, GetVirtualNodeResponse> ForVirtualNode(GetVirtualNodeRequest request, params VirtualNodeLifecycleState[] targetStates)
        {
            return this.ForVirtualNode(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualNodeRequest, GetVirtualNodeResponse> ForVirtualNode(GetVirtualNodeRequest request, WaiterConfiguration config, params VirtualNodeLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualNodeRequest, GetVirtualNodeResponse>(
                request,
                request => client.GetVirtualNode(request),
                response => targetStates.Contains(response.VirtualNode.LifecycleState.Value),
                targetStates.Contains(VirtualNodeLifecycleState.Deleted)
            );
            return new Waiter<GetVirtualNodeRequest, GetVirtualNodeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualNodePoolRequest, GetVirtualNodePoolResponse> ForVirtualNodePool(GetVirtualNodePoolRequest request, params VirtualNodePoolLifecycleState[] targetStates)
        {
            return this.ForVirtualNodePool(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualNodePoolRequest, GetVirtualNodePoolResponse> ForVirtualNodePool(GetVirtualNodePoolRequest request, WaiterConfiguration config, params VirtualNodePoolLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualNodePoolRequest, GetVirtualNodePoolResponse>(
                request,
                request => client.GetVirtualNodePool(request),
                response => targetStates.Contains(response.VirtualNodePool.LifecycleState.Value),
                targetStates.Contains(VirtualNodePoolLifecycleState.Deleted)
            );
            return new Waiter<GetVirtualNodePoolRequest, GetVirtualNodePoolResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params WorkRequestStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params WorkRequestStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkloadMappingRequest, GetWorkloadMappingResponse> ForWorkloadMapping(GetWorkloadMappingRequest request, params WorkloadMappingLifecycleState[] targetStates)
        {
            return this.ForWorkloadMapping(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkloadMappingRequest, GetWorkloadMappingResponse> ForWorkloadMapping(GetWorkloadMappingRequest request, WaiterConfiguration config, params WorkloadMappingLifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkloadMappingRequest, GetWorkloadMappingResponse>(
                request,
                request => client.GetWorkloadMapping(request),
                response => targetStates.Contains(response.WorkloadMapping.LifecycleState.Value),
                targetStates.Contains(WorkloadMappingLifecycleState.Deleted)
            );
            return new Waiter<GetWorkloadMappingRequest, GetWorkloadMappingResponse>(config, agent);
        }
    }
}
