/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// GPU performance metrics
    /// 
    /// </summary>
    public class HostGpuUsage : HostPerformanceMetricGroup
    {
        
        /// <value>
        /// GPU Identifier
        /// </value>
        [JsonProperty(PropertyName = "gpuId")]
        public System.Nullable<int> GpuId { get; set; }
        
        /// <value>
        /// GPU Utilization Percent
        /// </value>
        [JsonProperty(PropertyName = "utilization")]
        public System.Double Utilization { get; set; }
        
        /// <value>
        /// GPU Memory Utilization Percent
        /// </value>
        [JsonProperty(PropertyName = "memoryUtilization")]
        public System.Double MemoryUtilization { get; set; }
        
        /// <value>
        /// GPU Power Draw in Watts
        /// </value>
        [JsonProperty(PropertyName = "powerDraw")]
        public System.Double PowerDraw { get; set; }
        
        /// <value>
        /// GPU Temperature in Celsius
        /// </value>
        [JsonProperty(PropertyName = "temperature")]
        public System.Double Temperature { get; set; }
        
        /// <value>
        /// GPU Fan Utilization
        /// </value>
        [JsonProperty(PropertyName = "fanUtilization")]
        public System.Double FanUtilization { get; set; }
        
        /// <value>
        /// GPU Graphics (Shader) Clock Speed
        /// </value>
        [JsonProperty(PropertyName = "clockSpeedGraphics")]
        public System.Double ClockSpeedGraphics { get; set; }
        
        /// <value>
        /// GPU SM (Streaming Multiprocessor) Clock Speed
        /// </value>
        [JsonProperty(PropertyName = "clockSpeedSm")]
        public System.Double ClockSpeedSm { get; set; }
        
        /// <value>
        /// GPU Video Clock Speed
        /// </value>
        [JsonProperty(PropertyName = "clockSpeedVideo")]
        public System.Double ClockSpeedVideo { get; set; }
        
        /// <value>
        /// GPU Memory Clock Speed
        /// </value>
        [JsonProperty(PropertyName = "clockSpeedMemory")]
        public System.Double ClockSpeedMemory { get; set; }
        
        /// <value>
        /// GPU Performance State
        /// </value>
        [JsonProperty(PropertyName = "performanceState")]
        public System.Double PerformanceState { get; set; }
        
        /// <value>
        /// GPU ECC Single Bit Errors
        /// </value>
        [JsonProperty(PropertyName = "eccSingleBitErrors")]
        public System.Nullable<int> EccSingleBitErrors { get; set; }
        
        /// <value>
        /// GPU ECC Double Bit Errors
        /// </value>
        [JsonProperty(PropertyName = "eccDoubleBitErrors")]
        public System.Nullable<int> EccDoubleBitErrors { get; set; }
        
        /// <value>
        /// Nothing running on CPU, clocks are idle
        /// </value>
        [JsonProperty(PropertyName = "clockEventIdle")]
        public System.Nullable<int> ClockEventIdle { get; set; }
        
        /// <value>
        /// HW Thermal Slowdown (reducing the core clocks by a factor of 2 or more) is engaged. Temp too high
        /// </value>
        [JsonProperty(PropertyName = "clockEventHwThermalSlowDown")]
        public System.Nullable<int> ClockEventHwThermalSlowDown { get; set; }
        
        /// <value>
        /// SW Power Scaling algorithm is reducing the clocks below requested clocks because the GPU is consuming too much power
        /// </value>
        [JsonProperty(PropertyName = "clockEventSwPowerCap")]
        public System.Nullable<int> ClockEventSwPowerCap { get; set; }
        
        /// <value>
        /// GPU clocks are limited by applications clocks setting
        /// </value>
        [JsonProperty(PropertyName = "clockEventAppClockSetting")]
        public System.Nullable<int> ClockEventAppClockSetting { get; set; }
        
        /// <value>
        /// HW Power Brake Slowdown (reducing the core clocks by a factor of 2 or more) is engaged
        /// </value>
        [JsonProperty(PropertyName = "clockEventHwPowerBreak")]
        public System.Nullable<int> ClockEventHwPowerBreak { get; set; }
        
        /// <value>
        /// SW Thermal capping algorithm is reducing clocks below requested clocks because GPU temperature is higher than Max Operating Temp
        /// </value>
        [JsonProperty(PropertyName = "clockEventSwThermalSlowdown")]
        public System.Nullable<int> ClockEventSwThermalSlowdown { get; set; }
        
        /// <value>
        /// HW Power Brake Slowdown (reducing the core clocks by a factor of 2 or more) is engaged
        /// </value>
        [JsonProperty(PropertyName = "clockEventSyncBoost")]
        public System.Nullable<int> ClockEventSyncBoost { get; set; }
        
        [JsonProperty(PropertyName = "metricName")]
        private readonly string metricName = "HOST_GPU_USAGE";
    }
}
