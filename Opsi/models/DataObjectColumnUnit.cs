/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Unit details of a data object column.
    /// </summary>
    [JsonConverter(typeof(DataObjectColumnUnitModelConverter))]
    public class DataObjectColumnUnit 
    {
                ///
        /// <value>
        /// Category of the column's unit.
        /// </value>
        ///
        public enum UnitCategoryEnum {
            [EnumMember(Value = "DATA_SIZE")]
            DataSize,
            [EnumMember(Value = "TIME")]
            Time,
            [EnumMember(Value = "POWER")]
            Power,
            [EnumMember(Value = "TEMPERATURE")]
            Temperature,
            [EnumMember(Value = "CORE")]
            Core,
            [EnumMember(Value = "RATE")]
            Rate,
            [EnumMember(Value = "FREQUENCY")]
            Frequency,
            [EnumMember(Value = "OTHER_STANDARD")]
            OtherStandard,
            [EnumMember(Value = "CUSTOM")]
            Custom
        };

        
        /// <value>
        /// Display name of the column's unit.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
    }

    public class DataObjectColumnUnitModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DataObjectColumnUnit);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DataObjectColumnUnit);
            var discriminator = jsonObject["unitCategory"].Value<string>();
            switch (discriminator)
            {
                case "CORE":
                    obj = new DataObjectCoreColumnUnit();
                    break;
                case "TIME":
                    obj = new DataObjectTimeColumnUnit();
                    break;
                case "OTHER_STANDARD":
                    obj = new DataObjectOtherStandardColumnUnit();
                    break;
                case "CUSTOM":
                    obj = new DataObjectCustomColumnUnit();
                    break;
                case "TEMPERATURE":
                    obj = new DataObjectTemperatureColumnUnit();
                    break;
                case "POWER":
                    obj = new DataObjectPowerColumnUnit();
                    break;
                case "RATE":
                    obj = new DataObjectRateColumnUnit();
                    break;
                case "FREQUENCY":
                    obj = new DataObjectFrequencyColumnUnit();
                    break;
                case "DATA_SIZE":
                    obj = new DataObjectDataSizeColumnUnit();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under DataObjectColumnUnit! Returning null value.");
            }
            return obj;
        }
    }
}
