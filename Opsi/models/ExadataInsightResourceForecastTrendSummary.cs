/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// List of resource id, name , capacity insight value, pattern, historical usage and projected data.
    /// </summary>
    public class ExadataInsightResourceForecastTrendSummary 
    {
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database insight resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The name of the resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Days to reach capacity for a storage server
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DaysToReachCapacity is required.")]
        [JsonProperty(PropertyName = "daysToReachCapacity")]
        public System.Nullable<int> DaysToReachCapacity { get; set; }
        
        /// <value>
        /// Auto-ML algorithm leveraged for the forecast. Only applicable for Auto-ML forecast.
        /// </value>
        [JsonProperty(PropertyName = "selectedForecastAlgorithm")]
        public string SelectedForecastAlgorithm { get; set; }
                ///
        /// <value>
        /// Time series patterns used in the forecasting.
        /// </value>
        ///
        public enum PatternEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "LINEAR")]
            Linear,
            [EnumMember(Value = "MONTHLY_SEASONS")]
            MonthlySeasons,
            [EnumMember(Value = "MONTHLY_AND_YEARLY_SEASONS")]
            MonthlyAndYearlySeasons,
            [EnumMember(Value = "WEEKLY_SEASONS")]
            WeeklySeasons,
            [EnumMember(Value = "WEEKLY_AND_MONTHLY_SEASONS")]
            WeeklyAndMonthlySeasons,
            [EnumMember(Value = "WEEKLY_MONTHLY_AND_YEARLY_SEASONS")]
            WeeklyMonthlyAndYearlySeasons,
            [EnumMember(Value = "WEEKLY_AND_YEARLY_SEASONS")]
            WeeklyAndYearlySeasons,
            [EnumMember(Value = "YEARLY_SEASONS")]
            YearlySeasons
        };

        /// <value>
        /// Time series patterns used in the forecasting.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Pattern is required.")]
        [JsonProperty(PropertyName = "pattern")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<PatternEnum> Pattern { get; set; }
        
        /// <value>
        /// Time series data used for the forecast analysis.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "HistoricalData is required.")]
        [JsonProperty(PropertyName = "historicalData")]
        public System.Collections.Generic.List<HistoricalDataItem> HistoricalData { get; set; }
        
        /// <value>
        /// Time series data result of the forecasting analysis.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ProjectedData is required.")]
        [JsonProperty(PropertyName = "projectedData")]
        public System.Collections.Generic.List<ProjectedDataItem> ProjectedData { get; set; }
        
    }
}
