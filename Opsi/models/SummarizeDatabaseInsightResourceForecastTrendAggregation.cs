/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Forecast results from the selected time period.
    /// </summary>
    public class SummarizeDatabaseInsightResourceForecastTrendAggregation 
    {
        
        /// <value>
        /// The start timestamp that was passed into the request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeIntervalStart is required.")]
        [JsonProperty(PropertyName = "timeIntervalStart")]
        public System.Nullable<System.DateTime> TimeIntervalStart { get; set; }
        
        /// <value>
        /// The end timestamp that was passed into the request.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeIntervalEnd is required.")]
        [JsonProperty(PropertyName = "timeIntervalEnd")]
        public System.Nullable<System.DateTime> TimeIntervalEnd { get; set; }
                ///
        /// <value>
        /// Defines the type of resource metric (CPU, STORAGE)
        /// 
        /// </value>
        ///
        public enum ResourceMetricEnum {
            [EnumMember(Value = "CPU")]
            Cpu,
            [EnumMember(Value = "STORAGE")]
            Storage
        };

        /// <value>
        /// Defines the type of resource metric (CPU, STORAGE)
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResourceMetric is required.")]
        [JsonProperty(PropertyName = "resourceMetric")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ResourceMetricEnum> ResourceMetric { get; set; }
        
        /// <value>
        /// Displays usage unit ( CORES, GB)
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "UsageUnit is required.")]
        [JsonProperty(PropertyName = "usageUnit")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<UsageUnit> UsageUnit { get; set; }
                ///
        /// <value>
        /// Time series patterns used in the forecasting.
        /// </value>
        ///
        public enum PatternEnum {
            [EnumMember(Value = "LINEAR")]
            Linear,
            [EnumMember(Value = "MONTHLY_SEASONS")]
            MonthlySeasons,
            [EnumMember(Value = "MONTHLY_AND_YEARLY_SEASONS")]
            MonthlyAndYearlySeasons,
            [EnumMember(Value = "WEEKLY_SEASONS")]
            WeeklySeasons,
            [EnumMember(Value = "WEEKLY_AND_MONTHLY_SEASONS")]
            WeeklyAndMonthlySeasons,
            [EnumMember(Value = "WEEKLY_MONTHLY_AND_YEARLY_SEASONS")]
            WeeklyMonthlyAndYearlySeasons,
            [EnumMember(Value = "WEEKLY_AND_YEARLY_SEASONS")]
            WeeklyAndYearlySeasons,
            [EnumMember(Value = "YEARLY_SEASONS")]
            YearlySeasons
        };

        /// <value>
        /// Time series patterns used in the forecasting.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Pattern is required.")]
        [JsonProperty(PropertyName = "pattern")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<PatternEnum> Pattern { get; set; }
        
        /// <value>
        /// Time series data used for the forecast analysis.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "HistoricalData is required.")]
        [JsonProperty(PropertyName = "historicalData")]
        public System.Collections.Generic.List<HistoricalDataItem> HistoricalData { get; set; }
        
        /// <value>
        /// Time series data result of the forecasting analysis.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ProjectedData is required.")]
        [JsonProperty(PropertyName = "projectedData")]
        public System.Collections.Generic.List<ProjectedDataItem> ProjectedData { get; set; }
        
    }
}
