/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Contains host resource base statistics.
    /// 
    /// </summary>
    [JsonConverter(typeof(HostResourceStatisticsModelConverter))]
    public class HostResourceStatistics 
    {
        
        /// <value>
        /// Total amount used of the resource metric type (CPU, STORAGE).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Usage is required.")]
        [JsonProperty(PropertyName = "usage")]
        public System.Double Usage { get; set; }
        
        /// <value>
        /// The maximum allocated amount of the resource metric type  (CPU, STORAGE) for a set of databases.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Capacity is required.")]
        [JsonProperty(PropertyName = "capacity")]
        public System.Double Capacity { get; set; }
        
        /// <value>
        /// Resource utilization in percentage.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "UtilizationPercent is required.")]
        [JsonProperty(PropertyName = "utilizationPercent")]
        public System.Double UtilizationPercent { get; set; }
        
        /// <value>
        /// Change in resource utilization in percentage
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "UsageChangePercent is required.")]
        [JsonProperty(PropertyName = "usageChangePercent")]
        public System.Double UsageChangePercent { get; set; }
                ///
        /// <value>
        /// Name of resource for host
        /// </value>
        ///
        public enum ResourceNameEnum {
            [EnumMember(Value = "HOST_CPU_STATISTICS")]
            HostCpuStatistics,
            [EnumMember(Value = "HOST_MEMORY_STATISTICS")]
            HostMemoryStatistics,
            [EnumMember(Value = "HOST_STORAGE_STATISTICS")]
            HostStorageStatistics,
            [EnumMember(Value = "HOST_NETWORK_STATISTICS")]
            HostNetworkStatistics
        };

        
    }

    public class HostResourceStatisticsModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(HostResourceStatistics);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(HostResourceStatistics);
            var discriminator = jsonObject["resourceName"].Value<string>();
            switch (discriminator)
            {
                case "HOST_NETWORK_STATISTICS":
                    obj = new HostNetworkStatistics();
                    break;
                case "HOST_STORAGE_STATISTICS":
                    obj = new HostStorageStatistics();
                    break;
                case "HOST_MEMORY_STATISTICS":
                    obj = new HostMemoryStatistics();
                    break;
                case "HOST_CPU_STATISTICS":
                    obj = new HostCpuStatistics();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under HostResourceStatistics! Returning null value.");
            }
            return obj;
        }
    }
}
