/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Configuration parameters defined for external databases instance level.
    /// </summary>
    public class DBOSConfigInstance : DatabaseConfigurationMetricGroup
    {
        
        /// <value>
        /// Name of the database instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceName is required.")]
        [JsonProperty(PropertyName = "instanceName")]
        public string InstanceName { get; set; }
        
        /// <value>
        /// Host name of the database instance.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "HostName is required.")]
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }
        
        /// <value>
        /// Total number of CPUs available.
        /// </value>
        [JsonProperty(PropertyName = "numCPUs")]
        public System.Nullable<int> NumCPUs { get; set; }
        
        /// <value>
        /// Number of CPU cores available (includes subcores of multicore CPUs as well as single-core CPUs).
        /// </value>
        [JsonProperty(PropertyName = "numCPUCores")]
        public System.Nullable<int> NumCPUCores { get; set; }
        
        /// <value>
        /// Number of CPU Sockets available.
        /// </value>
        [JsonProperty(PropertyName = "numCPUSockets")]
        public System.Nullable<int> NumCPUSockets { get; set; }
        
        /// <value>
        /// Total number of bytes of physical memory.
        /// </value>
        [JsonProperty(PropertyName = "physicalMemoryBytes")]
        public System.Double PhysicalMemoryBytes { get; set; }
        
        [JsonProperty(PropertyName = "metricName")]
        private readonly string metricName = "DB_OS_CONFIG_INSTANCE";
    }
}
