/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Information required to form and execute query on a data object.
    /// </summary>
    [JsonConverter(typeof(DataObjectQueryModelConverter))]
    public class DataObjectQuery 
    {
                ///
        /// <value>
        /// Type of Query
        /// </value>
        ///
        public enum QueryTypeEnum {
            [EnumMember(Value = "TEMPLATIZED_QUERY")]
            TemplatizedQuery,
            [EnumMember(Value = "STANDARD_QUERY")]
            StandardQuery
        };

        
        /// <value>
        /// List of bind parameters to be applied in the query.
        /// </value>
        [JsonProperty(PropertyName = "bindParams")]
        public System.Collections.Generic.List<DataObjectBindParameter> BindParams { get; set; }
        
        /// <value>
        /// Timeout (in seconds) to be set for the data object query execution.
        /// </value>
        [JsonProperty(PropertyName = "queryExecutionTimeoutInSeconds")]
        public System.Double QueryExecutionTimeoutInSeconds { get; set; }
        
    }

    public class DataObjectQueryModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DataObjectQuery);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DataObjectQuery);
            var discriminator = jsonObject["queryType"].Value<string>();
            switch (discriminator)
            {
                case "STANDARD_QUERY":
                    obj = new DataObjectStandardQuery();
                    break;
                case "TEMPLATIZED_QUERY":
                    obj = new DataObjectTemplatizedQuery();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
