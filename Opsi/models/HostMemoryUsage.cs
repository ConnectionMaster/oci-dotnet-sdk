/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Memory usage metric for the host
    /// 
    /// </summary>
    public class HostMemoryUsage : HostPerformanceMetricGroup
    {
        
        /// <value>
        /// Amount of physical memory used in gigabytes
        /// </value>
        [JsonProperty(PropertyName = "memoryUsedInGB")]
        public System.Double MemoryUsedInGB { get; set; }
        
        /// <value>
        /// Amount of physical memory used in percentage
        /// </value>
        [JsonProperty(PropertyName = "memoryUtilizationInPercent")]
        public System.Nullable<float> MemoryUtilizationInPercent { get; set; }
        
        /// <value>
        /// Load on memory in gigabytes
        /// </value>
        [JsonProperty(PropertyName = "memoryLoadInGB")]
        public System.Double MemoryLoadInGB { get; set; }
        
        /// <value>
        /// Amount of usable physical memory in kilobytes
        /// </value>
        [JsonProperty(PropertyName = "realMemoryInKB")]
        public System.Double RealMemoryInKB { get; set; }
        
        /// <value>
        /// Amount of available physical memory in kilobytes
        /// </value>
        [JsonProperty(PropertyName = "freeMemoryInKB")]
        public System.Double FreeMemoryInKB { get; set; }
        
        /// <value>
        /// Memory used excluding buffers and cache in gigabytes
        /// </value>
        [JsonProperty(PropertyName = "logicalMemoryUsedInGB")]
        public System.Double LogicalMemoryUsedInGB { get; set; }
        
        /// <value>
        /// Amount of logical memory used in percentage
        /// </value>
        [JsonProperty(PropertyName = "logicalMemoryUtilizationInPercent")]
        public System.Nullable<float> LogicalMemoryUtilizationInPercent { get; set; }
        
        /// <value>
        /// Amount of avaiable virtual memory in kilobytes
        /// </value>
        [JsonProperty(PropertyName = "freeLogicalMemoryInKB")]
        public System.Double FreeLogicalMemoryInKB { get; set; }
        
        /// <value>
        /// Number of major page faults
        /// </value>
        [JsonProperty(PropertyName = "majorPageFaults")]
        public System.Nullable<int> MajorPageFaults { get; set; }
        
        /// <value>
        /// Amount of available swap space in kilobytes
        /// </value>
        [JsonProperty(PropertyName = "swapFreeInKB")]
        public System.Double SwapFreeInKB { get; set; }
        
        /// <value>
        /// Amount of memory used for anon huge pages in kilobytes
        /// </value>
        [JsonProperty(PropertyName = "anonHugePagesInKB")]
        public System.Double AnonHugePagesInKB { get; set; }
        
        /// <value>
        /// Number of available huge pages
        /// </value>
        [JsonProperty(PropertyName = "hugePagesFree")]
        public System.Nullable<int> HugePagesFree { get; set; }
        
        /// <value>
        /// Number of reserved huge pages
        /// </value>
        [JsonProperty(PropertyName = "hugePagesReserved")]
        public System.Nullable<int> HugePagesReserved { get; set; }
        
        /// <value>
        /// Number of surplus huge pages
        /// </value>
        [JsonProperty(PropertyName = "hugePagesSurplus")]
        public System.Nullable<int> HugePagesSurplus { get; set; }
        
        [JsonProperty(PropertyName = "metricName")]
        private readonly string metricName = "HOST_MEMORY_USAGE";
    }
}
