/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Base Metric Group for Host configuration metrics
    /// 
    /// </summary>
    [JsonConverter(typeof(HostConfigurationMetricGroupModelConverter))]
    public class HostConfigurationMetricGroup 
    {
                ///
        /// <value>
        /// Name of the metric group
        /// 
        /// </value>
        ///
        public enum MetricNameEnum {
            [EnumMember(Value = "HOST_PRODUCT")]
            HostProduct,
            [EnumMember(Value = "HOST_RESOURCE_ALLOCATION")]
            HostResourceAllocation,
            [EnumMember(Value = "HOST_MEMORY_CONFIGURATION")]
            HostMemoryConfiguration,
            [EnumMember(Value = "HOST_HARDWARE_CONFIGURATION")]
            HostHardwareConfiguration,
            [EnumMember(Value = "HOST_CPU_HARDWARE_CONFIGURATION")]
            HostCpuHardwareConfiguration,
            [EnumMember(Value = "HOST_NETWORK_CONFIGURATION")]
            HostNetworkConfiguration,
            [EnumMember(Value = "HOST_ENTITES")]
            HostEntites,
            [EnumMember(Value = "HOST_FILESYSTEM_CONFIGURATION")]
            HostFilesystemConfiguration,
            [EnumMember(Value = "HOST_GPU_CONFIGURATION")]
            HostGpuConfiguration
        };

        
        /// <value>
        /// Collection timestamp
        /// Example: &quot;2020-05-06T00:00:00.000Z&quot;
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCollected is required.")]
        [JsonProperty(PropertyName = "timeCollected")]
        public System.Nullable<System.DateTime> TimeCollected { get; set; }
        
    }

    public class HostConfigurationMetricGroupModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(HostConfigurationMetricGroup);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(HostConfigurationMetricGroup);
            var discriminator = jsonObject["metricName"].Value<string>();
            switch (discriminator)
            {
                case "HOST_RESOURCE_ALLOCATION":
                    obj = new HostResourceAllocation();
                    break;
                case "HOST_PRODUCT":
                    obj = new HostProduct();
                    break;
                case "HOST_FILESYSTEM_CONFIGURATION":
                    obj = new HostFilesystemConfiguration();
                    break;
                case "HOST_NETWORK_CONFIGURATION":
                    obj = new HostNetworkConfiguration();
                    break;
                case "HOST_ENTITIES":
                    obj = new HostEntities();
                    break;
                case "HOST_MEMORY_CONFIGURATION":
                    obj = new HostMemoryConfiguration();
                    break;
                case "HOST_CPU_HARDWARE_CONFIGURATION":
                    obj = new HostCpuHardwareConfiguration();
                    break;
                case "HOST_GPU_CONFIGURATION":
                    obj = new HostGpuConfiguration();
                    break;
                case "HOST_HARDWARE_CONFIGURATION":
                    obj = new HostHardwareConfiguration();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
