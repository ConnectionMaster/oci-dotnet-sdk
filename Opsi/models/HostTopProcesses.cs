/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.OpsiService.Models
{
    /// <summary>
    /// Top Processes metric for the host
    /// 
    /// </summary>
    public class HostTopProcesses : HostPerformanceMetricGroup
    {
        
        /// <value>
        /// process id
        /// </value>
        [JsonProperty(PropertyName = "pid")]
        public System.Nullable<decimal> Pid { get; set; }
        
        /// <value>
        /// User that started the process
        /// </value>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }
        
        /// <value>
        /// Memory utilization percentage
        /// </value>
        [JsonProperty(PropertyName = "memoryUtilizationPercent")]
        public System.Double MemoryUtilizationPercent { get; set; }
        
        /// <value>
        /// CPU utilization percentage
        /// </value>
        [JsonProperty(PropertyName = "cpuUtilizationPercent")]
        public System.Double CpuUtilizationPercent { get; set; }
        
        /// <value>
        /// CPU usage in seconds
        /// </value>
        [JsonProperty(PropertyName = "cpuUsageInSeconds")]
        public System.Double CpuUsageInSeconds { get; set; }
        
        /// <value>
        /// Command line executed for the process
        /// </value>
        [JsonProperty(PropertyName = "command")]
        public string Command { get; set; }
        
        /// <value>
        /// Virtual memory in megabytes
        /// </value>
        [JsonProperty(PropertyName = "virtualMemoryInMBs")]
        public System.Double VirtualMemoryInMBs { get; set; }
        
        /// <value>
        /// Physical memory in megabytes
        /// </value>
        [JsonProperty(PropertyName = "physicalMemoryInMBs")]
        public System.Double PhysicalMemoryInMBs { get; set; }
        
        /// <value>
        /// Process Start Time
        /// Example: &quot;2020-03-31T00:00:00.000Z&quot;
        /// </value>
        [JsonProperty(PropertyName = "startTime")]
        public System.Nullable<System.DateTime> StartTime { get; set; }
        
        /// <value>
        /// Number of processes running at the time of collection
        /// </value>
        [JsonProperty(PropertyName = "totalProcesses")]
        public System.Nullable<decimal> TotalProcesses { get; set; }
        
        /// <value>
        /// Container id if this process corresponds to a running container in the host
        /// </value>
        [JsonProperty(PropertyName = "containerId")]
        public string ContainerId { get; set; }
        
        /// <value>
        /// Bytes Read
        /// </value>
        [JsonProperty(PropertyName = "diskBytesRead")]
        public System.Double DiskBytesRead { get; set; }
        
        /// <value>
        /// Bytes Written
        /// </value>
        [JsonProperty(PropertyName = "diskBytesWritten")]
        public System.Double DiskBytesWritten { get; set; }
        
        /// <value>
        /// Read transactions per second
        /// </value>
        [JsonProperty(PropertyName = "diskIopsRead")]
        public System.Double DiskIopsRead { get; set; }
        
        /// <value>
        /// Write transactions per second
        /// </value>
        [JsonProperty(PropertyName = "diskIopsWritten")]
        public System.Double DiskIopsWritten { get; set; }
        
        /// <value>
        /// IO Transactions per second
        /// </value>
        [JsonProperty(PropertyName = "diskIops")]
        public System.Double DiskIops { get; set; }
        
        [JsonProperty(PropertyName = "metricName")]
        private readonly string metricName = "HOST_TOP_PROCESSES";
    }
}
