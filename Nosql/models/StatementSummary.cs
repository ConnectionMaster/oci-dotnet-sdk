/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NosqlService.Models
{
    /// <summary>
    /// Information derived from parsing a NoSQL SQL statement.
    /// </summary>
    public class StatementSummary 
    {
                ///
        /// <value>
        /// The operation represented in the statement, e.g. CREATE_TABLE.
        /// 
        /// </value>
        ///
        public enum OperationEnum {
            [EnumMember(Value = "CREATE_TABLE")]
            CreateTable,
            [EnumMember(Value = "ALTER_TABLE")]
            AlterTable,
            [EnumMember(Value = "DROP_TABLE")]
            DropTable,
            [EnumMember(Value = "CREATE_INDEX")]
            CreateIndex,
            [EnumMember(Value = "DROP_INDEX")]
            DropIndex,
            [EnumMember(Value = "SELECT")]
            Select,
            [EnumMember(Value = "UPDATE")]
            Update,
            [EnumMember(Value = "INSERT")]
            Insert,
            [EnumMember(Value = "DELETE")]
            Delete
        };

        /// <value>
        /// The operation represented in the statement, e.g. CREATE_TABLE.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "operation")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<OperationEnum> Operation { get; set; }
        
        /// <value>
        /// The table name from the SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "tableName")]
        public string TableName { get; set; }
        
        /// <value>
        /// The index name from the SQL statement, if present.
        /// </value>
        [JsonProperty(PropertyName = "indexName")]
        public string IndexName { get; set; }
        
        /// <value>
        /// True if the statement includes \"IF EXISTS.\"
        /// </value>
        [JsonProperty(PropertyName = "isIfExists")]
        public System.Nullable<bool> IsIfExists { get; set; }
        
        /// <value>
        /// True if the statement includes \"IF NOT EXISTS.\"
        /// </value>
        [JsonProperty(PropertyName = "isIfNotExists")]
        public System.Nullable<bool> IsIfNotExists { get; set; }
        
        /// <value>
        /// If present, indicates a syntax error in the statement.
        /// </value>
        [JsonProperty(PropertyName = "syntaxError")]
        public string SyntaxError { get; set; }
        
    }
}
