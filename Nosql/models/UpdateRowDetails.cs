/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NosqlService.Models
{
    /// <summary>
    /// Specifications for the putting of a table row.
    /// </summary>
    public class UpdateRowDetails 
    {
        
        /// <value>
        /// The OCID of the table's compartment.  Required
        /// if the tableNameOrId path parameter is a table name.
        /// Optional if tableNameOrId is an OCID.  If tableNameOrId
        /// is an OCID, and compartmentId is supplied, the latter
        /// must match the identified table's compartmentId.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The map of values from a row.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Value is required.")]
        [JsonProperty(PropertyName = "value")]
        public System.Collections.Generic.Dictionary<string, System.Object> Value { get; set; }
                ///
        /// <value>
        /// Specifies a condition for the put operation.
        /// </value>
        ///
        public enum OptionEnum {
            [EnumMember(Value = "IF_ABSENT")]
            IfAbsent,
            [EnumMember(Value = "IF_PRESENT")]
            IfPresent
        };

        /// <value>
        /// Specifies a condition for the put operation.
        /// </value>
        [JsonProperty(PropertyName = "option")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<OptionEnum> Option { get; set; }
        
        /// <value>
        /// If true, and the put fails due to an option setting, then
        /// the existing row will be returned.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isGetReturnRow")]
        public System.Nullable<bool> IsGetReturnRow { get; set; }
        
        /// <value>
        /// Timeout setting for the put.
        /// </value>
        [JsonProperty(PropertyName = "timeoutInMs")]
        public System.Nullable<int> TimeoutInMs { get; set; }
        
        /// <value>
        /// Time-to-live for the row, in days.
        /// </value>
        [JsonProperty(PropertyName = "ttl")]
        public System.Nullable<int> Ttl { get; set; }
        
        /// <value>
        /// If true, set time-to-live for this row to the table's default.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isTtlUseTableDefault")]
        public System.Nullable<bool> IsTtlUseTableDefault { get; set; }
        
        /// <value>
        /// Sets the number of generated identity values that are
        /// requested from the server during a put. If present and greater than 0,
        /// this value takes precedence over a default value for the table.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "identityCacheSize")]
        public System.Nullable<int> IdentityCacheSize { get; set; }
        
        /// <value>
        /// If present and true, the presented row value must exactly
        /// match the table's schema.  Otherwise, rows with missing
        /// non-key fields or extra fields can be written successfully.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isExactMatch")]
        public System.Nullable<bool> IsExactMatch { get; set; }
        
    }
}
