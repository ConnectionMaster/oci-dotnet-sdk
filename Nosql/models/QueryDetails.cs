/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NosqlService.Models
{
    /// <summary>
    /// All the information surrounding a query, including the query statement,
    /// limits, consistency, and so forth.
    /// 
    /// </summary>
    public class QueryDetails 
    {
        
        /// <value>
        /// Compartment OCID, to provide context for a table name in
        /// the given statement.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// A NoSQL SQL query statement; or a Base64-encoded prepared statement.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Statement is required.")]
        [JsonProperty(PropertyName = "statement")]
        public string Statement { get; set; }
        
        /// <value>
        /// If true, the statement is a prepared statement.
        /// </value>
        [JsonProperty(PropertyName = "isPrepared")]
        public System.Nullable<bool> IsPrepared { get; set; }
                ///
        /// <value>
        /// Consistency requirement for a read operation.
        /// </value>
        ///
        public enum ConsistencyEnum {
            [EnumMember(Value = "EVENTUAL")]
            Eventual,
            [EnumMember(Value = "ABSOLUTE")]
            Absolute
        };

        /// <value>
        /// Consistency requirement for a read operation.
        /// </value>
        [JsonProperty(PropertyName = "consistency")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ConsistencyEnum> Consistency { get; set; }
        
        /// <value>
        /// A limit on the total amount of data read during this operation, in KB.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "maxReadInKBs")]
        public System.Nullable<int> MaxReadInKBs { get; set; }
        
        /// <value>
        /// A map of prepared statement variables to values.
        /// </value>
        [JsonProperty(PropertyName = "variables")]
        public System.Collections.Generic.Dictionary<string, System.Object> Variables { get; set; }
        
        /// <value>
        /// Timeout setting for the query.
        /// </value>
        [JsonProperty(PropertyName = "timeoutInMs")]
        public System.Nullable<int> TimeoutInMs { get; set; }
        
    }
}
