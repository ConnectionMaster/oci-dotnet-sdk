/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.NosqlService.Models
{
    /// <summary>
    /// Specifications for the new index.
    /// </summary>
    public class CreateIndexDetails 
    {
        
        /// <value>
        /// Index name.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The OCID of the table's compartment.  Required
        /// if the tableNameOrId path parameter is a table name.
        /// Optional if tableNameOrId is an OCID.  If tableNameOrId
        /// is an OCID, and compartmentId is supplied, the latter
        /// must match the identified table's compartmentId.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// A set of keys for a secondary index.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Keys is required.")]
        [JsonProperty(PropertyName = "keys")]
        public System.Collections.Generic.List<IndexKey> Keys { get; set; }
        
        /// <value>
        /// If true, the operation completes successfully even when the
        /// index exists.  Otherwise, an attempt to create an index
        /// that already exists will return an error.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isIfNotExists")]
        public System.Nullable<bool> IsIfNotExists { get; set; }
        
    }
}
