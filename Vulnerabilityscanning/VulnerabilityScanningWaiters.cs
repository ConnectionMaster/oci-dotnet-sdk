/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.VulnerabilityscanningService.Models;
using Oci.VulnerabilityscanningService.Requests;
using Oci.VulnerabilityscanningService.Responses;

namespace Oci.VulnerabilityscanningService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of VulnerabilityScanning.
    /// </summary>
    public class VulnerabilityScanningWaiters
    {
        private readonly VulnerabilityScanningClient client;

        public  VulnerabilityScanningWaiters(VulnerabilityScanningClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetContainerScanRecipeRequest, GetContainerScanRecipeResponse> ForContainerScanRecipe(GetContainerScanRecipeRequest request, params LifecycleState[] targetStates)
        {
            return this.ForContainerScanRecipe(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetContainerScanRecipeRequest, GetContainerScanRecipeResponse> ForContainerScanRecipe(GetContainerScanRecipeRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetContainerScanRecipeRequest, GetContainerScanRecipeResponse>(
                request,
                request => client.GetContainerScanRecipe(request),
                response => targetStates.Contains(response.ContainerScanRecipe.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetContainerScanRecipeRequest, GetContainerScanRecipeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetContainerScanTargetRequest, GetContainerScanTargetResponse> ForContainerScanTarget(GetContainerScanTargetRequest request, params LifecycleState[] targetStates)
        {
            return this.ForContainerScanTarget(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetContainerScanTargetRequest, GetContainerScanTargetResponse> ForContainerScanTarget(GetContainerScanTargetRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetContainerScanTargetRequest, GetContainerScanTargetResponse>(
                request,
                request => client.GetContainerScanTarget(request),
                response => targetStates.Contains(response.ContainerScanTarget.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetContainerScanTargetRequest, GetContainerScanTargetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostAgentScanResultRequest, GetHostAgentScanResultResponse> ForHostAgentScanResult(GetHostAgentScanResultRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostAgentScanResult(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostAgentScanResultRequest, GetHostAgentScanResultResponse> ForHostAgentScanResult(GetHostAgentScanResultRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostAgentScanResultRequest, GetHostAgentScanResultResponse>(
                request,
                request => client.GetHostAgentScanResult(request),
                response => targetStates.Contains(response.HostAgentScanResult.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostAgentScanResultRequest, GetHostAgentScanResultResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostCisBenchmarkScanResultRequest, GetHostCisBenchmarkScanResultResponse> ForHostCisBenchmarkScanResult(GetHostCisBenchmarkScanResultRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostCisBenchmarkScanResult(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostCisBenchmarkScanResultRequest, GetHostCisBenchmarkScanResultResponse> ForHostCisBenchmarkScanResult(GetHostCisBenchmarkScanResultRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostCisBenchmarkScanResultRequest, GetHostCisBenchmarkScanResultResponse>(
                request,
                request => client.GetHostCisBenchmarkScanResult(request),
                response => targetStates.Contains(response.HostCisBenchmarkScanResult.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostCisBenchmarkScanResultRequest, GetHostCisBenchmarkScanResultResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostEndpointProtectionScanResultRequest, GetHostEndpointProtectionScanResultResponse> ForHostEndpointProtectionScanResult(GetHostEndpointProtectionScanResultRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostEndpointProtectionScanResult(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostEndpointProtectionScanResultRequest, GetHostEndpointProtectionScanResultResponse> ForHostEndpointProtectionScanResult(GetHostEndpointProtectionScanResultRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostEndpointProtectionScanResultRequest, GetHostEndpointProtectionScanResultResponse>(
                request,
                request => client.GetHostEndpointProtectionScanResult(request),
                response => targetStates.Contains(response.HostEndpointProtectionScanResult.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostEndpointProtectionScanResultRequest, GetHostEndpointProtectionScanResultResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostPortScanResultRequest, GetHostPortScanResultResponse> ForHostPortScanResult(GetHostPortScanResultRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostPortScanResult(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostPortScanResultRequest, GetHostPortScanResultResponse> ForHostPortScanResult(GetHostPortScanResultRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostPortScanResultRequest, GetHostPortScanResultResponse>(
                request,
                request => client.GetHostPortScanResult(request),
                response => targetStates.Contains(response.HostPortScanResult.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostPortScanResultRequest, GetHostPortScanResultResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostScanRecipeRequest, GetHostScanRecipeResponse> ForHostScanRecipe(GetHostScanRecipeRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostScanRecipe(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostScanRecipeRequest, GetHostScanRecipeResponse> ForHostScanRecipe(GetHostScanRecipeRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostScanRecipeRequest, GetHostScanRecipeResponse>(
                request,
                request => client.GetHostScanRecipe(request),
                response => targetStates.Contains(response.HostScanRecipe.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostScanRecipeRequest, GetHostScanRecipeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostScanTargetRequest, GetHostScanTargetResponse> ForHostScanTarget(GetHostScanTargetRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostScanTarget(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostScanTargetRequest, GetHostScanTargetResponse> ForHostScanTarget(GetHostScanTargetRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostScanTargetRequest, GetHostScanTargetResponse>(
                request,
                request => client.GetHostScanTarget(request),
                response => targetStates.Contains(response.HostScanTarget.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostScanTargetRequest, GetHostScanTargetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostVulnerabilityRequest, GetHostVulnerabilityResponse> ForHostVulnerability(GetHostVulnerabilityRequest request, params LifecycleState[] targetStates)
        {
            return this.ForHostVulnerability(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetHostVulnerabilityRequest, GetHostVulnerabilityResponse> ForHostVulnerability(GetHostVulnerabilityRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetHostVulnerabilityRequest, GetHostVulnerabilityResponse>(
                request,
                request => client.GetHostVulnerability(request),
                response => targetStates.Contains(response.HostVulnerability.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetHostVulnerabilityRequest, GetHostVulnerabilityResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVulnerabilityRequest, GetVulnerabilityResponse> ForVulnerability(GetVulnerabilityRequest request, params LifecycleState[] targetStates)
        {
            return this.ForVulnerability(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVulnerabilityRequest, GetVulnerabilityResponse> ForVulnerability(GetVulnerabilityRequest request, WaiterConfiguration config, params LifecycleState[] targetStates)
        {
            var agent = new WaiterAgent<GetVulnerabilityRequest, GetVulnerabilityResponse>(
                request,
                request => client.GetVulnerability(request),
                response => targetStates.Contains(response.Vulnerability.LifecycleState.Value),
                targetStates.Contains(LifecycleState.Deleted)
            );
            return new Waiter<GetVulnerabilityRequest, GetVulnerabilityResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
