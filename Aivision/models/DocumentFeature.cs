/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.AivisionService.Models
{
    /// <summary>
    /// The type of document analysis.
    /// </summary>
    [JsonConverter(typeof(DocumentFeatureModelConverter))]
    public class DocumentFeature 
    {
                ///
        /// <value>
        /// The type of document analysis requested.
        /// The allowed values are:
        /// - `LANGUAGE_CLASSIFICATION`: Detect the language.
        /// - `TEXT_DETECTION`: Recognize text.
        /// - `TABLE_DETECTION`: Detect and extract data in tables.
        /// - `KEY_VALUE_DETECTION`: Extract form fields.
        /// - `DOCUMENT_CLASSIFICATION`: Identify the type of document.
        /// 
        /// </value>
        ///
        public enum FeatureTypeEnum {
            [EnumMember(Value = "LANGUAGE_CLASSIFICATION")]
            LanguageClassification,
            [EnumMember(Value = "TEXT_DETECTION")]
            TextDetection,
            [EnumMember(Value = "TABLE_DETECTION")]
            TableDetection,
            [EnumMember(Value = "KEY_VALUE_DETECTION")]
            KeyValueDetection,
            [EnumMember(Value = "DOCUMENT_CLASSIFICATION")]
            DocumentClassification
        };

        
    }

    public class DocumentFeatureModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DocumentFeature);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DocumentFeature);
            var discriminator = jsonObject["featureType"].Value<string>();
            switch (discriminator)
            {
                case "TABLE_DETECTION":
                    obj = new DocumentTableDetectionFeature();
                    break;
                case "KEY_VALUE_DETECTION":
                    obj = new DocumentKeyValueDetectionFeature();
                    break;
                case "DOCUMENT_CLASSIFICATION":
                    obj = new DocumentClassificationFeature();
                    break;
                case "TEXT_DETECTION":
                    obj = new DocumentTextDetectionFeature();
                    break;
                case "LANGUAGE_CLASSIFICATION":
                    obj = new DocumentLanguageClassificationFeature();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under DocumentFeature! Returning null value.");
            }
            return obj;
        }
    }
}
