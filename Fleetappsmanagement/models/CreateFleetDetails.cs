/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.FleetappsmanagementService.Models
{
    /// <summary>
    /// The information about new Fleet.
    /// </summary>
    public class CreateFleetDetails 
    {
        
        /// <value>
        /// A user-friendly name. Does not have to be unique, and it's changeable.
        /// Avoid entering confidential information.
        /// <br/>
        /// Example: My new resource
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// A user-friendly description. To provide some insight about the resource.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Tenancy OCID
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// Type of the Fleet
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FleetType is required.")]
        [JsonProperty(PropertyName = "fleetType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<Fleet.FleetTypeEnum> FleetType { get; set; }
        
        /// <value>
        /// Products associated with the Fleet
        /// </value>
        [JsonProperty(PropertyName = "products")]
        public System.Collections.Generic.List<string> Products { get; set; }
        
        /// <value>
        /// Application Type associated with the Fleet.Applicable for Environment fleet types.
        /// </value>
        [JsonProperty(PropertyName = "applicationType")]
        public string ApplicationType { get; set; }
        
        /// <value>
        /// Environment Type associated with the Fleet.Applicable for Environment fleet types.
        /// </value>
        [JsonProperty(PropertyName = "environmentType")]
        public string EnvironmentType { get; set; }
        
        /// <value>
        /// Group Type associated with Group Fleet.Applicable for Group fleet types.
        /// </value>
        [JsonProperty(PropertyName = "groupType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<Fleet.GroupTypeEnum> GroupType { get; set; }
        
        /// <value>
        /// Type of resource selection in a fleet
        /// </value>
        [JsonProperty(PropertyName = "resourceSelectionType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<Fleet.ResourceSelectionTypeEnum> ResourceSelectionType { get; set; }
        
        [JsonProperty(PropertyName = "ruleSelectionCriteria")]
        public SelectionCriteria RuleSelectionCriteria { get; set; }
        
        [JsonProperty(PropertyName = "notificationPreferences")]
        public NotificationPreferences NotificationPreferences { get; set; }
        
        /// <value>
        /// Resources to be added during fleet creation when Resource selection type is Manual.
        /// </value>
        [JsonProperty(PropertyName = "resources")]
        public System.Collections.Generic.List<AssociatedFleetResourceDetails> Resources { get; set; }
        
        /// <value>
        /// A value which represents if auto confirming of the targets can be enabled
        /// </value>
        [JsonProperty(PropertyName = "isTargetAutoConfirm")]
        public System.Nullable<bool> IsTargetAutoConfirm { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
