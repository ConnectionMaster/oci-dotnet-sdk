/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.FleetappsmanagementService.Models;
using Oci.FleetappsmanagementService.Requests;
using Oci.FleetappsmanagementService.Responses;

namespace Oci.FleetappsmanagementService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of FleetAppsManagement.
    /// </summary>
    public class FleetAppsManagementWaiters
    {
        private readonly FleetAppsManagementClient client;

        public  FleetAppsManagementWaiters(FleetAppsManagementClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetRequest, GetFleetResponse> ForFleet(GetFleetRequest request, params Fleet.LifecycleStateEnum[] targetStates)
        {
            return this.ForFleet(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetRequest, GetFleetResponse> ForFleet(GetFleetRequest request, WaiterConfiguration config, params Fleet.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetFleetRequest, GetFleetResponse>(
                request,
                request => client.GetFleet(request),
                response => targetStates.Contains(response.Fleet.LifecycleState.Value),
                targetStates.Contains(Fleet.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetFleetRequest, GetFleetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetCredentialRequest, GetFleetCredentialResponse> ForFleetCredential(GetFleetCredentialRequest request, params FleetCredential.LifecycleStateEnum[] targetStates)
        {
            return this.ForFleetCredential(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetCredentialRequest, GetFleetCredentialResponse> ForFleetCredential(GetFleetCredentialRequest request, WaiterConfiguration config, params FleetCredential.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetFleetCredentialRequest, GetFleetCredentialResponse>(
                request,
                request => client.GetFleetCredential(request),
                response => targetStates.Contains(response.FleetCredential.LifecycleState.Value),
                targetStates.Contains(FleetCredential.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetFleetCredentialRequest, GetFleetCredentialResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetPropertyRequest, GetFleetPropertyResponse> ForFleetProperty(GetFleetPropertyRequest request, params FleetProperty.LifecycleStateEnum[] targetStates)
        {
            return this.ForFleetProperty(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetPropertyRequest, GetFleetPropertyResponse> ForFleetProperty(GetFleetPropertyRequest request, WaiterConfiguration config, params FleetProperty.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetFleetPropertyRequest, GetFleetPropertyResponse>(
                request,
                request => client.GetFleetProperty(request),
                response => targetStates.Contains(response.FleetProperty.LifecycleState.Value),
                targetStates.Contains(FleetProperty.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetFleetPropertyRequest, GetFleetPropertyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetResourceRequest, GetFleetResourceResponse> ForFleetResource(GetFleetResourceRequest request, params FleetResource.LifecycleStateEnum[] targetStates)
        {
            return this.ForFleetResource(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFleetResourceRequest, GetFleetResourceResponse> ForFleetResource(GetFleetResourceRequest request, WaiterConfiguration config, params FleetResource.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetFleetResourceRequest, GetFleetResourceResponse>(
                request,
                request => client.GetFleetResource(request),
                response => targetStates.Contains(response.FleetResource.LifecycleState.Value),
                targetStates.Contains(FleetResource.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetFleetResourceRequest, GetFleetResourceResponse>(config, agent);
        }
    }
}
