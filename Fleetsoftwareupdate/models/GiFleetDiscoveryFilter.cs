/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.FleetsoftwareupdateService.Models
{
    /// <summary>
    /// Possible Discovery filters.
    /// 
    /// </summary>
    [JsonConverter(typeof(GiFleetDiscoveryFilterModelConverter))]
    public class GiFleetDiscoveryFilter 
    {
                ///
        /// <value>
        /// Type of filters supported for GI targets discovery.
        /// 
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "COMPARTMENT_ID")]
            CompartmentId,
            [EnumMember(Value = "VERSION")]
            Version,
            [EnumMember(Value = "FREEFORM_TAG")]
            FreeformTag,
            [EnumMember(Value = "DEFINED_TAG")]
            DefinedTag,
            [EnumMember(Value = "RESOURCE_ID")]
            ResourceId
        };

                ///
        /// <value>
        /// INCLUDE or EXCLUDE the filter results in the discovery for GI targets.
        /// Supported for 'FSUCOLLECTION' RESOURCE_ID filter only.
        /// 
        /// </value>
        ///
        public enum ModeEnum {
            [EnumMember(Value = "INCLUDE")]
            Include,
            [EnumMember(Value = "EXCLUDE")]
            Exclude
        };

        /// <value>
        /// INCLUDE or EXCLUDE the filter results in the discovery for GI targets.
        /// Supported for 'FSUCOLLECTION' RESOURCE_ID filter only.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "mode")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ModeEnum> Mode { get; set; }
        
    }

    public class GiFleetDiscoveryFilterModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(GiFleetDiscoveryFilter);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(GiFleetDiscoveryFilter);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "DEFINED_TAG":
                    obj = new GiDefinedTagsFilter();
                    break;
                case "COMPARTMENT_ID":
                    obj = new GiCompartmentIdFilter();
                    break;
                case "FREEFORM_TAG":
                    obj = new GiFreeformTagsFilter();
                    break;
                case "RESOURCE_ID":
                    obj = new GiResourceIdFilter();
                    break;
                case "VERSION":
                    obj = new GiVersionFilter();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under GiFleetDiscoveryFilter! Returning null value.");
            }
            return obj;
        }
    }
}
