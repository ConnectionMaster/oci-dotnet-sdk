/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.FleetsoftwareupdateService.Models;
using Oci.FleetsoftwareupdateService.Requests;
using Oci.FleetsoftwareupdateService.Responses;

namespace Oci.FleetsoftwareupdateService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of FleetSoftwareUpdate.
    /// </summary>
    public class FleetSoftwareUpdateWaiters
    {
        private readonly FleetSoftwareUpdateClient client;

        public  FleetSoftwareUpdateWaiters(FleetSoftwareUpdateClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuActionRequest, GetFsuActionResponse> ForFsuAction(GetFsuActionRequest request, params ActionLifecycleStates[] targetStates)
        {
            return this.ForFsuAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuActionRequest, GetFsuActionResponse> ForFsuAction(GetFsuActionRequest request, WaiterConfiguration config, params ActionLifecycleStates[] targetStates)
        {
            var agent = new WaiterAgent<GetFsuActionRequest, GetFsuActionResponse>(
                request,
                request => client.GetFsuAction(request),
                response => targetStates.Contains(response.FsuAction.LifecycleState.Value),
                targetStates.Contains(ActionLifecycleStates.Deleted)
            );
            return new Waiter<GetFsuActionRequest, GetFsuActionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuCollectionRequest, GetFsuCollectionResponse> ForFsuCollection(GetFsuCollectionRequest request, params CollectionLifecycleStates[] targetStates)
        {
            return this.ForFsuCollection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuCollectionRequest, GetFsuCollectionResponse> ForFsuCollection(GetFsuCollectionRequest request, WaiterConfiguration config, params CollectionLifecycleStates[] targetStates)
        {
            var agent = new WaiterAgent<GetFsuCollectionRequest, GetFsuCollectionResponse>(
                request,
                request => client.GetFsuCollection(request),
                response => targetStates.Contains(response.FsuCollection.LifecycleState.Value),
                targetStates.Contains(CollectionLifecycleStates.Deleted)
            );
            return new Waiter<GetFsuCollectionRequest, GetFsuCollectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuCycleRequest, GetFsuCycleResponse> ForFsuCycle(GetFsuCycleRequest request, params CycleLifecycleStates[] targetStates)
        {
            return this.ForFsuCycle(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuCycleRequest, GetFsuCycleResponse> ForFsuCycle(GetFsuCycleRequest request, WaiterConfiguration config, params CycleLifecycleStates[] targetStates)
        {
            var agent = new WaiterAgent<GetFsuCycleRequest, GetFsuCycleResponse>(
                request,
                request => client.GetFsuCycle(request),
                response => targetStates.Contains(response.FsuCycle.LifecycleState.Value),
                targetStates.Contains(CycleLifecycleStates.Deleted)
            );
            return new Waiter<GetFsuCycleRequest, GetFsuCycleResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuDiscoveryRequest, GetFsuDiscoveryResponse> ForFsuDiscovery(GetFsuDiscoveryRequest request, params DiscoveryLifecycleStates[] targetStates)
        {
            return this.ForFsuDiscovery(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuDiscoveryRequest, GetFsuDiscoveryResponse> ForFsuDiscovery(GetFsuDiscoveryRequest request, WaiterConfiguration config, params DiscoveryLifecycleStates[] targetStates)
        {
            var agent = new WaiterAgent<GetFsuDiscoveryRequest, GetFsuDiscoveryResponse>(
                request,
                request => client.GetFsuDiscovery(request),
                response => targetStates.Contains(response.FsuDiscovery.LifecycleState.Value),
                targetStates.Contains(DiscoveryLifecycleStates.Deleted)
            );
            return new Waiter<GetFsuDiscoveryRequest, GetFsuDiscoveryResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuJobRequest, GetFsuJobResponse> ForFsuJob(GetFsuJobRequest request, params JobLifecycleStates[] targetStates)
        {
            return this.ForFsuJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetFsuJobRequest, GetFsuJobResponse> ForFsuJob(GetFsuJobRequest request, WaiterConfiguration config, params JobLifecycleStates[] targetStates)
        {
            var agent = new WaiterAgent<GetFsuJobRequest, GetFsuJobResponse>(
                request,
                request => client.GetFsuJob(request),
                response => targetStates.Contains(response.FsuJob.LifecycleState.Value),
                targetStates.Contains(JobLifecycleStates.Terminated)
            );
            return new Waiter<GetFsuJobRequest, GetFsuJobResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
