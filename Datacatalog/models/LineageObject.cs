/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatacatalogService.Models
{
    /// <summary>
    /// Object describing an individual element of object lineage.
    /// </summary>
    public class LineageObject 
    {
        
        /// <value>
        /// Key of the object, such as an entity, about which this lineage applies.
        /// </value>
        [JsonProperty(PropertyName = "objectKey")]
        public string ObjectKey { get; set; }
        
        /// <value>
        /// Display name of the object.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// Detailed description of the object.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Indicates if intra-lineage is available for this given object. If yes, drill-down can be requested for
        /// this object.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isIntraLineageAvailable")]
        public System.Nullable<bool> IsIntraLineageAvailable { get; set; }
        
        /// <value>
        /// Key of the parent object for this object.
        /// </value>
        [JsonProperty(PropertyName = "parentKey")]
        public string ParentKey { get; set; }
        
        /// <value>
        /// Full path of the parent object.
        /// </value>
        [JsonProperty(PropertyName = "parentPath")]
        public string ParentPath { get; set; }
        
        /// <value>
        /// The time that this object was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The time that this object was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// Type name of the object. Type keys can be found via the '/types' endpoint.
        /// </value>
        [JsonProperty(PropertyName = "typeName")]
        public string TypeName { get; set; }
        
        /// <value>
        /// Type key of the object. Type keys can be found via the '/types' endpoint.
        /// </value>
        [JsonProperty(PropertyName = "typeKey")]
        public string TypeKey { get; set; }
        
        /// <value>
        /// A map of maps that contains the properties which are specific to the entity type. Each entity type
        /// definition defines it's set of required and optional properties. The map keys are category names and the
        /// values are maps of property name to property value. Every property is contained inside of a category. Most
        /// data entities have required properties within the \"default\" category.
        /// Example: {&quot;properties&quot;: { &quot;default&quot;: { &quot;key1&quot;: &quot;value1&quot;}}}
        /// </value>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> Properties { get; set; }
        
    }
}
