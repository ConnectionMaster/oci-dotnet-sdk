/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatacatalogService.Models
{
    /// <summary>
    /// A job execution is a unit of work being executed on behalf of a job.
    /// </summary>
    public class JobExecution 
    {
        
        /// <value>
        /// Unique key of the job execution resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Key is required.")]
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }
        
        /// <value>
        /// The unique key of the parent job.
        /// </value>
        [JsonProperty(PropertyName = "jobKey")]
        public string JobKey { get; set; }
        
        /// <value>
        /// Type of the job execution.
        /// </value>
        [JsonProperty(PropertyName = "jobType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<JobType> JobType { get; set; }
        
        /// <value>
        /// Sub-type of this job execution.
        /// </value>
        [JsonProperty(PropertyName = "subType")]
        public string SubType { get; set; }
        
        /// <value>
        /// The unique key of the parent execution or null if this job execution has no parent.
        /// </value>
        [JsonProperty(PropertyName = "parentKey")]
        public string ParentKey { get; set; }
        
        /// <value>
        /// The unique key of the triggering external scheduler resource or null if this job execution is not externally triggered.
        /// </value>
        [JsonProperty(PropertyName = "scheduleInstanceKey")]
        public string ScheduleInstanceKey { get; set; }
        
        /// <value>
        /// Status of the job execution, such as running, paused, or completed.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<JobExecutionState> LifecycleState { get; set; }
        
        /// <value>
        /// The date and time the job execution was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// Example: 2019-03-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// Time that job execution started. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </value>
        [JsonProperty(PropertyName = "timeStarted")]
        public System.Nullable<System.DateTime> TimeStarted { get; set; }
        
        /// <value>
        /// Time that the job execution ended or null if it hasn't yet completed.
        /// An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeEnded")]
        public System.Nullable<System.DateTime> TimeEnded { get; set; }
        
        /// <value>
        /// Error code returned from the job execution or null if job is still running or didn't return an error.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "errorCode")]
        public string ErrorCode { get; set; }
        
        /// <value>
        /// Error message returned from the job execution or null if job is still running or didn't return an error.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage { get; set; }
        
        /// <value>
        /// Process identifier related to the job execution if the job is an external job.
        /// </value>
        [JsonProperty(PropertyName = "processKey")]
        public string ProcessKey { get; set; }
        
        /// <value>
        /// If the job is an external process, then a URL of the job for accessing this resource and its status.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "externalUrl")]
        public string ExternalUrl { get; set; }
        
        /// <value>
        /// An identifier used for log message correlation.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "eventKey")]
        public string EventKey { get; set; }
        
        /// <value>
        /// The key of the associated data entity resource.
        /// </value>
        [JsonProperty(PropertyName = "dataEntityKey")]
        public string DataEntityKey { get; set; }
        
        /// <value>
        /// OCID of the user who created the job execution.
        /// </value>
        [JsonProperty(PropertyName = "createdById")]
        public string CreatedById { get; set; }
        
        /// <value>
        /// OCID of the user who updated the job execution.
        /// </value>
        [JsonProperty(PropertyName = "updatedBy")]
        public string UpdatedBy { get; set; }
        
        /// <value>
        /// URI to the job execution instance in the API.
        /// </value>
        [JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }
        
        /// <value>
        /// A map of maps that contains the execution context properties which are specific to a job execution. Each job
        /// execution may define it's set of required and optional properties. The map keys are category names and the
        /// values are maps of property name to property value. Every property is contained inside of a category. Most
        /// job executions have required properties within the \"default\" category.
        /// Example: {&quot;properties&quot;: { &quot;default&quot;: { &quot;host&quot;: &quot;host1&quot;, &quot;port&quot;: &quot;1521&quot;, &quot;database&quot;: &quot;orcl&quot;}}}
        /// </value>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> Properties { get; set; }
        
    }
}
