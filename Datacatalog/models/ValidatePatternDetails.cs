/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatacatalogService.Models
{
    /// <summary>
    /// Validate pattern using the expression and file list.
    /// </summary>
    public class ValidatePatternDetails 
    {
        
        /// <value>
        /// Input string which drives the selection process, allowing for fine-grained control using qualifiers.
        /// Refer to the user documentation for details of the format and examples. A pattern cannot include both
        /// a prefix and an expression.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "expression")]
        public string Expression { get; set; }
        
        /// <value>
        /// Input string which drives the selection process.
        /// Refer to the user documentation for details of the format and examples. A pattern cannot include both
        /// a prefix and an expression.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "filePathPrefix")]
        public string FilePathPrefix { get; set; }
        
        /// <value>
        /// List of file paths against which the pattern can be tried, as a check. This documents, for reference
        /// purposes, some example objects a pattern is meant to work with.
        /// <br/>
        /// If provided with the request,this overrides the list which already exists as part of the pattern, if any.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "checkFilePathList")]
        public System.Collections.Generic.List<string> CheckFilePathList { get; set; }
        
        /// <value>
        /// The maximum number of UNMATCHED files, in checkFilePathList, above which the check fails.
        /// Optional, if checkFilePathList is provided.
        /// <br/>
        /// If provided with the request, this overrides the value which already exists as part of the pattern, if any.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "checkFailureLimit")]
        public System.Nullable<int> CheckFailureLimit { get; set; }
        
    }
}
