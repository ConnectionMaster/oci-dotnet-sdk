/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatacatalogService.Models
{
    /// <summary>
    /// Properties used in connection update operations.
    /// </summary>
    public class UpdateConnectionDetails 
    {
        
        /// <value>
        /// A description of the connection.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// A user-friendly display name. Does not have to be unique, and it's changeable.
        /// Avoid entering confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The list of customized properties along with the values for this object
        /// </value>
        [JsonProperty(PropertyName = "customPropertyMembers")]
        public System.Collections.Generic.List<CustomPropertySetUsage> CustomPropertyMembers { get; set; }
        
        /// <value>
        /// A map of maps that contains the properties which are specific to the connection type. Each connection type
        /// definition defines it's set of required and optional properties. The map keys are category names and the
        /// values are maps of property name to property value. Every property is contained inside of a category. Most
        /// connections have required properties within the \"default\" category. To determine the set of optional and
        /// required properties for a connection type, a query can be done on '/types?type=connection' that returns a
        /// collection of all connection types. The appropriate connection type, which will include definitions of all
        /// of it's properties, can be identified from this collection.
        /// Example: {&quot;properties&quot;: { &quot;default&quot;: { &quot;username&quot;: &quot;user1&quot;}}}
        /// </value>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> Properties { get; set; }
        
        /// <value>
        /// A map of maps that contains the encrypted values for sensitive properties which are specific to the
        /// connection type. Each connection type definition defines it's set of required and optional properties.
        /// The map keys are category names and the values are maps of property name to property value. Every property is
        /// contained inside of a category. Most connections have required properties within the \"default\" category.
        /// To determine the set of optional and required properties for a connection type, a query can be done
        /// on '/types?type=connection' that returns a collection of all connection types. The appropriate connection
        /// type, which will include definitions of all of it's properties, can be identified from this collection.
        /// Example: {&quot;encProperties&quot;: { &quot;default&quot;: { &quot;password&quot;: &quot;pwd&quot;}}}
        /// </value>
        [JsonProperty(PropertyName = "encProperties")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> EncProperties { get; set; }
        
        /// <value>
        /// Indicates whether this connection is the default connection.
        /// </value>
        [JsonProperty(PropertyName = "isDefault")]
        public System.Nullable<bool> IsDefault { get; set; }
        
    }
}
