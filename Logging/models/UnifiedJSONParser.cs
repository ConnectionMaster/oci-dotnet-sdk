/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoggingService.Models
{
    /// <summary>
    /// JSON parser.
    /// </summary>
    public class UnifiedJSONParser : UnifiedAgentParser
    {
                ///
        /// <value>
        /// JSON parser time type.
        /// </value>
        ///
        public enum TimeTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "FLOAT")]
            Float,
            [EnumMember(Value = "UNIXTIME")]
            Unixtime,
            [EnumMember(Value = "STRING")]
            String
        };

        /// <value>
        /// JSON parser time type.
        /// </value>
        [JsonProperty(PropertyName = "timeType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<TimeTypeEnum> TimeType { get; set; }
        
        /// <value>
        /// Process time value using the specified format.
        /// </value>
        [JsonProperty(PropertyName = "timeFormat")]
        public string TimeFormat { get; set; }
        
        /// <value>
        /// If true, a separator parameter can be further defined.
        /// </value>
        [JsonProperty(PropertyName = "parseNested")]
        public System.Nullable<bool> ParseNested { get; set; }
        
        /// <value>
        /// Keys of adjacent levels are joined by the separator.
        /// </value>
        [JsonProperty(PropertyName = "separator")]
        public string Separator { get; set; }
        
        [JsonProperty(PropertyName = "parserType")]
        private readonly string parserType = "JSON";
    }
}
