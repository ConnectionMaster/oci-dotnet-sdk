/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoggingService.Models
{
    /// <summary>
    /// Logging parser filter object.
    /// Ref: https://docs.fluentd.org/filter/parser
    /// 
    /// </summary>
    public class UnifiedAgentParserFilter : UnifiedAgentLoggingFilter
    {
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Parser is required.")]
        [JsonProperty(PropertyName = "parser")]
        public UnifiedAgentParser Parser { get; set; }
        
        /// <value>
        /// The field name in the record to parse.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "KeyName is required.")]
        [JsonProperty(PropertyName = "keyName")]
        public string KeyName { get; set; }
        
        /// <value>
        /// If true, keep the original event time in the parsed result.
        /// </value>
        [JsonProperty(PropertyName = "reserveTime")]
        public System.Nullable<bool> ReserveTime { get; set; }
        
        /// <value>
        /// If true, keep the original key-value pair in the parsed result.
        /// </value>
        [JsonProperty(PropertyName = "reserveData")]
        public System.Nullable<bool> ReserveData { get; set; }
        
        /// <value>
        /// If true, remove the keyName field when parsing is succeeded.
        /// </value>
        [JsonProperty(PropertyName = "removeKeyNameField")]
        public System.Nullable<bool> RemoveKeyNameField { get; set; }
        
        /// <value>
        /// If true, the invalid string is replaced with safe characters and is re-parsed.
        /// </value>
        [JsonProperty(PropertyName = "replaceInvalidSequence")]
        public System.Nullable<bool> ReplaceInvalidSequence { get; set; }
        
        /// <value>
        /// Store the parsed values with the specified key name prefix.
        /// </value>
        [JsonProperty(PropertyName = "injectKeyPrefix")]
        public string InjectKeyPrefix { get; set; }
        
        /// <value>
        /// Store the parsed values as a hash value in a field.
        /// </value>
        [JsonProperty(PropertyName = "hashValueField")]
        public string HashValueField { get; set; }
        
        /// <value>
        /// If true, emit invalid record to @ERROR label. Invalid cases are: 1) key does not exist; 2) the format
        /// does not match; or 3) an unexpected error. You can rescue unexpected format logs in the @ERROR lable.
        /// If you want to ignore these errors, set this to false.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "emitInvalidRecordToError")]
        public System.Nullable<bool> EmitInvalidRecordToError { get; set; }
        
        [JsonProperty(PropertyName = "filterType")]
        private readonly string filterType = "PARSER_FILTER";
    }
}
