/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApigatewayService.Models
{
    /// <summary>
    /// Send the request to an HTTP backend.
    /// 
    /// </summary>
    public class HTTPBackend : ApiSpecificationRouteBackend
    {
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Url is required.")]
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }
        
        /// <value>
        /// Defines a timeout for establishing a connection with a proxied server.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "connectTimeoutInSeconds")]
        public System.Nullable<float> ConnectTimeoutInSeconds { get; set; }
        
        /// <value>
        /// Defines a timeout for reading a response from the proxied server.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "readTimeoutInSeconds")]
        public System.Nullable<float> ReadTimeoutInSeconds { get; set; }
        
        /// <value>
        /// Defines a timeout for transmitting a request to the proxied server.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "sendTimeoutInSeconds")]
        public System.Nullable<float> SendTimeoutInSeconds { get; set; }
        
        /// <value>
        /// Defines whether or not to uphold SSL verification.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSslVerifyDisabled")]
        public System.Nullable<bool> IsSslVerifyDisabled { get; set; }
        
        [JsonProperty(PropertyName = "type")]
        private readonly string type = "HTTP_BACKEND";
    }
}
