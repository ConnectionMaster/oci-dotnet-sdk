/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApigatewayService.Models
{
    /// <summary>
    /// Policy to specify OAuth2 flow configuration.
    /// 
    /// </summary>
    public class OAuth2ResponseValidationFailurePolicy : ValidationFailurePolicy
    {
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ClientDetails is required.")]
        [JsonProperty(PropertyName = "clientDetails")]
        public ClientAppDetails ClientDetails { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SourceUriDetails is required.")]
        [JsonProperty(PropertyName = "sourceUriDetails")]
        public SourceUriDetails SourceUriDetails { get; set; }
        
        /// <value>
        /// List of scopes.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Scopes is required.")]
        [JsonProperty(PropertyName = "scopes")]
        public System.Collections.Generic.List<string> Scopes { get; set; }
        
        /// <value>
        /// The duration for which the OAuth2 success token should be cached before it is
        /// fetched again.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "maxExpiryDurationInHours")]
        public System.Nullable<int> MaxExpiryDurationInHours { get; set; }
        
        /// <value>
        /// Defines whether or not to use cookies for session maintenance.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "useCookiesForSession")]
        public System.Nullable<bool> UseCookiesForSession { get; set; }
        
        /// <value>
        /// Defines whether or not to use cookies for OAuth2 intermediate steps.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "useCookiesForIntermediateSteps")]
        public System.Nullable<bool> UseCookiesForIntermediateSteps { get; set; }
        
        /// <value>
        /// Defines whether or not to support PKCE.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "usePkce")]
        public System.Nullable<bool> UsePkce { get; set; }
                ///
        /// <value>
        /// Response Type.
        /// </value>
        ///
        public enum ResponseTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CODE")]
            Code
        };

        /// <value>
        /// Response Type.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResponseType is required.")]
        [JsonProperty(PropertyName = "responseType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ResponseTypeEnum> ResponseType { get; set; }
        
        /// <value>
        /// The path to be used as fallback after OAuth2.
        /// </value>
        [JsonProperty(PropertyName = "fallbackRedirectPath")]
        public string FallbackRedirectPath { get; set; }
        
        /// <value>
        /// The path to be used as logout.
        /// </value>
        [JsonProperty(PropertyName = "logoutPath")]
        public string LogoutPath { get; set; }
        
        [JsonProperty(PropertyName = "type")]
        private readonly string type = "OAUTH2";
    }
}
