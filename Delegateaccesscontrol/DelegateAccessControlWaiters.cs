/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.DelegateaccesscontrolService.Models;
using Oci.DelegateaccesscontrolService.Requests;
using Oci.DelegateaccesscontrolService.Responses;

namespace Oci.DelegateaccesscontrolService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of DelegateAccessControl.
    /// </summary>
    public class DelegateAccessControlWaiters
    {
        private readonly DelegateAccessControlClient client;

        public  DelegateAccessControlWaiters(DelegateAccessControlClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegatedResourceAccessRequestRequest, GetDelegatedResourceAccessRequestResponse> ForDelegatedResourceAccessRequest(GetDelegatedResourceAccessRequestRequest request, params DelegatedResourceAccessRequest.LifecycleStateEnum[] targetStates)
        {
            return this.ForDelegatedResourceAccessRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegatedResourceAccessRequestRequest, GetDelegatedResourceAccessRequestResponse> ForDelegatedResourceAccessRequest(GetDelegatedResourceAccessRequestRequest request, WaiterConfiguration config, params DelegatedResourceAccessRequest.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDelegatedResourceAccessRequestRequest, GetDelegatedResourceAccessRequestResponse>(
                request,
                request => client.GetDelegatedResourceAccessRequest(request),
                response => targetStates.Contains(response.DelegatedResourceAccessRequest.LifecycleState.Value)
            );
            return new Waiter<GetDelegatedResourceAccessRequestRequest, GetDelegatedResourceAccessRequestResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegationControlRequest, GetDelegationControlResponse> ForDelegationControl(GetDelegationControlRequest request, params DelegationControl.LifecycleStateEnum[] targetStates)
        {
            return this.ForDelegationControl(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegationControlRequest, GetDelegationControlResponse> ForDelegationControl(GetDelegationControlRequest request, WaiterConfiguration config, params DelegationControl.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDelegationControlRequest, GetDelegationControlResponse>(
                request,
                request => client.GetDelegationControl(request),
                response => targetStates.Contains(response.DelegationControl.LifecycleState.Value),
                targetStates.Contains(DelegationControl.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDelegationControlRequest, GetDelegationControlResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegationSubscriptionRequest, GetDelegationSubscriptionResponse> ForDelegationSubscription(GetDelegationSubscriptionRequest request, params DelegationSubscription.LifecycleStateEnum[] targetStates)
        {
            return this.ForDelegationSubscription(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDelegationSubscriptionRequest, GetDelegationSubscriptionResponse> ForDelegationSubscription(GetDelegationSubscriptionRequest request, WaiterConfiguration config, params DelegationSubscription.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDelegationSubscriptionRequest, GetDelegationSubscriptionResponse>(
                request,
                request => client.GetDelegationSubscription(request),
                response => targetStates.Contains(response.DelegationSubscription.LifecycleState.Value),
                targetStates.Contains(DelegationSubscription.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDelegationSubscriptionRequest, GetDelegationSubscriptionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceProviderRequest, GetServiceProviderResponse> ForServiceProvider(GetServiceProviderRequest request, params ServiceProvider.LifecycleStateEnum[] targetStates)
        {
            return this.ForServiceProvider(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceProviderRequest, GetServiceProviderResponse> ForServiceProvider(GetServiceProviderRequest request, WaiterConfiguration config, params ServiceProvider.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetServiceProviderRequest, GetServiceProviderResponse>(
                request,
                request => client.GetServiceProvider(request),
                response => targetStates.Contains(response.ServiceProvider.LifecycleState.Value),
                targetStates.Contains(ServiceProvider.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetServiceProviderRequest, GetServiceProviderResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceProviderActionRequest, GetServiceProviderActionResponse> ForServiceProviderAction(GetServiceProviderActionRequest request, params ServiceProviderAction.LifecycleStateEnum[] targetStates)
        {
            return this.ForServiceProviderAction(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceProviderActionRequest, GetServiceProviderActionResponse> ForServiceProviderAction(GetServiceProviderActionRequest request, WaiterConfiguration config, params ServiceProviderAction.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetServiceProviderActionRequest, GetServiceProviderActionResponse>(
                request,
                request => client.GetServiceProviderAction(request),
                response => targetStates.Contains(response.ServiceProviderAction.LifecycleState.Value)
            );
            return new Waiter<GetServiceProviderActionRequest, GetServiceProviderActionResponse>(config, agent);
        }
    }
}
