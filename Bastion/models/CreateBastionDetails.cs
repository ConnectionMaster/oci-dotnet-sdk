/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.BastionService.Models
{
    /// <summary>
    /// The configuration details for a new bastion. A bastion provides secured, public access to target resources in the cloud that you cannot otherwise reach from the internet. A bastion resides in a public subnet and establishes the network infrastructure needed to connect a user to a target resource in a private subnet.
    /// </summary>
    public class CreateBastionDetails 
    {
        
        /// <value>
        /// The type of bastion. Use `standard`.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "BastionType is required.")]
        [JsonProperty(PropertyName = "bastionType")]
        public string BastionType { get; set; }
        
        /// <value>
        /// The name of the bastion, which can't be changed after creation.
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// The unique identifier (OCID) of the compartment where the bastion is located.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The unique identifier (OCID) of the subnet that the bastion connects to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TargetSubnetId is required.")]
        [JsonProperty(PropertyName = "targetSubnetId")]
        public string TargetSubnetId { get; set; }
        
        /// <value>
        /// The phonebook entry of the customer's team, which can't be changed after creation. Not applicable to `standard` bastions.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "phoneBookEntry")]
        public string PhoneBookEntry { get; set; }
        
        /// <value>
        /// A list of IP addresses of the hosts that the bastion has access to. Not applicable to `standard` bastions.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "staticJumpHostIpAddresses")]
        public System.Collections.Generic.List<string> StaticJumpHostIpAddresses { get; set; }
        
        /// <value>
        /// A list of address ranges in CIDR notation that you want to allow to connect to sessions hosted by this bastion.
        /// </value>
        [JsonProperty(PropertyName = "clientCidrBlockAllowList")]
        public System.Collections.Generic.List<string> ClientCidrBlockAllowList { get; set; }
        
        /// <value>
        /// The maximum amount of time that any session on the bastion can remain active.
        /// </value>
        [JsonProperty(PropertyName = "maxSessionTtlInSeconds")]
        public System.Nullable<int> MaxSessionTtlInSeconds { get; set; }
        
        /// <value>
        /// The desired dns proxy status of the bastion.
        /// </value>
        [JsonProperty(PropertyName = "dnsProxyStatus")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<BastionDnsProxyStatus> DnsProxyStatus { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
