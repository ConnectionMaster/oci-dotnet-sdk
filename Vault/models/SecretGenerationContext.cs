/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.VaultService.Models
{
    /// <summary>
    /// Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
    /// </summary>
    [JsonConverter(typeof(SecretGenerationContextModelConverter))]
    public class SecretGenerationContext 
    {
                ///
        /// <value>
        /// Name of the predefined secret generation type.
        /// </value>
        ///
        public enum GenerationTypeEnum {
            [EnumMember(Value = "PASSPHRASE")]
            Passphrase,
            [EnumMember(Value = "SSH_KEY")]
            SshKey,
            [EnumMember(Value = "BYTES")]
            Bytes
        };

        
        /// <value>
        /// SecretTemplate captures structure in which customer wants to store secrets. This is optional and a default structure is available for each secret type. 
        /// The template can have any structure with static values that are not generated. Within the template, you can insert predefined placeholders to store secrets. 
        /// These placeholders are later replaced with the generated content and saved as a Base64 encoded content.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "secretTemplate")]
        public string SecretTemplate { get; set; }
        
    }

    public class SecretGenerationContextModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(SecretGenerationContext);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(SecretGenerationContext);
            var discriminator = jsonObject["generationType"].Value<string>();
            switch (discriminator)
            {
                case "PASSPHRASE":
                    obj = new PassphraseGenerationContext();
                    break;
                case "SSH_KEY":
                    obj = new SshKeyGenerationContext();
                    break;
                case "BYTES":
                    obj = new BytesGenerationContext();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under SecretGenerationContext! Returning null value.");
            }
            return obj;
        }
    }
}
