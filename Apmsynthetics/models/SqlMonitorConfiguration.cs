/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApmsyntheticsService.Models
{
    /// <summary>
    /// Request configuration details for the SQL monitor type.
    /// </summary>
    public class SqlMonitorConfiguration : MonitorConfiguration
    {
        
        /// <value>
        /// Database type.
        /// </value>
        [JsonProperty(PropertyName = "databaseType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DatabaseType> DatabaseType { get; set; }
        
        /// <value>
        /// SQL query to be executed.
        /// </value>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }
        
        [JsonProperty(PropertyName = "databaseAuthenticationDetails")]
        public BasicAuthenticationDetails DatabaseAuthenticationDetails { get; set; }
        
        /// <value>
        /// Database role.
        /// </value>
        [JsonProperty(PropertyName = "databaseRole")]
        public string DatabaseRole { get; set; }
        
        /// <value>
        /// Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        /// </value>
        [JsonProperty(PropertyName = "databaseConnectionType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DatabaseConnectionType> DatabaseConnectionType { get; set; }
        
        /// <value>
        /// Database connection string.
        /// </value>
        [JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString { get; set; }
        
        [JsonProperty(PropertyName = "databaseWalletDetails")]
        public DatabaseWalletDetails DatabaseWalletDetails { get; set; }
        
        [JsonProperty(PropertyName = "configType")]
        private readonly string configType = "SQL_CONFIG";
    }
}
