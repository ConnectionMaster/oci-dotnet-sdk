/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApmsyntheticsService.Models
{
    /// <summary>
    /// Request configuration details for the DNS Server monitor type.
    /// </summary>
    public class DnsServerMonitorConfiguration : MonitorConfiguration
    {
        
        /// <value>
        /// DNS record type.
        /// </value>
        [JsonProperty(PropertyName = "recordType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DnsRecordType> RecordType { get; set; }
        
        /// <value>
        /// Name of the server that will be used to perform DNS lookup.
        /// </value>
        [JsonProperty(PropertyName = "nameServer")]
        public string NameServer { get; set; }
        
        [JsonProperty(PropertyName = "networkConfiguration")]
        public NetworkConfiguration NetworkConfiguration { get; set; }
        
        /// <value>
        /// Type of protocol.
        /// </value>
        [JsonProperty(PropertyName = "protocol")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DnsTransportProtocol> Protocol { get; set; }
        
        /// <value>
        /// Verify response content against regular expression based string.
        /// If response content does not match the verifyResponseContent value, then it will be considered a failure.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "verifyResponseContent")]
        public string VerifyResponseContent { get; set; }
        
        /// <value>
        /// If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        /// </value>
        [JsonProperty(PropertyName = "isQueryRecursive")]
        public System.Nullable<bool> IsQueryRecursive { get; set; }
        
        [JsonProperty(PropertyName = "configType")]
        private readonly string configType = "DNS_SERVER_CONFIG";
    }
}
