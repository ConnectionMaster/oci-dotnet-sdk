/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.JmsutilsService.Models
{
    /// <summary>
    /// The target for the Java Migration Analysis
    /// </summary>
    public class JavaMigrationAnalysisTarget 
    {
        
        /// <value>
        /// Name of the analysis project.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AnalysisProjectName is required.")]
        [JsonProperty(PropertyName = "analysisProjectName")]
        public string AnalysisProjectName { get; set; }
        
        /// <value>
        /// Object storage paths to the input files applications to be analysed.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InputApplicationsObjectStoragePaths is required.")]
        [JsonProperty(PropertyName = "inputApplicationsObjectStoragePaths")]
        public System.Collections.Generic.List<string> InputApplicationsObjectStoragePaths { get; set; }
        
        /// <value>
        /// Version of the target JDKs.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TargetJdkVersions is required.")]
        [JsonProperty(PropertyName = "targetJdkVersions")]
        public System.Collections.Generic.List<string> TargetJdkVersions { get; set; }
        
        /// <value>
        /// Package prefixes to be included from the migration analysis. Either this or excludePackagePrefixes can be specified.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "includePackagePrefixes")]
        public System.Collections.Generic.List<string> IncludePackagePrefixes { get; set; }
        
        /// <value>
        /// Package prefixes to be excluded from the migration analysis. Either this or includePackagePrefixes can be specified.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "excludePackagePrefixes")]
        public System.Collections.Generic.List<string> ExcludePackagePrefixes { get; set; }
        
    }
}
