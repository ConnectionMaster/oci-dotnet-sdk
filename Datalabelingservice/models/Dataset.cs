/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatalabelingService.Models
{
    /// <summary>
    /// A dataset is a logical collection of records. The dataset contains all the information necessary to describe a record's source, format, type of annotations allowed on these records, and labels allowed on annotations.
    /// 
    /// </summary>
    public class Dataset 
    {
        
        /// <value>
        /// The OCID of the Dataset.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// A user-friendly display name for the resource.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The OCID of the compartment of the resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// A user provided description of the dataset
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The date and time the resource was created, in the timestamp format defined by RFC3339.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeUpdated is required.")]
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
                ///
        /// <value>
        /// The state of a dataset.
        /// CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling.
        /// ACTIVE   - The dataset is ready for labeling.
        /// UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE.
        /// NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention.
        /// DELETING - The dataset and its related resources are being deleted.
        /// DELETED  - The dataset has been deleted and is no longer available.
        /// FAILED   - The dataset has failed due to validation or other errors.
        /// 
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "NEEDS_ATTENTION")]
            NeedsAttention,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The state of a dataset.
        /// CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling.
        /// ACTIVE   - The dataset is ready for labeling.
        /// UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE.
        /// NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention.
        /// DELETING - The dataset and its related resources are being deleted.
        /// DELETED  - The dataset has been deleted and is no longer available.
        /// FAILED   - The dataset has failed due to validation or other errors.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleDetails")]
        public string LifecycleDetails { get; set; }
                ///
        /// <value>
        /// The sub-state of the dataset.
        /// IMPORT_DATASET - The dataset is being imported.
        /// 
        /// </value>
        ///
        public enum LifecycleSubstateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "IMPORT_DATASET")]
            ImportDataset
        };

        /// <value>
        /// The sub-state of the dataset.
        /// IMPORT_DATASET - The dataset is being imported.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "lifecycleSubstate")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleSubstateEnum> LifecycleSubstate { get; set; }
        
        /// <value>
        /// The annotation format name required for labeling records.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AnnotationFormat is required.")]
        [JsonProperty(PropertyName = "annotationFormat")]
        public string AnnotationFormat { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DatasetSourceDetails is required.")]
        [JsonProperty(PropertyName = "datasetSourceDetails")]
        public DatasetSourceDetails DatasetSourceDetails { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DatasetFormatDetails is required.")]
        [JsonProperty(PropertyName = "datasetFormatDetails")]
        public DatasetFormatDetails DatasetFormatDetails { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LabelSet is required.")]
        [JsonProperty(PropertyName = "labelSet")]
        public LabelSet LabelSet { get; set; }
        
        [JsonProperty(PropertyName = "initialRecordGenerationConfiguration")]
        public InitialRecordGenerationConfiguration InitialRecordGenerationConfiguration { get; set; }
        
        [JsonProperty(PropertyName = "initialImportDatasetConfiguration")]
        public InitialImportDatasetConfiguration InitialImportDatasetConfiguration { get; set; }
        
        /// <value>
        /// The labeling instructions for human labelers in rich text format
        /// </value>
        [JsonProperty(PropertyName = "labelingInstructions")]
        public string LabelingInstructions { get; set; }
        
        /// <value>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
        /// For Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// The defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// For Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// The usage of system tag keys. These predefined keys are scoped to namespaces.
        /// For Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
        /// <value>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
        /// For Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "additionalProperties")]
        public System.Collections.Generic.Dictionary<string, string> AdditionalProperties { get; set; }
        
    }
}
