/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.GenerativeaiagentService.Models;
using Oci.GenerativeaiagentService.Requests;
using Oci.GenerativeaiagentService.Responses;

namespace Oci.GenerativeaiagentService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of GenerativeAiAgent.
    /// </summary>
    public class GenerativeAiAgentWaiters
    {
        private readonly GenerativeAiAgentClient client;

        public  GenerativeAiAgentWaiters(GenerativeAiAgentClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentRequest, GetAgentResponse> ForAgent(GetAgentRequest request, params Agent.LifecycleStateEnum[] targetStates)
        {
            return this.ForAgent(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentRequest, GetAgentResponse> ForAgent(GetAgentRequest request, WaiterConfiguration config, params Agent.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAgentRequest, GetAgentResponse>(
                request,
                request => client.GetAgent(request),
                response => targetStates.Contains(response.Agent.LifecycleState.Value),
                targetStates.Contains(Agent.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAgentRequest, GetAgentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentEndpointRequest, GetAgentEndpointResponse> ForAgentEndpoint(GetAgentEndpointRequest request, params AgentEndpoint.LifecycleStateEnum[] targetStates)
        {
            return this.ForAgentEndpoint(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAgentEndpointRequest, GetAgentEndpointResponse> ForAgentEndpoint(GetAgentEndpointRequest request, WaiterConfiguration config, params AgentEndpoint.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAgentEndpointRequest, GetAgentEndpointResponse>(
                request,
                request => client.GetAgentEndpoint(request),
                response => targetStates.Contains(response.AgentEndpoint.LifecycleState.Value),
                targetStates.Contains(AgentEndpoint.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAgentEndpointRequest, GetAgentEndpointResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataIngestionJobRequest, GetDataIngestionJobResponse> ForDataIngestionJob(GetDataIngestionJobRequest request, params DataIngestionJob.LifecycleStateEnum[] targetStates)
        {
            return this.ForDataIngestionJob(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataIngestionJobRequest, GetDataIngestionJobResponse> ForDataIngestionJob(GetDataIngestionJobRequest request, WaiterConfiguration config, params DataIngestionJob.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDataIngestionJobRequest, GetDataIngestionJobResponse>(
                request,
                request => client.GetDataIngestionJob(request),
                response => targetStates.Contains(response.DataIngestionJob.LifecycleState.Value),
                targetStates.Contains(DataIngestionJob.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDataIngestionJobRequest, GetDataIngestionJobResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSourceRequest, GetDataSourceResponse> ForDataSource(GetDataSourceRequest request, params DataSource.LifecycleStateEnum[] targetStates)
        {
            return this.ForDataSource(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDataSourceRequest, GetDataSourceResponse> ForDataSource(GetDataSourceRequest request, WaiterConfiguration config, params DataSource.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDataSourceRequest, GetDataSourceResponse>(
                request,
                request => client.GetDataSource(request),
                response => targetStates.Contains(response.DataSource.LifecycleState.Value),
                targetStates.Contains(DataSource.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDataSourceRequest, GetDataSourceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetKnowledgeBaseRequest, GetKnowledgeBaseResponse> ForKnowledgeBase(GetKnowledgeBaseRequest request, params KnowledgeBase.LifecycleStateEnum[] targetStates)
        {
            return this.ForKnowledgeBase(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetKnowledgeBaseRequest, GetKnowledgeBaseResponse> ForKnowledgeBase(GetKnowledgeBaseRequest request, WaiterConfiguration config, params KnowledgeBase.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetKnowledgeBaseRequest, GetKnowledgeBaseResponse>(
                request,
                request => client.GetKnowledgeBase(request),
                response => targetStates.Contains(response.KnowledgeBase.LifecycleState.Value),
                targetStates.Contains(KnowledgeBase.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetKnowledgeBaseRequest, GetKnowledgeBaseResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetToolRequest, GetToolResponse> ForTool(GetToolRequest request, params Tool.LifecycleStateEnum[] targetStates)
        {
            return this.ForTool(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetToolRequest, GetToolResponse> ForTool(GetToolRequest request, WaiterConfiguration config, params Tool.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetToolRequest, GetToolResponse>(
                request,
                request => client.GetTool(request),
                response => targetStates.Contains(response.Tool.LifecycleState.Value),
                targetStates.Contains(Tool.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetToolRequest, GetToolResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
