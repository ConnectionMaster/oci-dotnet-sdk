/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.GenerativeaiagentService.Models
{
    /// <summary>
    /// The configuration and type of Tool.
    /// 
    /// </summary>
    [JsonConverter(typeof(ToolConfigModelConverter))]
    public class ToolConfig 
    {
                ///
        /// <value>
        /// The type of the Tool config.
        /// The allowed values are:
        /// - `SQL_TOOL_CONFIG`: The config for sql Tool.
        /// - `RAG_TOOL_CONFIG`: The config for rag Tool.
        /// - FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
        /// - HTTP_ENDPOINT_TOOL_CONFIG: The config for HTTP endpoint Tool.
        /// 
        /// </value>
        ///
        public enum ToolConfigTypeEnum {
            [EnumMember(Value = "SQL_TOOL_CONFIG")]
            SqlToolConfig,
            [EnumMember(Value = "RAG_TOOL_CONFIG")]
            RagToolConfig,
            [EnumMember(Value = "FUNCTION_CALLING_TOOL_CONFIG")]
            FunctionCallingToolConfig,
            [EnumMember(Value = "HTTP_ENDPOINT_TOOL_CONFIG")]
            HttpEndpointToolConfig
        };

        
    }

    public class ToolConfigModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(ToolConfig);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(ToolConfig);
            var discriminator = jsonObject["toolConfigType"].Value<string>();
            switch (discriminator)
            {
                case "SQL_TOOL_CONFIG":
                    obj = new SqlToolConfig();
                    break;
                case "FUNCTION_CALLING_TOOL_CONFIG":
                    obj = new FunctionCallingToolConfig();
                    break;
                case "HTTP_ENDPOINT_TOOL_CONFIG":
                    obj = new HttpEndpointToolConfig();
                    break;
                case "RAG_TOOL_CONFIG":
                    obj = new RagToolConfig();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under ToolConfig! Returning null value.");
            }
            return obj;
        }
    }
}
