/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.FilestorageService.Models
{
    /// <summary>
    /// Summary information for a principal's usage and quota rule.
    /// 
    /// </summary>
    public class QuotaRuleSummary 
    {
        
        /// <value>
        /// The identifier of the quota rule. It is the base64 encoded string of the tuple <principalId, principalType, isHardQuota>.
        /// </value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the file system.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FileSystemId is required.")]
        [JsonProperty(PropertyName = "fileSystemId")]
        public string FileSystemId { get; set; }
                ///
        /// <value>
        /// The type of the owner of this quota rule and usage.
        /// 
        /// </value>
        ///
        public enum PrincipalTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "FILE_SYSTEM_LEVEL")]
            FileSystemLevel,
            [EnumMember(Value = "DEFAULT_GROUP")]
            DefaultGroup,
            [EnumMember(Value = "DEFAULT_USER")]
            DefaultUser,
            [EnumMember(Value = "INDIVIDUAL_GROUP")]
            IndividualGroup,
            [EnumMember(Value = "INDIVIDUAL_USER")]
            IndividualUser
        };

        /// <value>
        /// The type of the owner of this quota rule and usage.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PrincipalType is required.")]
        [JsonProperty(PropertyName = "principalType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<PrincipalTypeEnum> PrincipalType { get; set; }
        
        /// <value>
        /// An identifier for the user or the group associated with quota rule and usage. UNIX-like operating systems use this integer value to
        /// identify a user or group to manage access control.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PrincipalId is required.")]
        [JsonProperty(PropertyName = "principalId")]
        public System.Nullable<int> PrincipalId { get; set; }
        
        /// <value>
        /// Whether the quota rule will be enforced.
        /// If `isHardQuota` is true, the quota rule is enforced so that the write is blocked if usage
        /// exceeds the hard quota limit.
        /// If `isHardQuota` is false, writes succeed even if usage exceeds the soft quota limit, but the quota rule is violated.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isHardQuota")]
        public System.Nullable<bool> IsHardQuota { get; set; }
        
        /// <value>
        /// A user-friendly name. It does not have to be unique, and it is changeable.
        /// Avoid entering confidential information.
        /// Example: UserXYZ's quota
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The usage value corresponding to this principal in bytes.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "UsageInBytes is required.")]
        [JsonProperty(PropertyName = "usageInBytes")]
        public System.Nullable<long> UsageInBytes { get; set; }
        
        /// <value>
        /// The value of the quota rule in gigabytes.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "quotaLimitInGigabytes")]
        public System.Nullable<int> QuotaLimitInGigabytes { get; set; }
        
        /// <value>
        /// The date and time the quota rule was created, expressed in
        /// [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time the quota rule was last updated, expressed in
        /// [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
        /// <br/>
        /// Example: 2016-08-25T21:10:29.600Z
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// An option to display only the users or groups that violate their quota rules.
        /// If `areViolatorsOnly` is false, results report all the quota and usage.
        /// If `areViolatorsOnly` is true, results only report the quota and usage for
        /// the users or groups that violate their quota rules.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "areViolatorsOnly")]
        public System.Nullable<bool> AreViolatorsOnly { get; set; }
        
    }
}
