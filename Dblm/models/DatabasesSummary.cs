/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DblmService.Models
{
    /// <summary>
    /// Summary of a databases.
    /// </summary>
    public class DatabasesSummary 
    {
        
        /// <value>
        /// Database ocid.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DatabaseId is required.")]
        [JsonProperty(PropertyName = "databaseId")]
        public string DatabaseId { get; set; }
        
        /// <value>
        /// Database name.
        /// </value>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }
                ///
        /// <value>
        /// Database type.
        /// </value>
        ///
        public enum DatabaseTypeEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "SI")]
            Si,
            [EnumMember(Value = "RAC")]
            Rac
        };

        /// <value>
        /// Database type.
        /// </value>
        [JsonProperty(PropertyName = "databaseType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<DatabaseTypeEnum> DatabaseType { get; set; }
        
        /// <value>
        /// Database release.
        /// </value>
        [JsonProperty(PropertyName = "release")]
        public string Release { get; set; }
        
        /// <value>
        /// Database release full version.
        /// </value>
        [JsonProperty(PropertyName = "releaseFullVersion")]
        public string ReleaseFullVersion { get; set; }
        
        /// <value>
        /// Path to the Oracle home.
        /// </value>
        [JsonProperty(PropertyName = "oracleHomePath")]
        public string OracleHomePath { get; set; }
        
        /// <value>
        /// This is the hashcode representing the list of patches applied.
        /// </value>
        [JsonProperty(PropertyName = "currentPatchWatermark")]
        public string CurrentPatchWatermark { get; set; }
        
        /// <value>
        /// For SI, hosted on host and for RAC, host on cluster.
        /// </value>
        [JsonProperty(PropertyName = "hostOrCluster")]
        public string HostOrCluster { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ImageDetails is required.")]
        [JsonProperty(PropertyName = "imageDetails")]
        public ImageDetails ImageDetails { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PatchComplianceDetails is required.")]
        [JsonProperty(PropertyName = "patchComplianceDetails")]
        public PatchComplianceDetails PatchComplianceDetails { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PatchActivityDetails is required.")]
        [JsonProperty(PropertyName = "patchActivityDetails")]
        public PatchActivityDetails PatchActivityDetails { get; set; }
        
        /// <value>
        /// Intermediate user to be used for patching, created and maintained by customers. This user requires sudo access to switch as Oracle home owner and root user
        /// </value>
        [JsonProperty(PropertyName = "patchUser")]
        public string PatchUser { get; set; }
        
        /// <value>
        /// Path to sudo binary (executable) file
        /// </value>
        [JsonProperty(PropertyName = "sudoFilePath")]
        public string SudoFilePath { get; set; }
        
        /// <value>
        /// List of additional patches on database.
        /// </value>
        [JsonProperty(PropertyName = "additionalPatches")]
        public System.Collections.Generic.List<AdditionalPatches> AdditionalPatches { get; set; }
        
        /// <value>
        /// Summary of vulnerabilities found in registered resources grouped by severity.
        /// </value>
        [JsonProperty(PropertyName = "vulnerabilitiesSummary")]
        public System.Object VulnerabilitiesSummary { get; set; }
                ///
        /// <value>
        /// The current state of the database.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed
        };

        /// <value>
        /// The current state of the database.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FreeformTags is required.")]
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DefinedTags is required.")]
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// System tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
    }
}
