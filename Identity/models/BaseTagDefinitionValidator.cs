/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.IdentityService.Models
{
    /// <summary>
    /// Validates a definedTag value. Each validator performs validation steps in addition to the standard
    /// validation for definedTag values. For more information, see
    /// [Limits on Tags](https://docs.cloud.oracle.com/Content/Identity/Concepts/taggingoverview.htm#Limits).
    /// <br/>
    /// If you define a validator after a value has been set for a defined tag, then any updates that
    /// attempt to change the value must pass the additional validation defined by the current rule.
    /// Previously set values (even those that would fail the current validation) are not updated. You can
    /// still update other attributes to resources that contain a non-valid defined tag.
    /// <br/>
    /// To clear the validator call UpdateTag with
    /// [DefaultTagDefinitionValidator](https://docs.cloud.oracle.com/api/#/en/identity/latest/datatypes/DefaultTagDefinitionValidator).
    /// 
    /// </summary>
    [JsonConverter(typeof(BaseTagDefinitionValidatorModelConverter))]
    public class BaseTagDefinitionValidator 
    {
                ///
        /// <value>
        /// Specifies the type of validation: a static value (no validation) or a list.
        /// 
        /// </value>
        ///
        public enum ValidatorTypeEnum {
            [EnumMember(Value = "ENUM")]
            Enum,
            [EnumMember(Value = "DEFAULT")]
            Default
        };

        
    }

    public class BaseTagDefinitionValidatorModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(BaseTagDefinitionValidator);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(BaseTagDefinitionValidator);
            var discriminator = jsonObject["validatorType"].Value<string>();
            switch (discriminator)
            {
                case "DEFAULT":
                    obj = new DefaultTagDefinitionValidator();
                    break;
                case "ENUM":
                    obj = new EnumTagDefinitionValidator();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
