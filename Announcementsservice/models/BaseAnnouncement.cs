/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.AnnouncementsService.Models
{
    /// <summary>
    /// Incident information that forms the basis of an announcement. Avoid entering confidential information.
    /// </summary>
    [JsonConverter(typeof(BaseAnnouncementModelConverter))]
    public class BaseAnnouncement 
    {
        
        /// <value>
        /// The OCID of the announcement.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        
        /// <value>
        /// The reference Jira ticket number.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ReferenceTicketNumber is required.")]
        [JsonProperty(PropertyName = "referenceTicketNumber")]
        public string ReferenceTicketNumber { get; set; }
        
        /// <value>
        /// A summary of the issue. A summary might appear in the console banner view of the announcement or in
        /// an email subject line. Avoid entering confidential information.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Summary is required.")]
        [JsonProperty(PropertyName = "summary")]
        public string Summary { get; set; }
        
        /// <value>
        /// The label associated with an initial time value.
        /// Example: Time Started
        /// </value>
        [JsonProperty(PropertyName = "timeOneTitle")]
        public string TimeOneTitle { get; set; }
        
        /// <value>
        /// The actual value of the first time value for the event. Typically, this is the time an event started, but the meaning
        /// can vary, depending on the announcement type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeOneValue")]
        public System.Nullable<System.DateTime> TimeOneValue { get; set; }
        
        /// <value>
        /// The label associated with a second time value.
        /// Example: Time Ended
        /// </value>
        [JsonProperty(PropertyName = "timeTwoTitle")]
        public string TimeTwoTitle { get; set; }
        
        /// <value>
        /// The actual value of the second time value. Typically, this is the time an event ended, but the meaning
        /// can vary, depending on the announcement type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeTwoValue")]
        public System.Nullable<System.DateTime> TimeTwoValue { get; set; }
        
        /// <value>
        /// Impacted Oracle Cloud Infrastructure services.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Services is required.")]
        [JsonProperty(PropertyName = "services")]
        public System.Collections.Generic.List<string> Services { get; set; }
        
        /// <value>
        /// Impacted regions.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AffectedRegions is required.")]
        [JsonProperty(PropertyName = "affectedRegions")]
        public System.Collections.Generic.List<string> AffectedRegions { get; set; }
                ///
        /// <value>
        /// The type of announcement. An announcement's type signals its severity.
        /// </value>
        ///
        public enum AnnouncementTypeEnum {
            [EnumMember(Value = "ACTION_RECOMMENDED")]
            ActionRecommended,
            [EnumMember(Value = "ACTION_REQUIRED")]
            ActionRequired,
            [EnumMember(Value = "EMERGENCY_CHANGE")]
            EmergencyChange,
            [EnumMember(Value = "EMERGENCY_MAINTENANCE")]
            EmergencyMaintenance,
            [EnumMember(Value = "EMERGENCY_MAINTENANCE_COMPLETE")]
            EmergencyMaintenanceComplete,
            [EnumMember(Value = "EMERGENCY_MAINTENANCE_EXTENDED")]
            EmergencyMaintenanceExtended,
            [EnumMember(Value = "EMERGENCY_MAINTENANCE_RESCHEDULED")]
            EmergencyMaintenanceRescheduled,
            [EnumMember(Value = "INFORMATION")]
            Information,
            [EnumMember(Value = "PLANNED_CHANGE")]
            PlannedChange,
            [EnumMember(Value = "PLANNED_CHANGE_COMPLETE")]
            PlannedChangeComplete,
            [EnumMember(Value = "PLANNED_CHANGE_EXTENDED")]
            PlannedChangeExtended,
            [EnumMember(Value = "PLANNED_CHANGE_RESCHEDULED")]
            PlannedChangeRescheduled,
            [EnumMember(Value = "PRODUCTION_EVENT_NOTIFICATION")]
            ProductionEventNotification,
            [EnumMember(Value = "SCHEDULED_MAINTENANCE")]
            ScheduledMaintenance
        };

        /// <value>
        /// The type of announcement. An announcement's type signals its severity.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AnnouncementType is required.")]
        [JsonProperty(PropertyName = "announcementType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<AnnouncementTypeEnum> AnnouncementType { get; set; }
                ///
        /// <value>
        /// The current lifecycle state of the announcement.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "INACTIVE")]
            Inactive
        };

        /// <value>
        /// The current lifecycle state of the announcement.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
        /// <value>
        /// Whether the announcement is displayed as a banner in the console.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsBanner is required.")]
        [JsonProperty(PropertyName = "isBanner")]
        public System.Nullable<bool> IsBanner { get; set; }
        
        /// <value>
        /// The date and time the announcement was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// Example: 2019-01-01T17:43:01.389+0000
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time the announcement was last updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// Example: 2019-01-01T17:43:01.389+0000
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
    }

    public class BaseAnnouncementModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(BaseAnnouncement);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(BaseAnnouncement);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "AnnouncementSummary":
                    obj = new AnnouncementSummary();
                    break;
                case "Announcement":
                    obj = new Announcement();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
