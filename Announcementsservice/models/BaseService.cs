/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.AnnouncementsService.Models
{
    /// <summary>
    /// Object representing a single service.
    /// </summary>
    [JsonConverter(typeof(BaseServiceModelConverter))]
    public class BaseService 
    {
        
        
        /// <value>
        /// ID of the service object.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// Name of the service represented by this object.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ServiceName is required.")]
        [JsonProperty(PropertyName = "serviceName")]
        public string ServiceName { get; set; }
        
        /// <value>
        /// Short name of the team to whom this service object is related.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ShortName is required.")]
        [JsonProperty(PropertyName = "shortName")]
        public string ShortName { get; set; }
        
        /// <value>
        /// Team name to which this service object is related.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TeamName is required.")]
        [JsonProperty(PropertyName = "teamName")]
        public string TeamName { get; set; }
        
        /// <value>
        /// The platform type this service object is related to.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PlatformType is required.")]
        [JsonProperty(PropertyName = "platformType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<PlatformType> PlatformType { get; set; }
        
        /// <value>
        /// Name of the comms manager team that manages Notifications to this service.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CommsManagerName is required.")]
        [JsonProperty(PropertyName = "commsManagerName")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<CommsManagerName> CommsManagerName { get; set; }
        
        /// <value>
        /// The list of realms where this service is not available to be used.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ExcludedRealms is required.")]
        [JsonProperty(PropertyName = "excludedRealms")]
        public System.Collections.Generic.List<string> ExcludedRealms { get; set; }
        
        /// <value>
        /// The list of previously used names for this service object.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PreviousServiceNames is required.")]
        [JsonProperty(PropertyName = "previousServiceNames")]
        public System.Collections.Generic.List<string> PreviousServiceNames { get; set; }
        
        /// <value>
        /// The date and time when the service object was created.
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time when the service object was updated.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
                ///
        /// <value>
        /// Current state of the service object.
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "DELETED")]
            Deleted
        };

        /// <value>
        /// Current state of the service object.
        /// </value>
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        
    }

    public class BaseServiceModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(BaseService);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(BaseService);
            var discriminator = jsonObject["type"].Value<string>();
            switch (discriminator)
            {
                case "Service":
                    obj = new Service();
                    break;
                case "ServiceSummary":
                    obj = new ServiceSummary();
                    break;
                case "NotificationsSummary":
                    obj = new NotificationsSummary();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under BaseService! Returning null value.");
            }
            return obj;
        }
    }
}
