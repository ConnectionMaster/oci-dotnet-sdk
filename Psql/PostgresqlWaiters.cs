/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.PsqlService.Models;
using Oci.PsqlService.Requests;
using Oci.PsqlService.Responses;

namespace Oci.PsqlService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Postgresql.
    /// </summary>
    public class PostgresqlWaiters
    {
        private readonly PostgresqlClient client;

        public  PostgresqlWaiters(PostgresqlClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupRequest, GetBackupResponse> ForBackup(GetBackupRequest request, params Backup.LifecycleStateEnum[] targetStates)
        {
            return this.ForBackup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetBackupRequest, GetBackupResponse> ForBackup(GetBackupRequest request, WaiterConfiguration config, params Backup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetBackupRequest, GetBackupResponse>(
                request,
                request => client.GetBackup(request),
                response => targetStates.Contains(response.Backup.LifecycleState.Value),
                targetStates.Contains(Backup.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetBackupRequest, GetBackupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConfigurationRequest, GetConfigurationResponse> ForConfiguration(GetConfigurationRequest request, params Configuration.LifecycleStateEnum[] targetStates)
        {
            return this.ForConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetConfigurationRequest, GetConfigurationResponse> ForConfiguration(GetConfigurationRequest request, WaiterConfiguration config, params Configuration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetConfigurationRequest, GetConfigurationResponse>(
                request,
                request => client.GetConfiguration(request),
                response => targetStates.Contains(response.Configuration.LifecycleState.Value),
                targetStates.Contains(Configuration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetConfigurationRequest, GetConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemRequest, GetDbSystemResponse> ForDbSystem(GetDbSystemRequest request, params DbSystem.LifecycleStateEnum[] targetStates)
        {
            return this.ForDbSystem(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDbSystemRequest, GetDbSystemResponse> ForDbSystem(GetDbSystemRequest request, WaiterConfiguration config, params DbSystem.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDbSystemRequest, GetDbSystemResponse>(
                request,
                request => client.GetDbSystem(request),
                response => targetStates.Contains(response.DbSystem.LifecycleState.Value),
                targetStates.Contains(DbSystem.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDbSystemRequest, GetDbSystemResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDefaultConfigurationRequest, GetDefaultConfigurationResponse> ForDefaultConfiguration(GetDefaultConfigurationRequest request, params DefaultConfiguration.LifecycleStateEnum[] targetStates)
        {
            return this.ForDefaultConfiguration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDefaultConfigurationRequest, GetDefaultConfigurationResponse> ForDefaultConfiguration(GetDefaultConfigurationRequest request, WaiterConfiguration config, params DefaultConfiguration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDefaultConfigurationRequest, GetDefaultConfigurationResponse>(
                request,
                request => client.GetDefaultConfiguration(request),
                response => targetStates.Contains(response.DefaultConfiguration.LifecycleState.Value),
                targetStates.Contains(DefaultConfiguration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetDefaultConfigurationRequest, GetDefaultConfigurationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
