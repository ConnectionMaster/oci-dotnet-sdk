/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.DisasterrecoveryService.Models
{
    /// <summary>
    /// The options for a plan execution.
    /// </summary>
    [JsonConverter(typeof(DrPlanExecutionOptionDetailsModelConverter))]
    public class DrPlanExecutionOptionDetails 
    {
                ///
        /// <value>
        /// The type of the plan execution.
        /// 
        /// </value>
        ///
        public enum PlanExecutionTypeEnum {
            [EnumMember(Value = "SWITCHOVER")]
            Switchover,
            [EnumMember(Value = "SWITCHOVER_PRECHECK")]
            SwitchoverPrecheck,
            [EnumMember(Value = "FAILOVER")]
            Failover,
            [EnumMember(Value = "FAILOVER_PRECHECK")]
            FailoverPrecheck,
            [EnumMember(Value = "START_DRILL")]
            StartDrill,
            [EnumMember(Value = "START_DRILL_PRECHECK")]
            StartDrillPrecheck,
            [EnumMember(Value = "STOP_DRILL")]
            StopDrill,
            [EnumMember(Value = "STOP_DRILL_PRECHECK")]
            StopDrillPrecheck
        };

        
    }

    public class DrPlanExecutionOptionDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(DrPlanExecutionOptionDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(DrPlanExecutionOptionDetails);
            var discriminator = jsonObject["planExecutionType"].Value<string>();
            switch (discriminator)
            {
                case "STOP_DRILL_PRECHECK":
                    obj = new StopDrillPrecheckExecutionOptionDetails();
                    break;
                case "SWITCHOVER_PRECHECK":
                    obj = new SwitchoverPrecheckExecutionOptionDetails();
                    break;
                case "STOP_DRILL":
                    obj = new StopDrillExecutionOptionDetails();
                    break;
                case "FAILOVER_PRECHECK":
                    obj = new FailoverPrecheckExecutionOptionDetails();
                    break;
                case "START_DRILL":
                    obj = new StartDrillExecutionOptionDetails();
                    break;
                case "START_DRILL_PRECHECK":
                    obj = new StartDrillPrecheckExecutionOptionDetails();
                    break;
                case "SWITCHOVER":
                    obj = new SwitchoverExecutionOptionDetails();
                    break;
                case "FAILOVER":
                    obj = new FailoverExecutionOptionDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
