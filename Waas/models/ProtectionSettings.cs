/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.WaasService.Models
{
    /// <summary>
    /// The settings used for protection rules.
    /// </summary>
    public class ProtectionSettings 
    {
                ///
        /// <value>
        /// If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
        /// </value>
        ///
        public enum BlockActionEnum {
            [EnumMember(Value = "SHOW_ERROR_PAGE")]
            ShowErrorPage,
            [EnumMember(Value = "SET_RESPONSE_CODE")]
            SetResponseCode
        };

        /// <value>
        /// If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
        /// </value>
        [JsonProperty(PropertyName = "blockAction")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<BlockActionEnum> BlockAction { get; set; }
        
        /// <value>
        /// The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
        /// </value>
        [JsonProperty(PropertyName = "blockResponseCode")]
        public System.Nullable<int> BlockResponseCode { get; set; }
        
        /// <value>
        /// The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to 'Access to the website is blocked.'
        /// </value>
        [JsonProperty(PropertyName = "blockErrorPageMessage")]
        public string BlockErrorPageMessage { get; set; }
        
        /// <value>
        /// The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
        /// </value>
        [JsonProperty(PropertyName = "blockErrorPageCode")]
        public string BlockErrorPageCode { get; set; }
        
        /// <value>
        /// The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
        /// </value>
        [JsonProperty(PropertyName = "blockErrorPageDescription")]
        public string BlockErrorPageDescription { get; set; }
        
        /// <value>
        /// The maximum number of arguments allowed to be passed to your application before an action is taken. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `255`. This setting only applies if a corresponding protection rule is enabled, such as the \"Number of Arguments Limits\" rule (key: 960335).
        /// <br/>
        /// Example: If maxArgumentCount to 2 for the Max Number of Arguments protection rule (key: 960335), the following requests would be blocked:GET /myapp/path?query=one&query=two&query=threePOST /myapp/path with Body {&quot;argument1&quot;:&quot;one&quot;,&quot;argument2&quot;:&quot;two&quot;,&quot;argument3&quot;:&quot;three&quot;}
        /// </value>
        [JsonProperty(PropertyName = "maxArgumentCount")]
        public System.Nullable<int> MaxArgumentCount { get; set; }
        
        /// <value>
        /// The maximum length allowed for each argument name, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `400`. This setting only applies if a corresponding protection rule is enabled, such as the \"Values Limits\" rule (key: 960208).
        /// </value>
        [JsonProperty(PropertyName = "maxNameLengthPerArgument")]
        public System.Nullable<int> MaxNameLengthPerArgument { get; set; }
        
        /// <value>
        /// The maximum length allowed for the sum of the argument name and value, in characters. Arguements are query parameters or body parameters in a PUT or POST request. If unspecified, defaults to `64000`. This setting only applies if a corresponding protection rule is enabled, such as the \"Total Arguments Limits\" rule (key: 960341).
        /// </value>
        [JsonProperty(PropertyName = "maxTotalNameLengthOfArguments")]
        public System.Nullable<int> MaxTotalNameLengthOfArguments { get; set; }
        
        /// <value>
        /// The length of time to analyze traffic traffic, in days. After the analysis period, `WafRecommendations` will be populated. If unspecified, defaults to `10`.
        /// <br/>
        /// Use `GET /waasPolicies/{waasPolicyId}/wafRecommendations` to view WAF recommendations.
        /// </value>
        [JsonProperty(PropertyName = "recommendationsPeriodInDays")]
        public System.Nullable<int> RecommendationsPeriodInDays { get; set; }
        
        /// <value>
        /// Inspects the response body of origin responses. Can be used to detect leakage of sensitive data. If unspecified, defaults to `false`.
        /// <br/>
        /// **Note:** Only origin responses with a Content-Type matching a value in `mediaTypes` will be inspected.
        /// </value>
        [JsonProperty(PropertyName = "isResponseInspected")]
        public System.Nullable<bool> IsResponseInspected { get; set; }
        
        /// <value>
        /// The maximum response size to be fully inspected, in binary kilobytes (KiB). Anything over this limit will be partially inspected. If unspecified, defaults to `1024`.
        /// </value>
        [JsonProperty(PropertyName = "maxResponseSizeInKiB")]
        public System.Nullable<int> MaxResponseSizeInKiB { get; set; }
                ///
        ///
        public enum AllowedHttpMethodsEnum {
            [EnumMember(Value = "OPTIONS")]
            Options,
            [EnumMember(Value = "GET")]
            Get,
            [EnumMember(Value = "HEAD")]
            Head,
            [EnumMember(Value = "POST")]
            Post,
            [EnumMember(Value = "PUT")]
            Put,
            [EnumMember(Value = "DELETE")]
            Delete,
            [EnumMember(Value = "TRACE")]
            Trace,
            [EnumMember(Value = "CONNECT")]
            Connect,
            [EnumMember(Value = "PATCH")]
            Patch,
            [EnumMember(Value = "PROPFIND")]
            Propfind
        };

        /// <value>
        /// The list of allowed HTTP methods. If unspecified, default to `[OPTIONS, GET, HEAD, POST]`. This setting only applies if a corresponding protection rule is enabled, such as the \"Restrict HTTP Request Methods\" rule (key: 911100).
        /// </value>
        [JsonProperty(PropertyName = "allowedHttpMethods", ItemConverterType = typeof(StringEnumConverter))]
        public System.Collections.Generic.List<AllowedHttpMethodsEnum> AllowedHttpMethods { get; set; }
        
        /// <value>
        /// The list of media types to allow for inspection, if `isResponseInspected` is enabled. Only responses with MIME types in this list will be inspected. If unspecified, defaults to `[\"text/html\", \"text/plain\", \"text/xml\"]`.
        /// <br/>
        ///     Supported MIME types include:
        /// <br/>
        ///     - text/html
        ///     - text/plain
        ///     - text/asp
        ///     - text/css
        ///     - text/x-script
        ///     - application/json
        ///     - text/webviewhtml
        ///     - text/x-java-source
        ///     - application/x-javascript
        ///     - application/javascript
        ///     - application/ecmascript
        ///     - text/javascript
        ///     - text/ecmascript
        ///     - text/x-script.perl
        ///     - text/x-script.phyton
        ///     - application/plain
        ///     - application/xml
        ///     - text/xml
        /// </value>
        [JsonProperty(PropertyName = "mediaTypes")]
        public System.Collections.Generic.List<string> MediaTypes { get; set; }
        
    }
}
