/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.WaasService.Models
{
    
    [JsonConverter(typeof(LoadBalancingMethodModelConverter))]
    public class LoadBalancingMethod 
    {
                ///
        /// <value>
        /// Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
        /// <br/>
        /// - **IP_HASH:** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
        /// <br/>
        /// - **ROUND_ROBIN:** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
        /// <br/>
        /// - **STICKY_COOKIE:** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client's next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
        /// </value>
        ///
        public enum MethodEnum {
            [EnumMember(Value = "IP_HASH")]
            IpHash,
            [EnumMember(Value = "ROUND_ROBIN")]
            RoundRobin,
            [EnumMember(Value = "STICKY_COOKIE")]
            StickyCookie
        };

        
    }

    public class LoadBalancingMethodModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(LoadBalancingMethod);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(LoadBalancingMethod);
            var discriminator = jsonObject["method"].Value<string>();
            switch (discriminator)
            {
                case "ROUND_ROBIN":
                    obj = new RoundRobinLoadBalancingMethod();
                    break;
                case "STICKY_COOKIE":
                    obj = new StickyCookieLoadBalancingMethod();
                    break;
                case "IP_HASH":
                    obj = new IPHashLoadBalancingMethod();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
