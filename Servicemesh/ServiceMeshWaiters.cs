/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.ServicemeshService.Models;
using Oci.ServicemeshService.Requests;
using Oci.ServicemeshService.Responses;

namespace Oci.ServicemeshService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of ServiceMesh.
    /// </summary>
    public class ServiceMeshWaiters
    {
        private readonly ServiceMeshClient client;

        public  ServiceMeshWaiters(ServiceMeshClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAccessPolicyRequest, GetAccessPolicyResponse> ForAccessPolicy(GetAccessPolicyRequest request, params AccessPolicy.LifecycleStateEnum[] targetStates)
        {
            return this.ForAccessPolicy(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetAccessPolicyRequest, GetAccessPolicyResponse> ForAccessPolicy(GetAccessPolicyRequest request, WaiterConfiguration config, params AccessPolicy.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetAccessPolicyRequest, GetAccessPolicyResponse>(
                request,
                request => client.GetAccessPolicy(request),
                response => targetStates.Contains(response.AccessPolicy.LifecycleState.Value),
                targetStates.Contains(AccessPolicy.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetAccessPolicyRequest, GetAccessPolicyResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIngressGatewayRequest, GetIngressGatewayResponse> ForIngressGateway(GetIngressGatewayRequest request, params IngressGateway.LifecycleStateEnum[] targetStates)
        {
            return this.ForIngressGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIngressGatewayRequest, GetIngressGatewayResponse> ForIngressGateway(GetIngressGatewayRequest request, WaiterConfiguration config, params IngressGateway.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIngressGatewayRequest, GetIngressGatewayResponse>(
                request,
                request => client.GetIngressGateway(request),
                response => targetStates.Contains(response.IngressGateway.LifecycleState.Value),
                targetStates.Contains(IngressGateway.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetIngressGatewayRequest, GetIngressGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIngressGatewayRouteTableRequest, GetIngressGatewayRouteTableResponse> ForIngressGatewayRouteTable(GetIngressGatewayRouteTableRequest request, params IngressGatewayRouteTable.LifecycleStateEnum[] targetStates)
        {
            return this.ForIngressGatewayRouteTable(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIngressGatewayRouteTableRequest, GetIngressGatewayRouteTableResponse> ForIngressGatewayRouteTable(GetIngressGatewayRouteTableRequest request, WaiterConfiguration config, params IngressGatewayRouteTable.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIngressGatewayRouteTableRequest, GetIngressGatewayRouteTableResponse>(
                request,
                request => client.GetIngressGatewayRouteTable(request),
                response => targetStates.Contains(response.IngressGatewayRouteTable.LifecycleState.Value),
                targetStates.Contains(IngressGatewayRouteTable.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetIngressGatewayRouteTableRequest, GetIngressGatewayRouteTableResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMeshRequest, GetMeshResponse> ForMesh(GetMeshRequest request, params Mesh.LifecycleStateEnum[] targetStates)
        {
            return this.ForMesh(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMeshRequest, GetMeshResponse> ForMesh(GetMeshRequest request, WaiterConfiguration config, params Mesh.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMeshRequest, GetMeshResponse>(
                request,
                request => client.GetMesh(request),
                response => targetStates.Contains(response.Mesh.LifecycleState.Value),
                targetStates.Contains(Mesh.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMeshRequest, GetMeshResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualDeploymentRequest, GetVirtualDeploymentResponse> ForVirtualDeployment(GetVirtualDeploymentRequest request, params VirtualDeployment.LifecycleStateEnum[] targetStates)
        {
            return this.ForVirtualDeployment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualDeploymentRequest, GetVirtualDeploymentResponse> ForVirtualDeployment(GetVirtualDeploymentRequest request, WaiterConfiguration config, params VirtualDeployment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualDeploymentRequest, GetVirtualDeploymentResponse>(
                request,
                request => client.GetVirtualDeployment(request),
                response => targetStates.Contains(response.VirtualDeployment.LifecycleState.Value),
                targetStates.Contains(VirtualDeployment.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetVirtualDeploymentRequest, GetVirtualDeploymentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualServiceRequest, GetVirtualServiceResponse> ForVirtualService(GetVirtualServiceRequest request, params VirtualService.LifecycleStateEnum[] targetStates)
        {
            return this.ForVirtualService(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualServiceRequest, GetVirtualServiceResponse> ForVirtualService(GetVirtualServiceRequest request, WaiterConfiguration config, params VirtualService.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualServiceRequest, GetVirtualServiceResponse>(
                request,
                request => client.GetVirtualService(request),
                response => targetStates.Contains(response.VirtualService.LifecycleState.Value),
                targetStates.Contains(VirtualService.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetVirtualServiceRequest, GetVirtualServiceResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualServiceRouteTableRequest, GetVirtualServiceRouteTableResponse> ForVirtualServiceRouteTable(GetVirtualServiceRouteTableRequest request, params VirtualServiceRouteTable.LifecycleStateEnum[] targetStates)
        {
            return this.ForVirtualServiceRouteTable(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualServiceRouteTableRequest, GetVirtualServiceRouteTableResponse> ForVirtualServiceRouteTable(GetVirtualServiceRouteTableRequest request, WaiterConfiguration config, params VirtualServiceRouteTable.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualServiceRouteTableRequest, GetVirtualServiceRouteTableResponse>(
                request,
                request => client.GetVirtualServiceRouteTable(request),
                response => targetStates.Contains(response.VirtualServiceRouteTable.LifecycleState.Value),
                targetStates.Contains(VirtualServiceRouteTable.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetVirtualServiceRouteTableRequest, GetVirtualServiceRouteTableResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
