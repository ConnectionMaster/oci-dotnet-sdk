/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ObjectstorageService.Models
{
    /// <summary>
    /// To use any of the API operations, you must be authorized in an IAM policy. If you are not authorized,
    /// talk to an administrator. If you are an administrator who needs to write policies to give users access, see
    /// [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
    /// 
    /// </summary>
    public class UpdateBucketDetails 
    {
        
        /// <value>
        /// The Object Storage namespace in which the bucket lives.
        /// </value>
        [JsonProperty(PropertyName = "namespace")]
        public string Namespace { get; set; }
        
        /// <value>
        /// The compartmentId for the compartment to move the bucket to.
        /// </value>
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The name of the bucket. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
        /// Bucket names must be unique within an Object Storage namespace. Avoid entering confidential information.
        /// Example: my-new-bucket1
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// Arbitrary string, up to 4KB, of keys and values for user-defined metadata.
        /// </value>
        [JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
                ///
        /// <value>
        /// The type of public access enabled on this bucket. A bucket is set to `NoPublicAccess` by default, which only allows an
        /// authenticated caller to access the bucket and its contents. When `ObjectRead` is enabled on the bucket, public access
        /// is allowed for the `GetObject`, `HeadObject`, and `ListObjects` operations. When `ObjectReadWithoutList` is enabled
        /// on the bucket, public access is allowed for the `GetObject` and `HeadObject` operations.
        /// 
        /// </value>
        ///
        public enum PublicAccessTypeEnum {
            [EnumMember(Value = "NoPublicAccess")]
            NoPublicAccess,
            [EnumMember(Value = "ObjectRead")]
            ObjectRead,
            [EnumMember(Value = "ObjectReadWithoutList")]
            ObjectReadWithoutList
        };

        /// <value>
        /// The type of public access enabled on this bucket. A bucket is set to `NoPublicAccess` by default, which only allows an
        /// authenticated caller to access the bucket and its contents. When `ObjectRead` is enabled on the bucket, public access
        /// is allowed for the `GetObject`, `HeadObject`, and `ListObjects` operations. When `ObjectReadWithoutList` is enabled
        /// on the bucket, public access is allowed for the `GetObject` and `HeadObject` operations.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "publicAccessType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<PublicAccessTypeEnum> PublicAccessType { get; set; }
        
        /// <value>
        /// Whether or not events are emitted for object state changes in this bucket. By default, `objectEventsEnabled` is
        /// set to `false`. Set `objectEventsEnabled` to `true` to emit events for object state changes. For more information
        /// about events, see [Overview of Events](https://docs.cloud.oracle.com/Content/Events/Concepts/eventsoverview.htm).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "objectEventsEnabled")]
        public System.Nullable<bool> ObjectEventsEnabled { get; set; }
        
        /// <value>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
        /// For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
        /// Example: {&quot;Department&quot;: &quot;Finance&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
        /// Example: {&quot;Operations&quot;: {&quot;CostCenter&quot;: &quot;42&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Key Management master encryption key to associate
        /// with the specified bucket. If this value is empty, the Update operation will remove the associated key, if
        /// there is one, from the bucket. (The bucket will continue to be encrypted, but with an encryption key managed
        /// by Oracle.)
        /// 
        /// </value>
        [JsonProperty(PropertyName = "kmsKeyId")]
        public string KmsKeyId { get; set; }
                ///
        /// <value>
        /// The versioning status on the bucket. If in state `Enabled`, multiple versions of the same object can be kept in the bucket.
        /// When the object is overwritten or deleted, previous versions will still be available. When versioning is `Suspended`, the previous versions will still remain but new versions will no longer be created when overwitten or deleted.
        /// Versioning cannot be disabled on a bucket once enabled.
        /// 
        /// </value>
        ///
        public enum VersioningEnum {
            [EnumMember(Value = "Enabled")]
            Enabled,
            [EnumMember(Value = "Suspended")]
            Suspended
        };

        /// <value>
        /// The versioning status on the bucket. If in state `Enabled`, multiple versions of the same object can be kept in the bucket.
        /// When the object is overwritten or deleted, previous versions will still be available. When versioning is `Suspended`, the previous versions will still remain but new versions will no longer be created when overwitten or deleted.
        /// Versioning cannot be disabled on a bucket once enabled.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "versioning")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<VersioningEnum> Versioning { get; set; }
        
    }
}
