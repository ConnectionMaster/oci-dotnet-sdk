/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CloudmigrationsService.Models
{
    /// <summary>
    /// Migration strategy for the resource to be migrated.
    /// </summary>
    [JsonConverter(typeof(ResourceAssessmentStrategyModelConverter))]
    public class ResourceAssessmentStrategy 
    {
                ///
        /// <value>
        /// The type of resource.
        /// </value>
        ///
        public enum ResourceTypeEnum {
            [EnumMember(Value = "CPU")]
            Cpu,
            [EnumMember(Value = "MEMORY")]
            Memory,
            [EnumMember(Value = "ALL")]
            All
        };

        /// <value>
        /// The type of resource.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ResourceType is required.")]
        [JsonProperty(PropertyName = "resourceType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ResourceTypeEnum> ResourceType { get; set; }
                ///
        /// <value>
        /// The type of strategy used for migration.
        /// </value>
        ///
        public enum StrategyTypeEnum {
            [EnumMember(Value = "AS_IS")]
            AsIs,
            [EnumMember(Value = "AVERAGE")]
            Average,
            [EnumMember(Value = "PEAK")]
            Peak,
            [EnumMember(Value = "PERCENTILE")]
            Percentile
        };

        
    }

    public class ResourceAssessmentStrategyModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(ResourceAssessmentStrategy);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(ResourceAssessmentStrategy);
            var discriminator = jsonObject["strategyType"].Value<string>();
            switch (discriminator)
            {
                case "PEAK":
                    obj = new PeakResourceAssessmentStrategy();
                    break;
                case "PERCENTILE":
                    obj = new PercentileResourceAssessmentStrategy();
                    break;
                case "AVERAGE":
                    obj = new AverageResourceAssessmentStrategy();
                    break;
                case "AS_IS":
                    obj = new AsIsResourceAssessmentStrategy();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under ResourceAssessmentStrategy! Returning null value.");
            }
            return obj;
        }
    }
}
