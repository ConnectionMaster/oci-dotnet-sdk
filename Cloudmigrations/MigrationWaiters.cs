/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.CloudmigrationsService.Models;
using Oci.CloudmigrationsService.Requests;
using Oci.CloudmigrationsService.Responses;

namespace Oci.CloudmigrationsService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of Migration.
    /// </summary>
    public class MigrationWaiters
    {
        private readonly MigrationClient client;

        public  MigrationWaiters(MigrationClient client)
        {
            this.client = client;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationRequest, GetMigrationResponse> ForMigration(GetMigrationRequest request, params Migration.LifecycleStateEnum[] targetStates)
        {
            return this.ForMigration(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationRequest, GetMigrationResponse> ForMigration(GetMigrationRequest request, WaiterConfiguration config, params Migration.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMigrationRequest, GetMigrationResponse>(
                request,
                request => client.GetMigration(request),
                response => targetStates.Contains(response.Migration.LifecycleState.Value),
                targetStates.Contains(Migration.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMigrationRequest, GetMigrationResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationAssetRequest, GetMigrationAssetResponse> ForMigrationAsset(GetMigrationAssetRequest request, params MigrationAsset.LifecycleStateEnum[] targetStates)
        {
            return this.ForMigrationAsset(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationAssetRequest, GetMigrationAssetResponse> ForMigrationAsset(GetMigrationAssetRequest request, WaiterConfiguration config, params MigrationAsset.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMigrationAssetRequest, GetMigrationAssetResponse>(
                request,
                request => client.GetMigrationAsset(request),
                response => targetStates.Contains(response.MigrationAsset.LifecycleState.Value),
                targetStates.Contains(MigrationAsset.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMigrationAssetRequest, GetMigrationAssetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationPlanRequest, GetMigrationPlanResponse> ForMigrationPlan(GetMigrationPlanRequest request, params MigrationPlan.LifecycleStateEnum[] targetStates)
        {
            return this.ForMigrationPlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetMigrationPlanRequest, GetMigrationPlanResponse> ForMigrationPlan(GetMigrationPlanRequest request, WaiterConfiguration config, params MigrationPlan.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetMigrationPlanRequest, GetMigrationPlanResponse>(
                request,
                request => client.GetMigrationPlan(request),
                response => targetStates.Contains(response.MigrationPlan.LifecycleState.Value),
                targetStates.Contains(MigrationPlan.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetMigrationPlanRequest, GetMigrationPlanResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReplicationScheduleRequest, GetReplicationScheduleResponse> ForReplicationSchedule(GetReplicationScheduleRequest request, params ReplicationSchedule.LifecycleStateEnum[] targetStates)
        {
            return this.ForReplicationSchedule(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetReplicationScheduleRequest, GetReplicationScheduleResponse> ForReplicationSchedule(GetReplicationScheduleRequest request, WaiterConfiguration config, params ReplicationSchedule.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetReplicationScheduleRequest, GetReplicationScheduleResponse>(
                request,
                request => client.GetReplicationSchedule(request),
                response => targetStates.Contains(response.ReplicationSchedule.LifecycleState.Value),
                targetStates.Contains(ReplicationSchedule.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetReplicationScheduleRequest, GetReplicationScheduleResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetAssetRequest, GetTargetAssetResponse> ForTargetAsset(GetTargetAssetRequest request, params TargetAsset.LifecycleStateEnum[] targetStates)
        {
            return this.ForTargetAsset(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetTargetAssetRequest, GetTargetAssetResponse> ForTargetAsset(GetTargetAssetRequest request, WaiterConfiguration config, params TargetAsset.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetTargetAssetRequest, GetTargetAssetResponse>(
                request,
                request => client.GetTargetAsset(request),
                response => targetStates.Contains(response.TargetAsset.LifecycleState.Value),
                targetStates.Contains(TargetAsset.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetTargetAssetRequest, GetTargetAssetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, params OperationStatus[] targetStates)
        {
            return this.ForWorkRequest(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetWorkRequestRequest, GetWorkRequestResponse> ForWorkRequest(GetWorkRequestRequest request, WaiterConfiguration config, params OperationStatus[] targetStates)
        {
            var agent = new WaiterAgent<GetWorkRequestRequest, GetWorkRequestResponse>(
                request,
                request => client.GetWorkRequest(request),
                response => targetStates.Contains(response.WorkRequest.Status.Value)
            );
            return new Waiter<GetWorkRequestRequest, GetWorkRequestResponse>(config, agent);
        }
    }
}
