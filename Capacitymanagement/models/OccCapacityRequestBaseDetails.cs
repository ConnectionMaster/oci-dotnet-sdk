/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CapacitymanagementService.Models
{
    /// <summary>
    /// The details of the create capacity request. This model serves as a base for different namespaces.
    /// </summary>
    [JsonConverter(typeof(OccCapacityRequestBaseDetailsModelConverter))]
    public class OccCapacityRequestBaseDetails 
    {
                ///
        /// <value>
        /// The type of the resource against which the user wants to place a capacity request.
        /// </value>
        ///
        public enum ResourceTypeEnum {
            [EnumMember(Value = "SERVER_HW")]
            ServerHw
        };

        
        /// <value>
        /// The type of the workload (Generic/ROW).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "WorkloadType is required.")]
        [JsonProperty(PropertyName = "workloadType")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<OccAvailabilitySummary.WorkloadTypeEnum> WorkloadType { get; set; }
        
        /// <value>
        /// The incremental quantity of resources supplied as the provisioning is underway.
        /// </value>
        [JsonProperty(PropertyName = "expectedHandoverQuantity")]
        public System.Nullable<long> ExpectedHandoverQuantity { get; set; }
        
        /// <value>
        /// The date on which the latest increment to supplied quantity of resources was delivered.
        /// </value>
        [JsonProperty(PropertyName = "dateExpectedHandover")]
        public System.Nullable<System.DateTime> DateExpectedHandover { get; set; }
        
        /// <value>
        /// The actual handed over quantity of resources at the time of request resolution.
        /// </value>
        [JsonProperty(PropertyName = "actualHandoverQuantity")]
        public System.Nullable<long> ActualHandoverQuantity { get; set; }
        
        /// <value>
        /// The date on which the actual handover quantity of resources is delivered.
        /// </value>
        [JsonProperty(PropertyName = "dateActualHandover")]
        public System.Nullable<System.DateTime> DateActualHandover { get; set; }
        
    }

    public class OccCapacityRequestBaseDetailsModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(OccCapacityRequestBaseDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(OccCapacityRequestBaseDetails);
            var discriminator = jsonObject["resourceType"].Value<string>();
            switch (discriminator)
            {
                case "SERVER_HW":
                    obj = new OccCapacityRequestComputeDetails();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under OccCapacityRequestBaseDetails! Returning null value.");
            }
            return obj;
        }
    }
}
