/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ThreatintelligenceService.Models
{
    /// <summary>
    /// Query parameters to filter indicators
    /// </summary>
    public class SummarizeIndicatorsDetails 
    {
        
        /// <value>
        /// The type of indicator this is
        /// </value>
        [JsonProperty(PropertyName = "indicatorType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<IndicatorType> IndicatorType { get; set; }
        
        /// <value>
        /// The value for the type of indicator this is
        /// </value>
        [JsonProperty(PropertyName = "indicatorValue")]
        public string IndicatorValue { get; set; }
        
        /// <value>
        /// The threat type of entites to be returned.
        /// </value>
        [JsonProperty(PropertyName = "threatTypes")]
        public System.Collections.Generic.List<string> ThreatTypes { get; set; }
        
        /// <value>
        /// The minimum level of confidence to return
        /// </value>
        [JsonProperty(PropertyName = "confidenceGreaterThanOrEqualTo")]
        public System.Nullable<int> ConfidenceGreaterThanOrEqualTo { get; set; }
        
        /// <value>
        /// The oldest update time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdatedGreaterThanOrEqualTo")]
        public System.Nullable<System.DateTime> TimeUpdatedGreaterThanOrEqualTo { get; set; }
        
        /// <value>
        /// The newest update time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdatedLessThan")]
        public System.Nullable<System.DateTime> TimeUpdatedLessThan { get; set; }
        
        /// <value>
        /// The oldest last seen time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeLastSeenGreaterThanOrEqualTo")]
        public System.Nullable<System.DateTime> TimeLastSeenGreaterThanOrEqualTo { get; set; }
        
        /// <value>
        /// The newest last seen time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeLastSeenLessThan")]
        public System.Nullable<System.DateTime> TimeLastSeenLessThan { get; set; }
        
        /// <value>
        /// The oldest creation time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeCreatedGreaterThanOrEqualTo")]
        public System.Nullable<System.DateTime> TimeCreatedGreaterThanOrEqualTo { get; set; }
        
        /// <value>
        /// The newest creation time of entities to be returned.
        /// </value>
        [JsonProperty(PropertyName = "timeCreatedLessThan")]
        public System.Nullable<System.DateTime> TimeCreatedLessThan { get; set; }
        
        /// <value>
        /// Filter to include indicators that have been seen by the provided source.
        /// </value>
        [JsonProperty(PropertyName = "indicatorSeenBy")]
        public string IndicatorSeenBy { get; set; }
        
        /// <value>
        /// Filter to include indicators associated with the provided malware.
        /// </value>
        [JsonProperty(PropertyName = "malware")]
        public string Malware { get; set; }
        
        /// <value>
        /// Filter to included indicators associated with the provided threat actor.
        /// </value>
        [JsonProperty(PropertyName = "threatActor")]
        public string ThreatActor { get; set; }
        
        /// <value>
        /// The sort order to use, either 'ASC' or 'DESC'.
        /// </value>
        [JsonProperty(PropertyName = "sortOrder")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<SortOrder> SortOrder { get; set; }
                ///
        /// <value>
        /// The field to sort by. Only one field to sort by may be provided
        /// </value>
        ///
        public enum SortByEnum {
            [EnumMember(Value = "CONFIDENCE")]
            Confidence,
            [EnumMember(Value = "TIMECREATED")]
            Timecreated,
            [EnumMember(Value = "TIMEUPDATED")]
            Timeupdated,
            [EnumMember(Value = "TIMELASTSEEN")]
            Timelastseen
        };

        /// <value>
        /// The field to sort by. Only one field to sort by may be provided
        /// </value>
        [JsonProperty(PropertyName = "sortBy")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<SortByEnum> SortBy { get; set; }
        
    }
}
