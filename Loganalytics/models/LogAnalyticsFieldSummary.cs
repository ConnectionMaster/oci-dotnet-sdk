/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// A summary of a field.
    /// </summary>
    public class LogAnalyticsFieldSummary 
    {
        
        /// <value>
        /// The name this field is given in the common event expression standard from mitre.org.
        /// This is used for reference when exporting content conforming to CEE standard
        /// 
        /// </value>
        [JsonProperty(PropertyName = "ceeAlias")]
        public string CeeAlias { get; set; }
        
        /// <value>
        /// The field data type.
        /// </value>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }
        
        /// <value>
        /// The field default regular expression.
        /// </value>
        [JsonProperty(PropertyName = "regularExpression")]
        public string RegularExpression { get; set; }
        
        /// <value>
        /// The field description.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// The field display name.
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The field edit version.
        /// </value>
        [JsonProperty(PropertyName = "editVersion")]
        public System.Nullable<long> EditVersion { get; set; }
        
        /// <value>
        /// The facet priority.
        /// </value>
        [JsonProperty(PropertyName = "facetPriority")]
        public System.Nullable<long> FacetPriority { get; set; }
        
        /// <value>
        /// The field internal name.
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the facet is elibigle for use.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isFacetEligible")]
        public System.Nullable<bool> IsFacetEligible { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the cardinality of the field is high.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isHighCardinality")]
        public System.Nullable<bool> IsHighCardinality { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field is a large data field.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isLargeData")]
        public System.Nullable<bool> IsLargeData { get; set; }
        
        /// <value>
        /// A flag indicating whether or not the field is multi-valued.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMultiValued")]
        public System.Nullable<bool> IsMultiValued { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not this is a primary field.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isPrimary")]
        public System.Nullable<bool> IsPrimary { get; set; }
        
        /// <value>
        /// The system flag.  A value of false denotes a custom, or user
        /// defined object.  A value of true denotes a built in object.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSystem")]
        public System.Nullable<bool> IsSystem { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field can be summarized.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSummarizable")]
        public System.Nullable<bool> IsSummarizable { get; set; }
        
        /// <value>
        /// The mapped value.
        /// </value>
        [JsonProperty(PropertyName = "mappedValue")]
        public string MappedValue { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field is metric key eligible.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMetricKeyEligible")]
        public System.Nullable<bool> IsMetricKeyEligible { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field is metric value eligible.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isMetricValueEligible")]
        public System.Nullable<bool> IsMetricValueEligible { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field is range facet eligible.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "rangeFacetEligible")]
        public System.Nullable<long> RangeFacetEligible { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the field is table eligible.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isTableEligible")]
        public System.Nullable<bool> IsTableEligible { get; set; }
        
        /// <value>
        /// The field unit type.
        /// </value>
        [JsonProperty(PropertyName = "unitType")]
        public string UnitType { get; set; }
        
    }
}
