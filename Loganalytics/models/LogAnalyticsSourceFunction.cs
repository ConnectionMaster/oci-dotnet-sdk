/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// LogAnalyticsSourceFunction
    /// </summary>
    public class LogAnalyticsSourceFunction 
    {
        
        /// <value>
        /// The function argument.
        /// </value>
        [JsonProperty(PropertyName = "arguments")]
        public System.Collections.Generic.List<LogAnalyticsMetaFunctionArgument> Arguments { get; set; }
        
        /// <value>
        /// A flag inidcating whether or not the source function is enabled.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }
        
        [JsonProperty(PropertyName = "function")]
        public LogAnalyticsMetaFunction Function { get; set; }
                ///
        /// <value>
        /// The source function name
        /// </value>
        ///
        public enum FunctionNameEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "GEOLOCATION")]
            Geolocation,
            [EnumMember(Value = "LOOKUP")]
            Lookup
        };

        /// <value>
        /// The source function name
        /// </value>
        [JsonProperty(PropertyName = "functionName")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<FunctionNameEnum> FunctionName { get; set; }
        
        /// <value>
        /// The source function unique identifier as a string.
        /// </value>
        [JsonProperty(PropertyName = "functionReference")]
        public string FunctionReference { get; set; }
        
        /// <value>
        /// The source unique identifier as a string.
        /// </value>
        [JsonProperty(PropertyName = "sourceReference")]
        public string SourceReference { get; set; }
        
        /// <value>
        /// Features of the source function to use for enrichment.
        /// </value>
        [JsonProperty(PropertyName = "features")]
        public System.Collections.Generic.List<string> Features { get; set; }
        
        /// <value>
        /// The source function unique identifier.
        /// </value>
        [JsonProperty(PropertyName = "functionId")]
        public System.Nullable<long> FunctionId { get; set; }
        
        /// <value>
        /// The source function order.
        /// </value>
        [JsonProperty(PropertyName = "order")]
        public System.Nullable<long> Order { get; set; }
        
        /// <value>
        /// The system flag.  A value of false denotes a custom, or user
        /// defined object.  A value of true denotes a built in object.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isSystem")]
        public System.Nullable<bool> IsSystem { get; set; }
        
        /// <value>
        /// The lookup column.
        /// </value>
        [JsonProperty(PropertyName = "lookupColumn")]
        public string LookupColumn { get; set; }
        
        /// <value>
        /// The lookup column position.
        /// </value>
        [JsonProperty(PropertyName = "lookupColumnPosition")]
        public System.Nullable<long> LookupColumnPosition { get; set; }
        
        /// <value>
        /// The lookup display name.
        /// </value>
        [JsonProperty(PropertyName = "lookupDisplayName")]
        public string LookupDisplayName { get; set; }
        
        /// <value>
        /// The lookup  mode.
        /// </value>
        [JsonProperty(PropertyName = "lookupMode")]
        public System.Nullable<long> LookupMode { get; set; }
        
        /// <value>
        /// The lookup table.
        /// </value>
        [JsonProperty(PropertyName = "lookupTable")]
        public string LookupTable { get; set; }
        
        /// <value>
        /// The source unique identifier.
        /// </value>
        [JsonProperty(PropertyName = "sourceId")]
        public System.Nullable<long> SourceId { get; set; }
        
    }
}
