/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// The additional field condition(s) to evaluate for an ingest time rule.
    /// </summary>
    public class IngestTimeRuleAdditionalFieldCondition 
    {
        
        /// <value>
        /// The additional field name to be evaluated.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ConditionField is required.")]
        [JsonProperty(PropertyName = "conditionField")]
        public string ConditionField { get; set; }
                ///
        /// <value>
        /// The operator to be used for evaluating the additional field.
        /// </value>
        ///
        public enum ConditionOperatorEnum {
            /// This value is used if a service returns a value for this enum that is not recognized by this version of the SDK.
            [EnumMember(Value = null)]
            UnknownEnumValue,
            [EnumMember(Value = "CONTAINS")]
            Contains,
            [EnumMember(Value = "CONTAINS_IGNORE_CASE")]
            ContainsIgnoreCase,
            [EnumMember(Value = "CONTAINS_REGEX")]
            ContainsRegex,
            [EnumMember(Value = "CONTAINS_ONEOF_REGEXES")]
            ContainsOneofRegexes,
            [EnumMember(Value = "ENDS_WITH")]
            EndsWith,
            [EnumMember(Value = "EQUAL")]
            Equal,
            [EnumMember(Value = "EQUAL_IGNORE_CASE")]
            EqualIgnoreCase,
            [EnumMember(Value = "IN")]
            In,
            [EnumMember(Value = "IN_IGNORE_CASE")]
            InIgnoreCase,
            [EnumMember(Value = "NOT_CONTAINS")]
            NotContains,
            [EnumMember(Value = "NOT_EQUAL")]
            NotEqual,
            [EnumMember(Value = "NOT_IN")]
            NotIn,
            [EnumMember(Value = "NOT_NULL")]
            NotNull,
            [EnumMember(Value = "STARTS_WITH")]
            StartsWith
        };

        /// <value>
        /// The operator to be used for evaluating the additional field.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ConditionOperator is required.")]
        [JsonProperty(PropertyName = "conditionOperator")]
        [JsonConverter(typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Nullable<ConditionOperatorEnum> ConditionOperator { get; set; }
        
        /// <value>
        /// The additional field value to be evaluated.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ConditionValue is required.")]
        [JsonProperty(PropertyName = "conditionValue")]
        public string ConditionValue { get; set; }
        
    }
}
