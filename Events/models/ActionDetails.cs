/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.EventsService.Models
{
    /// <summary>
    /// Object used to create an action.
    /// 
    /// </summary>
    [JsonConverter(typeof(ActionDetailsModelConverter))]
    public class ActionDetails 
    {
                ///
        /// <value>
        /// The action to perform if the condition in the rule matches an event.
        /// <br/>
        /// * **ONS:** Send to an Oracle Notification Service topic.
        /// * **OSS:** Send to a stream from Oracle Streaming Service.
        /// * **FAAS:** Send to an Oracle Functions Service endpoint.
        /// 
        /// </value>
        ///
        public enum ActionTypeEnum {
            [EnumMember(Value = "ONS")]
            Ons,
            [EnumMember(Value = "OSS")]
            Oss,
            [EnumMember(Value = "FAAS")]
            Faas
        };

        
        /// <value>
        /// Whether or not this action is currently enabled.
        /// <br/>
        /// Example: true
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsEnabled is required.")]
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }
        
        /// <value>
        /// A string that describes the details of the action. It does not have to be unique, and you can change it. Avoid entering
        /// confidential information.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
    }

    public class ActionDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(ActionDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(ActionDetails);
            var discriminator = jsonObject["actionType"].Value<string>();
            switch (discriminator)
            {
                case "OSS":
                    obj = new CreateStreamingServiceActionDetails();
                    break;
                case "FAAS":
                    obj = new CreateFaaSActionDetails();
                    break;
                case "ONS":
                    obj = new CreateNotificationServiceActionDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
