/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApmtracesService.Models
{
    /// <summary>
    /// Definition of a log object.
    /// 
    /// </summary>
    public class Log 
    {
        
        /// <value>
        /// Unique identifier (logId) for the logKey.  Note that this field is
        /// defined as logKey in the API and it maps to the logId in Application Performance Monitoring.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LogKey is required.")]
        [JsonProperty(PropertyName = "logKey")]
        public string LogKey { get; set; }
        
        /// <value>
        /// Name of the event.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "eventName")]
        public string EventName { get; set; }
        
        /// <value>
        /// Time used by the time picker (RecordedTime).  Either the timeCreated if present or the timeObserved.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Timestamp is required.")]
        [JsonProperty(PropertyName = "timestamp")]
        public System.Nullable<System.DateTime> Timestamp { get; set; }
        
        /// <value>
        /// Unique identifier for the trace (traceId) associated with this log.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "traceKey")]
        public string TraceKey { get; set; }
        
        /// <value>
        /// Unique identifier for the span (spanId) associated with this log.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "spanKey")]
        public string SpanKey { get; set; }
        
        /// <value>
        /// Trace flags.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "traceFlags")]
        public System.Nullable<int> TraceFlags { get; set; }
        
        /// <value>
        /// Time that the log event occurred (CreatedTime).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// Time that the log was received by apm (ObservedTime).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeObserved")]
        public System.Nullable<System.DateTime> TimeObserved { get; set; }
        
        /// <value>
        /// Log Severity text (SeverityText).  Also known as Log level.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "severityText")]
        public string SeverityText { get; set; }
        
        /// <value>
        /// Log Severity number (SeverityNumber).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "severityNumber")]
        public System.Nullable<int> SeverityNumber { get; set; }
        
        /// <value>
        /// Log body (Body).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "body")]
        public string Body { get; set; }
        
        /// <value>
        /// Full values for attributes that are too long to be stored as a log attribute (Overflow).
        /// 
        /// </value>
        [JsonProperty(PropertyName = "overflowAttributes")]
        public string OverflowAttributes { get; set; }
        
        /// <value>
        /// List of attributes associated with the logs.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "attributes")]
        public System.Collections.Generic.List<Attribute> Attributes { get; set; }
        
        /// <value>
        /// Metadata about the attributes in the logs.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "attributeMetadata")]
        public System.Collections.Generic.Dictionary<string, AttributeMetadata> AttributeMetadata { get; set; }
        
    }
}
