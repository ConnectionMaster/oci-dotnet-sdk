/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ApmtracesService.Models
{
    /// <summary>
    /// Object that contains the details about the scheduled query to be updated.
    /// 
    /// </summary>
    public class UpdateScheduledQueryDetails 
    {
        
        /// <value>
        /// Name of the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryName")]
        public string ScheduledQueryName { get; set; }
        
        /// <value>
        /// Type of the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryProcessingType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledQueryProcessingType> ScheduledQueryProcessingType { get; set; }
        
        /// <value>
        /// Processing sub type of the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryProcessingSubType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledQueryProcessingSubType> ScheduledQueryProcessingSubType { get; set; }
        
        /// <value>
        /// Scheduled query to be run.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryText")]
        public string ScheduledQueryText { get; set; }
        
        /// <value>
        /// Schedule for the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQuerySchedule")]
        public string ScheduledQuerySchedule { get; set; }
        
        /// <value>
        /// Description for the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryDescription")]
        public string ScheduledQueryDescription { get; set; }
        
        /// <value>
        /// Maximum runtime for the scheduled query in seconds.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryMaximumRuntimeInSeconds")]
        public System.Nullable<long> ScheduledQueryMaximumRuntimeInSeconds { get; set; }
        
        /// <value>
        /// Retention period for the scheduled query in milliseconds.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryRetentionPeriodInMs")]
        public System.Nullable<long> ScheduledQueryRetentionPeriodInMs { get; set; }
        
        [JsonProperty(PropertyName = "scheduledQueryProcessingConfiguration")]
        public ScheduledQueryProcessingConfig ScheduledQueryProcessingConfiguration { get; set; }
        
        /// <value>
        /// Retention criteria for the scheduled query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scheduledQueryRetentionCriteria")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ScheduledQueryRetentionCriteria> ScheduledQueryRetentionCriteria { get; set; }
        
        /// <value>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// Example: {&quot;bar-key&quot;: &quot;value&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// Example: {&quot;foo-namespace&quot;: {&quot;bar-key&quot;: &quot;value&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
    }
}
