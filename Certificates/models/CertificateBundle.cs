/*
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.CertificatesService.Models
{
    /// <summary>
    /// The contents of the certificate, properties of the certificate (and certificate version), and user-provided contextual metadata for the certificate.
    /// 
    /// </summary>
    [JsonConverter(typeof(CertificateBundleModelConverter))]
    public class CertificateBundle 
    {
                ///
        /// <value>
        /// The type of certificate bundle, which indicates whether the private key fields are included.
        /// </value>
        ///
        public enum CertificateBundleTypeEnum {
            [EnumMember(Value = "CERTIFICATE_CONTENT_PUBLIC_ONLY")]
            CertificateContentPublicOnly,
            [EnumMember(Value = "CERTIFICATE_CONTENT_WITH_PRIVATE_KEY")]
            CertificateContentWithPrivateKey
        };

        
        /// <value>
        /// The OCID of the certificate.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CertificateId is required.")]
        [JsonProperty(PropertyName = "certificateId")]
        public string CertificateId { get; set; }
        
        /// <value>
        /// The name of the certificate.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CertificateName is required.")]
        [JsonProperty(PropertyName = "certificateName")]
        public string CertificateName { get; set; }
        
        /// <value>
        /// The version number of the certificate.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VersionNumber is required.")]
        [JsonProperty(PropertyName = "versionNumber")]
        public System.Nullable<long> VersionNumber { get; set; }
        
        /// <value>
        /// A unique certificate identifier used in certificate revocation tracking, formatted as octets.
        /// Example: 03 AC FC FA CC B3 CB 02 B8 F8 DE F5 85 E7 7B FF
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SerialNumber is required.")]
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; set; }
        
        /// <value>
        /// The certificate in PEM format.
        /// </value>
        [JsonProperty(PropertyName = "certificatePem")]
        public string CertificatePem { get; set; }
        
        /// <value>
        /// The certificate chain (in PEM format) for the certificate bundle.
        /// </value>
        [JsonProperty(PropertyName = "certChainPem")]
        public string CertChainPem { get; set; }
        
        /// <value>
        /// An optional property indicating when the certificate version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// Example: 2019-04-03T21:10:29.600Z
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Validity is required.")]
        [JsonProperty(PropertyName = "validity")]
        public Validity Validity { get; set; }
        
        /// <value>
        /// The name of the certificate version.
        /// </value>
        [JsonProperty(PropertyName = "versionName")]
        public string VersionName { get; set; }
        
        /// <value>
        /// A list of rotation states for the certificate bundle.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Stages is required.")]
        [JsonProperty(PropertyName = "stages", ItemConverterType = typeof(Oci.Common.Utils.ResponseEnumConverter))]
        public System.Collections.Generic.List<VersionStage> Stages { get; set; }
        
        [JsonProperty(PropertyName = "revocationStatus")]
        public RevocationStatus RevocationStatus { get; set; }
        
    }

    public class CertificateBundleModelConverter : JsonConverter
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(CertificateBundle);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(CertificateBundle);
            var discriminator = jsonObject["certificateBundleType"].Value<string>();
            switch (discriminator)
            {
                case "CERTIFICATE_CONTENT_PUBLIC_ONLY":
                    obj = new CertificateBundlePublicOnly();
                    break;
                case "CERTIFICATE_CONTENT_WITH_PRIVATE_KEY":
                    obj = new CertificateBundleWithPrivateKey();
                    break;
            }
            if (obj != null)
            {
                serializer.Populate(jsonObject.CreateReader(), obj);
            }
            else
            {
                logger.Warn($"The type {discriminator} is not present under CertificateBundle! Returning null value.");
            }
            return obj;
        }
    }
}
